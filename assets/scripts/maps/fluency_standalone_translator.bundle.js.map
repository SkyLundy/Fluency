{"version":3,"file":"../fluency_standalone_translator.bundle.js","sources":["fluency_standalone_translator.bundle.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _Fluency = _interopRequireDefault(require(\"../global/Fluency\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst FtStandaloneTranslatorFieldset = function () {\n  /**\n   * Attribute added to table after initialization\n   * @type {String}\n   */\n  const initializedAttr = 'data-ft-initialized';\n\n  /**\n   * Initialize all fieldsets\n   * @return {void}\n   */\n  const init = () => {\n    const translationApiUsageTables = document.querySelectorAll(`.ft-standalone-translator-fieldset:not([${initializedAttr}])`);\n    [...translationApiUsageTables].forEach(usageTableEl => {\n      new initializeStandaloneTranslatorFieldset(usageTableEl);\n    });\n  };\n  return {\n    initializedAttr,\n    init\n  };\n}();\n\n/**\n * Creates all behavior for a given standalone translator\n * @param  {Element} fieldset\n * @return {void}\n */\nconst initializeStandaloneTranslatorFieldset = function (fieldset) {\n  /**\n   * Contains the activityOverlay object\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /**\n   * Provides set/get methods for the type of Inputfields present for source/translated content\n   */\n  let sourceContentController;\n  let translatedContentController;\n\n  /**\n   * Provides interfaces for language select Inputfields\n   */\n  let sourceLanguageSelectController;\n  let targetLanguageSelectController;\n\n  /**\n   * Standalone translator localized text\n   *\n   * @type {object}\n   */\n  let uiText = _FtConfig.default.getUiTextFor('standaloneTranslator');\n\n  /**\n   * The classes assigned to the fields within the translator\n   * Values will be replaced with their corresponding HTML Elements on initialization\n   * @type {Object}\n   */\n  const translatorEls = {\n    sourceLanguageSelect: 'ft-source-language',\n    targetLanguageSelect: 'ft-target-language',\n    sourceContentInputfield: 'ft-source-content',\n    translatedContentInputfield: 'ft-translated-content',\n    translateButton: 'js-ft-translate',\n    copyButton: 'ft-click-to-copy',\n    clearButton: 'ft-click-to-clear',\n    swapButton: 'js-ft-swap-languages'\n  };\n\n  /**\n   * Finds the elements corresponding to their classes, or elements derived from\n   *\n   * @return {void}\n   */\n  this.cacheElements = () => {\n    translatorEls.translateButton = fieldset.querySelector(`.${translatorEls.translateButton}`);\n    translatorEls.swapButton = document.querySelector(`.${translatorEls.swapButton}`);\n    translatorEls.sourceLanguageSelect = fieldset.querySelector(`.${translatorEls.sourceLanguageSelect}`).closest('li.Inputfield');\n    translatorEls.targetLanguageSelect = fieldset.querySelector(`.${translatorEls.targetLanguageSelect}`).closest('li.Inputfield');\n    translatorEls.sourceContentInputfield = fieldset.querySelector(`.${translatorEls.sourceContentInputfield}`).closest('li.Inputfield');\n    translatorEls.translatedContentInputfield = fieldset.querySelector(`.${translatorEls.translatedContentInputfield}`).closest('li.Inputfield');\n  };\n\n  /**\n   * Returns this inputfield instance\n   * @return {Element}\n   */\n  this.getSelf = () => fieldset;\n\n  /**\n   * Binds behavior to translate button\n   *\n   * @return {void}\n   */\n  this.bindTranslateButton = () => {\n    translatorEls.translateButton.addEventListener('click', e => {\n      e.preventDefault();\n      const sourceLanguage = sourceLanguageSelectController.getValue();\n      const targetLanguage = targetLanguageSelectController.getValue();\n      const sourceContent = sourceContentController.getContent();\n      if (!sourceLanguage) {\n        sourceLanguageSelectController.indicateError();\n      }\n      if (!targetLanguage) {\n        targetLanguageSelectController.indicateError();\n      }\n      if (!sourceContent) {\n        sourceContentController.indicateError();\n      }\n      if (!sourceLanguage || !targetLanguage || !sourceContent) {\n        return;\n      }\n      activityOverlay.showActivity();\n      _Fluency.default.getTranslation(sourceLanguage, targetLanguage, sourceContent).then(result => {\n        if (result.error) {\n          activityOverlay.showError(result.message);\n        }\n        translatedContentController.setContent(result.translations[0]);\n        activityOverlay.hide();\n      });\n    });\n  };\n\n  /**\n   * Holds the currently selected languages for swapping\n   * @type {Object}\n   */\n  this.selectedLanguages = {\n    source: null,\n    target: null\n  };\n\n  /**\n   * Binds behavior to language swap button\n   *\n   * @return {void}\n   */\n  this.bindLanguageSwapButton = () => {\n    translatorEls.swapButton.addEventListener('click', e => {\n      e.preventDefault();\n      this.swapLanguageSelectValues();\n      this.swapTranslationContent();\n    });\n  };\n\n  /**\n   * Swaps the contents of the original/translated fields\n   * @return {void}\n   */\n  this.swapTranslationContent = () => {\n    const sourceContent = sourceContentController.getContent();\n    const targetContent = translatedContentController.getContent();\n    sourceContentController.setContent(targetContent);\n    translatedContentController.setContent(sourceContent);\n  };\n\n  /**\n   * Swaps the source/target language select values\n   * @return {[type]}\n   */\n  this.swapLanguageSelectValues = () => {\n    let sourceLanguage = this.selectedLanguages.source;\n    let targetLanguage = this.selectedLanguages.target;\n    const sourceOptions = sourceLanguageSelectController.getOptions();\n    const targetOptions = targetLanguageSelectController.getOptions();\n    const newSourceLanguage = this.getLanguageSwapValue('target', sourceOptions);\n    const newTargetLanguage = this.getLanguageSwapValue('source', targetOptions);\n    sourceLanguageSelectController.setValue(newSourceLanguage);\n    targetLanguageSelectController.setValue(newTargetLanguage);\n    this.selectedLanguages.source = targetLanguage;\n    this.selectedLanguages.target = sourceLanguage;\n  };\n\n  /**\n   * Find a language if it exists in a given language select options array\n   * If it is not found with a direct match, converts the value of language to a simplified language\n   * code and returns a potential match\n   *\n   * @param  {String} type   Language select value\n   * @param  {Array} options Language select option values\n   * @return {String|null}   Language code if found, null if doesn't exist\n   */\n  this.getLanguageSwapValue = (type, options) => {\n    let language = this.selectedLanguages[type];\n    if (options.includes(language)) {\n      return language;\n    }\n    const simplifiedLanguage = language.split('-')[0];\n    const simplifiedOptions = options.map(opt => opt.split('-')[0]);\n    const simplifiedIndex = simplifiedOptions.indexOf(simplifiedLanguage);\n    if (simplifiedIndex) {\n      return options[simplifiedIndex];\n    }\n  };\n\n  /**\n   * Sets the initial swap button state on instantiation\n   *\n   * @return {void}\n   */\n  this.initLanguageSwapButtonState = () => {\n    const sourceLanguage = sourceLanguageSelectController.getValue();\n    const targetLanguage = targetLanguageSelectController.getValue();\n    this.selectedLanguages.source = sourceLanguage;\n    this.selectedLanguages.target = targetLanguage;\n    if (!sourceLanguage || !targetLanguage) {\n      this.setSwapButtonState.disabled();\n      return;\n    }\n    this.setSwapButtonState.enabled();\n  };\n\n  /**\n   * Sets enabled/disabled for swap button\n   * @type {Object}\n   */\n  this.setSwapButtonState = {\n    enabled: () => translatorEls.swapButton.disabled = false,\n    disabled: () => translatorEls.swapButton.disabled = true\n  };\n\n  /**\n   * Adds the clear content button to the original textarea\n   * @return {void}\n   */\n  this.addClearContentButton = () => {\n    const buttonClass = translatorEls.clearButton;\n    translatorEls.clearButton = document.createElement('a');\n    translatorEls.clearButton.setAttribute('class', buttonClass);\n    const clearIcon = document.createElement('i');\n    clearIcon.setAttribute('class', 'ft-clear-icon fa fa-fw fa-trash-o');\n    const clearText = document.createElement('span');\n    clearText.innerText = uiText.clickToClear;\n    clearText.setAttribute('class', 'ft-clear-text');\n    translatorEls.clearButton.append(clearText, clearIcon);\n    const inputfieldHeader = translatorEls.sourceContentInputfield.querySelector('.InputfieldHeader');\n    inputfieldHeader.classList.add(`${buttonClass}-container`);\n    inputfieldHeader.appendChild(translatorEls.clearButton);\n    this.bindClearContentButton();\n  };\n\n  /**\n   * Binds the event listener for the button copy action\n   * @return {void}\n   */\n  this.bindClearContentButton = () => {\n    translatorEls.clearButton.addEventListener('click', e => {\n      e.preventDefault();\n      sourceContentController.clearContent();\n      translatedContentController.clearContent();\n    });\n  };\n\n  /**\n   * Adds and binds the copy content button\n   * @return {void}\n   */\n  this.addCopyContentButton = () => {\n    const buttonClass = translatorEls.copyButton;\n    translatorEls.copyButton = document.createElement('a');\n    translatorEls.copyButton.setAttribute('class', buttonClass);\n    const copyIcon = document.createElement('i');\n    copyIcon.setAttribute('class', 'ft-copy-icon fa fa-fw fa-clone');\n    const copyText = document.createElement('span');\n    copyText.innerText = uiText.clickToCopy;\n    copyText.setAttribute('class', 'ft-copy-text');\n    translatorEls.copyButton.append(copyText, copyIcon);\n    const inputfieldHeader = translatorEls.translatedContentInputfield.querySelector('.InputfieldHeader');\n    inputfieldHeader.classList.add(`${buttonClass}-container`);\n    inputfieldHeader.appendChild(translatorEls.copyButton);\n    this.bindCopyContentButton();\n  };\n\n  /**\n   * Binds the event listener for the button copy action\n   * @return {void}\n   */\n  this.bindCopyContentButton = () => {\n    translatorEls.copyButton.addEventListener('click', e => {\n      e.preventDefault();\n      const content = translatedContentController.getContent();\n      if (content) {\n        navigator.clipboard.writeText(content).then(() => {\n          translatedContentController.indicateSuccess(uiText.copied);\n        });\n      }\n    });\n  };\n\n  /**\n   * Shows/hides content copy button\n   * @param  {Bool} contentPresent Determines if button is shown or not\n   * @return {void}\n   */\n  this.toggleCopyContentButton = contentPresent => {\n    if (contentPresent) {\n      translatorEls.copyButton.classList.add('enabled');\n      return;\n    }\n    translatorEls.copyButton.classList.remove('enabled');\n  };\n  this.createInputControllers = () => {\n    sourceLanguageSelectController = new languageSelectController('source', translatorEls.sourceLanguageSelect, this.languageSelectCallback);\n    targetLanguageSelectController = new languageSelectController('target', translatorEls.targetLanguageSelect, this.languageSelectCallback);\n    sourceContentController = new translationContentController(translatorEls.sourceContentInputfield);\n    translatedContentController = new translationContentController(translatorEls.translatedContentInputfield, this.toggleCopyContentButton);\n  };\n\n  /**\n   * Passed to the languageSelectController on creation, is called when 'change' event fires\n   *\n   * @param  {Object}  selectEl Instance of the calling languageSelectController\n   * @param  {Event  } event    addEventListener event object\n   * @return {void}\n   */\n  this.languageSelectCallback = (languageSelectController, event) => {\n    const selectType = languageSelectController.getType();\n    const value = languageSelectController.getValue();\n    this.selectedLanguages[selectType] = value || null;\n    !!value ? this.setSwapButtonState.enabled() : this.setSwapButtonState.disabled();\n  };\n\n  /**\n   * Inits on object creation\n   */\n  (() => {\n    this.cacheElements();\n    this.createInputControllers();\n    activityOverlay = new _FtActivityOverlay.default(this);\n    this.addCopyContentButton();\n    this.addClearContentButton();\n    this.bindTranslateButton();\n    this.initLanguageSwapButtonState();\n    this.bindLanguageSwapButton();\n  })();\n};\n\n/**\n * Stat management for language select Inputfields\n */\nconst languageSelectController = function (type, inputfield, onChangeCallback) {\n  let activityOverlay;\n  let selectEl;\n  this.getType = () => type;\n  this.getSelf = () => inputfield;\n  this.getValue = () => selectEl.value || null;\n  this.setValue = value => selectEl.value = value;\n  this.getOptions = () => [...selectEl.options].map(opt => opt.value).filter(opt => !!opt);\n  this.indicateError = () => activityOverlay.flashError('', 300);\n  (() => {\n    selectEl = inputfield.querySelector('select');\n    selectEl.addEventListener('change', e => onChangeCallback(this, e));\n    activityOverlay = new _FtActivityOverlay.default(this);\n  })();\n};\n\n/**\n * Content IO for translation content Inputfields\n */\nconst translationContentController = function (inputfield, contentPresenceChangeCallback = null) {\n  /**\n   * Standalone translator localized text\n   *\n   * @type {object}\n   */\n  let uiText = _FtConfig.default.getUiTextFor('standaloneTranslator');\n\n  /**\n   * Holds the textarea that will have content managed\n   */\n  let inputfieldContent;\n\n  /**\n   * Holds state of field contents\n   */\n  let hasContent = false;\n\n  /**\n   * Activity Overlay instance\n   */\n  let activityOverlay;\n  this.getSelf = () => inputfield;\n\n  /**\n   * Retrieves content from this Inputfield\n   * @return {String}\n   */\n  this.getContent = () => inputfieldContent.get();\n\n  /**\n   * Sets content for this Inputfield\n   * @param  {String} content Content to set\n   * @return {void}\n   */\n  this.setContent = content => inputfieldContent.set(content);\n\n  /**\n   * Removes all content from this Inputfield\n   * @return {void}\n   */\n  this.clearContent = () => this.setContent('');\n\n  /**\n   * Flash an error overlay to draw attention\n   * @return {void}\n   */\n  this.indicateError = () => activityOverlay.flashError('', 300);\n\n  /**\n   * Flash a success message overlay\n   * @param  {String} message Content of message\n   * @return {void}\n   */\n  this.indicateSuccess = message => activityOverlay.flashSuccess(message);\n\n  /**\n   * Inits on object creation\n   */\n  (() => {\n    inputfieldContent = new textareaInputfieldContent(inputfield, contentPresenceChangeCallback);\n    activityOverlay = new _FtActivityOverlay.default(this);\n  })();\n};\n\n/**\n * textarea I/O\n */\nconst textareaInputfieldContent = function (inputfield, stateChangeCallback = null) {\n  let textarea;\n  let hasContent = false;\n  this.set = content => {\n    textarea.value = content;\n    textarea.dispatchEvent(new Event('input'));\n  };\n  this.get = () => textarea.value;\n  this.bindContentChangeListener = () => {\n    textarea.addEventListener('input', e => {\n      const currentContent = e.target.value;\n      if (currentContent && !hasContent) {\n        hasContent = true;\n        stateChangeCallback(true);\n      }\n      if (!currentContent && hasContent) {\n        hasContent = false;\n        stateChangeCallback(false);\n      }\n    });\n  };\n  (() => {\n    textarea = inputfield.querySelector('textarea');\n    if (stateChangeCallback) {\n      this.bindContentChangeListener();\n    }\n  })();\n};\nvar _default = FtStandaloneTranslatorFieldset;\nexports.default = _default;\n\n},{\"../global/Fluency\":3,\"../global/FtConfig\":4,\"../ui/FtActivityOverlay\":5}],2:[function(require,module,exports){\n\"use strict\";\n\nvar _FtStandaloneTranslatorFieldset = _interopRequireDefault(require(\"./components/FtStandaloneTranslatorFieldset\"));\nvar _FtConfig = _interopRequireDefault(require(\"./global/FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nwindow.addEventListener('load', e => {\n  if (_FtConfig.default.moduleShouldInitialize()) {\n    _FtStandaloneTranslatorFieldset.default.init();\n  }\n});\n\n},{\"./components/FtStandaloneTranslatorFieldset\":1,\"./global/FtConfig\":4}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"./FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Core module interface\n * Handles all interaction with the ProcessWire module backend\n * @return {object} Public interfaces\n */\n\nconst Fluency = function () {\n  /**\n   * Localized error strings\n   * @type {Object}\n   */\n  const errors = _FtConfig.default.getUiTextFor('errors');\n\n  /**\n   * Data Request Methods\n   */\n\n  /**\n   * Gets a translation from the Fluency module\n   * @param  {String}       sourceLanguage ISO language code\n   * @param  {String}       targetLanguage ISO langauge code\n   * @param  {String|Array} content        Content to translate\n   * @param  {Array}        options        Additional options\n   * @param  {Bool|null}         caching        Enable/disable caching\n   * @return {Promise}\n   */\n  const getTranslation = (sourceLanguage, targetLanguage, content, options = [], caching = null) => {\n    return postRequest(_FtConfig.default.getApiEndpointFor('translation'), {\n      sourceLanguage: sourceLanguage,\n      targetLanguage: targetLanguage,\n      content: content,\n      options: options,\n      caching: caching\n    }, response => {\n      return response;\n    });\n  };\n\n  /**\n   * Gets the current translation service API usage\n   * @return {Promise}\n   */\n  const getUsage = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('usage'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Get all language available for translation. Provides source/target lists from the translation\n   * service API\n   * @return {Promise}\n   */\n  const getAvailableLanguages = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('languages'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear all cached translations\n   * @return {Promise}\n   */\n  const deleteTranslationCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translationCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear cached list of translatable languages\n   * @return {Promise}\n   */\n  const deleteTranslatableLanguagesCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translatableLanguagesCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * HTTP Requests\n   */\n\n  /**\n   * Create headers for AJAX requests\n   * @return {Object}\n   */\n  const requestHeaders = requestType => {\n    const requestHeaders = {\n      'X-Requested-With': 'XMLHttpRequest'\n    };\n    if (requestType === 'GET') {\n      requestHeaders['Accept'] = 'application/json';\n    }\n    if (requestType === 'POST') {\n      requestHeaders['Content-Type'] = 'application/json';\n    }\n    return requestHeaders;\n  };\n\n  /**\n   * Executes a POST request to a given endpoint\n   * @param  {String}    endpoint URL for AJAX request\n   * @param  {Object}    data     Data for request\n   * @param  {Callable}  data     Function to handle response body\n   * @return {Promise}\n   */\n  const postRequest = (endpoint, data, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'POST',\n      cache: 'no-store',\n      headers: requestHeaders,\n      body: JSON.stringify(data)\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a GET request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const getRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'GET',\n      cache: 'no-store',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a DELETE request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const deleteRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'DELETE',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Parses response\n   * @param  {Object} response Fluency API response\n   * @return {Object|Void}\n   * @throws Error\n   */\n  const parseResponse = response => {\n    if (response.status === 204) {\n      return response;\n    }\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error();\n  };\n\n  /**\n   * Parses and returns results for a fetch error\n   * These are network level errors that occur between ProcessWire and the hosting server\n   * Any translation or service errors will be located within the response body itself\n   * @param  {Error} error Fetch API error object\n   * @return {Object}\n   */\n  const handleFetchError = error => {\n    console.error('[Fluency module API failure]', error.message);\n    const returnObject = {\n      error: null,\n      message: null\n    };\n    switch (error.message.split(' ')[0]) {\n      case 'NetworkError':\n        returnObject.error = 'FLUENCY_CLIENT_DISCONNECTED';\n        returnObject.message = errors['FLUENCY_CLIENT_DISCONNECTED'];\n        break;\n      default:\n        returnObject.error = 'UNKNOWN_ERROR';\n        returnObject.message = errors['UNKNOWN_ERROR'];\n        break;\n    }\n    return returnObject;\n  };\n  return {\n    deleteTranslatableLanguagesCache,\n    deleteTranslationCache,\n    getAvailableLanguages,\n    getTranslation,\n    getUsage\n  };\n}();\nvar _default = Fluency;\nexports.default = _default;\n\n},{\"./FtConfig\":4}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * This provides access methods to get module configuration values\n * @return {Object}  Public methods\n */\nconst FtConfig = function () {\n  // Public properties\n\n  const fieldInitializedAttr = 'data-ft-initialized';\n  const translationActionTypes = {\n    each: 'translate_each_language',\n    all: 'translate_to_all_languages',\n    both: 'both'\n  };\n\n  // Private properties\n\n  /**\n   * Holds the data passed from the Fluency module\n   * @access Private\n   * @type {Object}\n   */\n  const config = ProcessWire.config.fluency;\n\n  /**\n   * All UI strings\n   * @type {Object}\n   */\n  const localizedStrings = config.localization;\n\n  /**\n   * Classes for elements created in UI\n   * @type {Object}\n   */\n  const elementClasses = {\n    translateButton: {\n      container: 'ft-translate-button-container',\n      button: 'ft-translate-button'\n    },\n    languageTranslator: {\n      container: 'Inputfield InputfieldHeaderHidden',\n      content: 'InputfieldContent ft-language-translator-button-content',\n      translateButton: 'ft-translate-all-button',\n      sourceLanguageSelect: 'uk-select ft-source-language-select',\n      sourceLanguageSelectLabel: 'ft-source-language-select-label'\n    },\n    statusPlaceholder: {\n      container: 'ft-translation-status-container',\n      label: 'ft-translation-status'\n    },\n    icon: 'ft-icon'\n  };\n\n  /**\n   * Objects interface with the Fluency config object so that changes to the object\n   * structure from the back end do not break the UI. Use the public methods below\n   * to access ProcessWire.config.fluency properties and data\n   */\n\n  /**\n   * Localized strings keyed sets\n   * @type {Object}\n   */\n  const strings = {\n    activityOverlay: localizedStrings.activityOverlay,\n    languageSelect: localizedStrings.languageSelect,\n    inputfieldTranslateButtons: localizedStrings.inputfieldTranslateButtons,\n    standaloneTranslator: localizedStrings.standaloneTranslator,\n    usage: localizedStrings.usage,\n    errors: localizedStrings.errors,\n    languageTranslator: localizedStrings.languageTranslator\n  };\n\n  /**\n   * Fluency API keyed URLs\n   * @type {Object}\n   */\n  const endpoints = {\n    languages: config.apiEndpoints.languages,\n    translatableLanguagesCache: config.apiEndpoints.translatableLanguagesCache,\n    test: config.apiEndpoints.test,\n    translation: config.apiEndpoints.translation,\n    translationCache: config.apiEndpoints.translationCache,\n    usage: config.apiEndpoints.usage\n  };\n\n  /**\n   * Contains all of the Fluency configured langauges from the module\n   * @type {Array}\n   */\n  const configuredLanguages = config.configuredLanguages;\n\n  /**\n   * Contains an array of ProcessWire language IDs not configured in Fluency\n   * @type {Array}\n   */\n  const unconfiguredLanguages = config.unconfiguredLanguages;\n\n  // Public methods\n\n  /**\n   * Fluency REST API\n   */\n  const getApiEndpointFor = key => endpoints[key];\n\n  /**\n   * Languages\n   */\n\n  /**\n   * Get all configured languages\n   * @return {object}\n   */\n  const getConfiguredLanguages = () => configuredLanguages;\n\n  /**\n   * Returns ProcessWire's default language\n   * @return {object}\n   */\n  const getDefaultLanguage = () => getConfiguredLanguages().reduce((defaultLang, lang) => lang.default ? lang : defaultLang, null);\n\n  /**\n   * Determines if the language with a given ProcessWire ID can be translated\n   * @param  {int|string} languageId ProcessWire language ID\n   * @return {bool}\n   */\n  const languageIsTranslatable = languageId => !getUnconfiguredLanguages().includes(parseInt(languageId, 10));\n\n  /**\n   * Get all languages not configured in Fluency\n   * @return {object}\n   */\n  const getUnconfiguredLanguages = () => unconfiguredLanguages;\n\n  /**\n   * Gets total count of configured and unconfigured languages\n   * @return {int}\n   */\n  const getLanguageCount = () => getConfiguredLanguages().length + getUnconfiguredLanguages().length;\n\n  /**\n   * Get a configured language by it's ProcessWire ID\n   * @param  {string|int} pwLanguageId ProcessWire language ID\n   * @return {object}\n   */\n  const getLanguageForId = pwLanguageId => {\n    pwLanguageId = parseInt(pwLanguageId, 10);\n    return getConfiguredLanguages().reduce((match, language) => language.id === pwLanguageId ? language : match, null);\n  };\n\n  /**\n   * Localization\n   */\n\n  /**\n   * Accessor method for localized UI strings\n   * @param  {string} key Object key\n   * @return {string}\n   */\n  const getUiTextFor = key => strings[key];\n\n  /**\n   * Module Configuration/State\n   */\n\n  /**\n   * Determines if Fluency JS should initialize based on whether languages have\n   * been configured\n   * @return {bool}\n   */\n  const moduleShouldInitialize = () => getConfiguredLanguages().length > 1;\n\n  /**\n   * Returns the translation engine config object for the engine configured in Fluency\n   * @return {object|null}\n   */\n  const getEngineInfo = () => config.engine;\n\n  /**\n   * Does this engine provide usage data?\n   * @return {bool}\n   */\n  const getEngineProvidesUsageData = () => getEngineInfo().providesUsageData;\n\n  /**\n   * Gets the type of translation action chosen in the Flunecy module config\n   * @return {string}\n   */\n  const getTranslationAction = () => config.interface.inputfieldTranslationAction;\n\n  /**\n   * The attribute added to individual field elements where translation has been disabled\n   * @return {string}\n   */\n  const getTranslationDisabledFieldAttribute = () => `[${config.interface.translationDisabledFieldAttr}]`;\n\n  /**\n   * Class names added to UI components\n   * @param  {string} element The type of component\n   * @return {string}\n   */\n  const getElementClassesFor = element => elementClasses[element];\n  return {\n    fieldInitializedAttr,\n    getApiEndpointFor,\n    getConfiguredLanguages,\n    getDefaultLanguage,\n    getElementClassesFor,\n    getEngineInfo,\n    getEngineProvidesUsageData,\n    getLanguageCount,\n    getLanguageForId,\n    getTranslationAction,\n    getTranslationDisabledFieldAttribute,\n    getUiTextFor,\n    getUnconfiguredLanguages,\n    languageIsTranslatable,\n    moduleShouldInitialize,\n    translationActionTypes\n  };\n}();\nvar _default = FtConfig;\nexports.default = _default;\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Creates, inserts, and controls the actions the activity overlay for the provided\n * targetContainer\n * @param {object} targetContainer An instantiated object for an inputfield or fieldset\n * @param {string} type       The type of activity for this overlay. 'translate' or 'update'\n */\nconst FtActivityOverlay = function (targetContainer, activityType = 'translating') {\n  const elClasses = {\n    parent: 'ft-activity-overlay-container',\n    overlay: 'ft-activity-overlay',\n    error: 'error',\n    message: 'message',\n    flash: 'flash',\n    success: 'success',\n    activity: 'activity',\n    visible: 'visible',\n    activityContainer: 'ft-activity',\n    activityStaticText: 'ft-activity-text',\n    activityAnimationContainer: 'ft-activity-animation-container',\n    activityAnimationItem: 'ft-activity-animation-item',\n    messageContainer: 'ft-activity-message'\n  };\n\n  /**\n   * Will contain the activityOverlay Element for this targetContainer\n   * @type {Element}\n   */\n  let activityOverlay;\n\n  /**\n   * Will contain the message Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let messageContainer;\n\n  /**\n   * Will contain the animation container Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let activityContainer;\n\n  /**\n   * Control Methods\n   */\n\n  /**\n   * This shows the overlay's activity animation that was created at instantiation\n   * Must be manually hidden with the hide() method\n   *\n   * @return {void}\n   */\n  this.showActivity = () => {\n    this.setActivityActive();\n    this.setOverlayVisible();\n  };\n\n  /**\n   * Shows a message in the overlay (neutral background)\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showMessage = (message, displayTime = 5000) => {\n    this.setMessageContent(message);\n    this.setActivityInactive();\n    this.setMessageActive();\n    this.setOverlayVisible();\n    this.hide(displayTime);\n  };\n\n  /**\n   * Shows a success message (success color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashSuccess = (message, displayTime = 500) => {\n    this.setSuccessActive();\n    this.setFlashActive();\n    this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows a success message (error color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashError = (message, displayTime = 500) => {\n    this.setFlashActive();\n    this.setErrorActive();\n    this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows an error message in a visible overlay (error background)\n   *\n   * @param  {String} message     Message to show in overlay error\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showError = (message, displayTime = 7000) => {\n    this.setErrorActive();\n    this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Hide an overlay immediately or after a preset amount of time\n   *\n   * @param {Number} delay Length of time in ms before hiding overlay\n   */\n  this.hide = (delay = 0) => {\n    setTimeout(() => {\n      this.setOverlayInvisible();\n    }, delay);\n\n    // Ensures the animation is finished before modifying content\n    setTimeout(() => {\n      this.setActivityInactive();\n      this.setMessageInactive();\n      this.setErrorInactive();\n      this.setFlashInactive();\n      this.setMessageContent('');\n    }, delay + 500);\n  };\n\n  /**\n   * Private Methods\n   */\n\n  /**\n   * Shows the activity element\n   *\n   * @access Private\n   */\n  this.setActivityActive = () => {\n    activityOverlay.classList.add(elClasses.activity);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setActivityInactive = () => {\n    activityOverlay.classList.remove(elClasses.activity);\n  };\n\n  /**\n   * Shows the message element\n   *\n   * @access Private\n   */\n  this.setMessageActive = () => {\n    activityOverlay.classList.add(elClasses.message);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setMessageInactive = () => {\n    activityOverlay.classList.remove(elClasses.message);\n  };\n\n  /**\n   * Sets the content of the overlay message\n   *\n   * @access Private\n   */\n  this.setMessageContent = content => {\n    messageContainer.innerText = content;\n  };\n\n  /**\n   * Adds flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashActive = content => {\n    activityOverlay.classList.add(elClasses.flash);\n  };\n\n  /**\n   * removes flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashInactive = content => {\n    activityOverlay.classList.remove(elClasses.flash);\n  };\n\n  /**\n   * Sets message to success\n   *\n   * @access Private\n   */\n  this.setSuccessActive = () => {\n    activityOverlay.classList.add(elClasses.success);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setSuccessInactive = () => {\n    activityOverlay.classList.remove(elClasses.success);\n  };\n\n  /**\n   * Sets message to error\n   *\n   * @access Private\n   */\n  this.setErrorActive = () => {\n    activityOverlay.classList.add(elClasses.error);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setErrorInactive = () => {\n    activityOverlay.classList.remove(elClasses.error);\n  };\n\n  /**\n   * Shows this activity overlay\n   *\n   * @access Private\n   */\n  this.setOverlayVisible = () => {\n    activityOverlay.classList.add(elClasses.visible);\n  };\n  this.setOverlayInvisible = () => {\n    activityOverlay.classList.remove(elClasses.visible);\n  };\n\n  /**\n   * Creates and returns an activity overlay element\n   *\n   * @return {HTMLElement}\n   */\n  this.create = () => {\n    activityOverlay = this.buildOverlayEl();\n    activityContainer = this.buildActivityEl();\n    messageContainer = this.buildMessageEl();\n    activityOverlay.appendChild(activityContainer);\n    activityOverlay.appendChild(messageContainer);\n    return activityOverlay;\n  };\n\n  /**\n   * Creates the parent overlay element\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildOverlayEl = () => {\n    const overlay = document.createElement('div');\n\n    // overlay.setAttribute('data-gradient-1', 'rgba(62, 185, 152, .85)');\n    overlay.setAttribute('class', elClasses.overlay);\n    return overlay;\n  };\n\n  /**\n   * Creates container for animation and contents of animation\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildActivityEl = () => {\n    let text = this.getActivityTexts();\n    let activityAnimationContainer = document.createElement('div');\n    activityAnimationContainer.setAttribute('class', elClasses.activityAnimationContainer);\n\n    // Add all animation items to the animation container\n    activityAnimationContainer = text.animated.reduce((el, string) => {\n      let activityText = document.createElement('span');\n\n      // Add text items\n      activityText.setAttribute('class', elClasses.activityAnimationItem);\n      activityText.innerHTML = string;\n      el.appendChild(activityText);\n      return el;\n    }, activityAnimationContainer);\n\n    // Create static text element\n    let staticText = document.createElement('div');\n    staticText.setAttribute('class', elClasses.activityStaticText);\n    staticText.innerText = text.static;\n\n    // Create activity container and append children\n    activityContainer = document.createElement('div');\n    activityContainer.setAttribute('class', elClasses.activityContainer);\n    activityContainer.appendChild(staticText);\n    activityContainer.appendChild(activityAnimationContainer);\n    return activityContainer;\n  };\n\n  /**\n   * Gets activity overlay texts and shuffles the animated array\n   * No purpose really other than to add some uniqueness to overlay animations and prevent looking\n   * like one language was preferred by me over another.\n   *\n   * Fisher-Yates algorithm, for the curious\n   *\n   * @return {Array} Randomized array of the activity animation texts for this instance\n   * @access Private\n   */\n  this.getActivityTexts = () => {\n    let uiTexts = _FtConfig.default.getUiTextFor('activityOverlay')[activityType];\n    let animationTexts = uiTexts.animated;\n    for (let i = animationTexts.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = animationTexts[i];\n      animationTexts[i] = animationTexts[j];\n      animationTexts[j] = temp;\n    }\n    uiTexts.animated = animationTexts;\n    return uiTexts;\n  };\n\n  /**\n   * Builds the element that will hold messages in the overlay\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildMessageEl = () => {\n    messageContainer = document.createElement('div');\n    messageContainer.setAttribute('class', elClasses.messageContainer);\n    return messageContainer;\n  };\n  (() => {\n    const targetContainerContainer = targetContainer.getSelf();\n    activityOverlay = this.create();\n    targetContainerContainer.classList.add(elClasses.parent);\n    targetContainerContainer.appendChild(activityOverlay);\n  })();\n};\nvar _default = FtActivityOverlay;\nexports.default = _default;\n\n},{\"../global/FtConfig\":4}]},{},[2]);\n"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","default","_Fluency","_interopRequireDefault","_FtConfig","_FtActivityOverlay","obj","__esModule","FtStandaloneTranslatorFieldset","initializedAttr","init","document","querySelectorAll","forEach","usageTableEl","initializeStandaloneTranslatorFieldset","fieldset","let","activityOverlay","sourceContentController","translatedContentController","sourceLanguageSelectController","targetLanguageSelectController","uiText","getUiTextFor","translatorEls","sourceLanguageSelect","targetLanguageSelect","sourceContentInputfield","translatedContentInputfield","translateButton","copyButton","clearButton","swapButton","this","cacheElements","querySelector","closest","getSelf","bindTranslateButton","addEventListener","preventDefault","sourceLanguage","getValue","targetLanguage","sourceContent","getContent","indicateError","showActivity","getTranslation","then","result","error","showError","message","setContent","translations","hide","selectedLanguages","source","target","bindLanguageSwapButton","swapLanguageSelectValues","swapTranslationContent","targetContent","sourceOptions","getOptions","targetOptions","newSourceLanguage","getLanguageSwapValue","newTargetLanguage","setValue","type","options","language","includes","simplifiedLanguage","split","simplifiedIndex","map","opt","indexOf","initLanguageSwapButtonState","setSwapButtonState","enabled","disabled","addClearContentButton","buttonClass","clearIcon","createElement","setAttribute","clearText","inputfieldHeader","innerText","clickToClear","append","classList","add","appendChild","bindClearContentButton","clearContent","addCopyContentButton","copyIcon","copyText","clickToCopy","bindCopyContentButton","content","navigator","clipboard","writeText","indicateSuccess","copied","toggleCopyContentButton","contentPresent","remove","createInputControllers","languageSelectController","languageSelectCallback","translationContentController","event","selectType","getType","inputfield","onChangeCallback","selectEl","filter","flashError","contentPresenceChangeCallback","inputfieldContent","get","set","flashSuccess","textareaInputfieldContent","stateChangeCallback","textarea","hasContent","dispatchEvent","Event","bindContentChangeListener","currentContent","../global/Fluency","../global/FtConfig","../ui/FtActivityOverlay","2","_FtStandaloneTranslatorFieldset","window","moduleShouldInitialize","./components/FtStandaloneTranslatorFieldset","./global/FtConfig","3","Fluency","errors","requestHeaders","requestType","X-Requested-With","getRequest","endpoint","responseHandler","fetch","method","cache","headers","parseResponse","catch","handleFetchError","deleteRequest","response","status","ok","json","console","returnObject","deleteTranslatableLanguagesCache","getApiEndpointFor","deleteTranslationCache","getAvailableLanguages","caching","data","body","JSON","stringify","getUsage","./FtConfig","4","FtConfig","config","ProcessWire","fluency","localizedStrings","localization","elementClasses","container","button","languageTranslator","sourceLanguageSelectLabel","statusPlaceholder","label","icon","strings","languageSelect","inputfieldTranslateButtons","standaloneTranslator","usage","endpoints","languages","apiEndpoints","translatableLanguagesCache","test","translation","translationCache","configuredLanguages","unconfiguredLanguages","getConfiguredLanguages","getUnconfiguredLanguages","getEngineInfo","engine","fieldInitializedAttr","key","getDefaultLanguage","reduce","defaultLang","lang","getElementClassesFor","element","getEngineProvidesUsageData","providesUsageData","getLanguageCount","getLanguageForId","pwLanguageId","parseInt","match","id","getTranslationAction","interface","inputfieldTranslationAction","getTranslationDisabledFieldAttribute","translationDisabledFieldAttr","languageIsTranslatable","languageId","translationActionTypes","each","all","both","5","targetContainer","activityType","elClasses","parent","overlay","flash","success","activity","visible","activityContainer","activityStaticText","activityAnimationContainer","activityAnimationItem","messageContainer","setActivityActive","setOverlayVisible","showMessage","displayTime","setMessageContent","setActivityInactive","setMessageActive","setSuccessActive","setFlashActive","setErrorActive","delay","setTimeout","setOverlayInvisible","setMessageInactive","setErrorInactive","setFlashInactive","setSuccessInactive","create","buildOverlayEl","buildActivityEl","buildMessageEl","text","getActivityTexts","animated","el","string","activityText","innerHTML","staticText","static","uiTexts","animationTexts","j","Math","floor","random","temp","targetContainerContainer"],"mappings":"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"}