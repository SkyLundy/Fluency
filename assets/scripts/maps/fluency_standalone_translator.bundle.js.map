{"version":3,"file":"../fluency_standalone_translator.bundle.js","sources":["fluency_standalone_translator.bundle.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _Fluency = _interopRequireDefault(require(\"../global/Fluency\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst FtStandaloneTranslatorFieldset = function () {\n  /**\n   * Attribute added to table after initialization\n   * @type {String}\n   */\n  const initializedAttr = 'data-ft-initialized';\n\n  /**\n   * Initialize all fieldsets\n   * @return {void}\n   */\n  const init = () => {\n    const translationApiUsageTables = document.querySelectorAll(`.ft-standalone-translator:not([${initializedAttr}])`);\n    [...translationApiUsageTables].forEach(usageTableEl => {\n      new initializeStandaloneTranslatorFieldset(usageTableEl);\n    });\n  };\n  return {\n    initializedAttr,\n    init\n  };\n}();\n\n/**\n * Creates all behavior for a given standalone translator\n * @param  {Element} fieldset\n * @return {void}\n */\nconst initializeStandaloneTranslatorFieldset = function (fieldset) {\n  /**\n   * Contains the activityOverlay object\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /**\n   * Provides set/get methods for the type of Inputfields present for source/translated content\n   */\n  let sourceContentController;\n  let translatedContentController;\n\n  /**\n   * Provides interfaces for language select Inputfields\n   */\n  let sourceLanguageSelectController;\n  let targetLanguageSelectController;\n\n  /**\n   * Standalone translator localized text\n   *\n   * @type {object}\n   */\n  let uiText = _FtConfig.default.getUiTextFor('standaloneTranslator');\n\n  /**\n   * The classes assigned to the fields within the translator\n   * Values will be replaced with their corresponding HTML Elements on initialization\n   * @type {Object}\n   */\n  const translatorEls = {\n    sourceLanguageSelect: 'ft-source-language',\n    targetLanguageSelect: 'ft-target-language',\n    sourceContentInputfield: 'ft-source-content',\n    translatedContentInputfield: 'ft-translated-content',\n    translateButton: 'js-ft-translate',\n    copyButton: 'ft-click-to-copy'\n  };\n\n  /**\n   * Finds the elements corresponding to their classes, or elements derived from\n   *\n   * @return {void}\n   */\n  this.cacheInputs = () => {\n    translatorEls.translateButton = fieldset.querySelector(`.${translatorEls.translateButton}`);\n    translatorEls.sourceLanguageSelect = fieldset.querySelector(`.${translatorEls.sourceLanguageSelect}`).closest('li.Inputfield');\n    translatorEls.targetLanguageSelect = fieldset.querySelector(`.${translatorEls.targetLanguageSelect}`).closest('li.Inputfield');\n    translatorEls.sourceContentInputfield = fieldset.querySelector(`.${translatorEls.sourceContentInputfield}`).closest('li.Inputfield');\n    translatorEls.translatedContentInputfield = fieldset.querySelector(`.${translatorEls.translatedContentInputfield}`).closest('li.Inputfield');\n  };\n\n  /**\n   * Returns this inputfield instance\n   * @return {Element}\n   */\n  this.getSelf = () => fieldset;\n\n  /**\n   * Binds behavior to translate button\n   *\n   * @return {void}\n   */\n  this.bindTranslateButton = () => {\n    translatorEls.translateButton.addEventListener('click', e => {\n      e.preventDefault();\n      let sourceLanguage = sourceLanguageSelectController.getValue();\n      let targetLanguage = targetLanguageSelectController.getValue();\n      let sourceContent = sourceContentController.getContent();\n      if (!sourceLanguage) {\n        sourceLanguageSelectController.indicateError();\n      }\n      if (!targetLanguage) {\n        targetLanguageSelectController.indicateError();\n      }\n      if (!sourceContent) {\n        sourceContentController.indicateError();\n      }\n      if (!sourceLanguage || !targetLanguage || !sourceContent) {\n        return;\n      }\n      activityOverlay.showActivity();\n      _Fluency.default.getTranslation(sourceLanguage, targetLanguage, sourceContent).then(result => {\n        if (result.error) {\n          activityOverlay.showError(result.message);\n        }\n        translatedContentController.setContent(result.translations[0]);\n        activityOverlay.hide();\n      });\n    });\n  };\n\n  /**\n   * Adds and binds the copy content button\n   * @return {void}\n   */\n  this.addCopyContentButton = () => {\n    const copyButtonClass = translatorEls.copyButton;\n    translatorEls.copyButton = document.createElement('button');\n    translatorEls.copyButton.setAttribute('class', copyButtonClass);\n    translatorEls.copyButton.innerText = uiText.clickToCopy;\n    const copyIcon = document.createElement('i');\n    copyIcon.setAttribute('class', 'ft-copy-icon fa fa-fw fa-clone');\n    translatorEls.copyButton.appendChild(copyIcon);\n    const inputfieldHeader = translatorEls.translatedContentInputfield.querySelector('.InputfieldHeader');\n    inputfieldHeader.classList.add(`${copyButtonClass}-container`);\n    inputfieldHeader.appendChild(translatorEls.copyButton);\n    this.bindCopyContentButton();\n  };\n\n  /**\n   * Binds the event listener for the button copy action\n   *\n   * @return {void}\n   */\n  this.bindCopyContentButton = () => {\n    translatorEls.copyButton.addEventListener('click', e => {\n      e.preventDefault();\n      const content = translatedContentController.getContent();\n      if (content) {\n        navigator.clipboard.writeText(content).then(() => {\n          translatedContentController.indicateSuccess(uiText.copied);\n        });\n      }\n    });\n  };\n\n  /**\n   * Shows/hides content copy button\n   * @param  {Bool} contentPresent Determines if button is shown or not\n   * @return {void}\n   */\n  this.toggleCopyContentButton = contentPresent => {\n    if (contentPresent) {\n      translatorEls.copyButton.classList.add('visible');\n      return;\n    }\n    translatorEls.copyButton.classList.remove('visible');\n  };\n  this.createInputControllers = () => {\n    sourceLanguageSelectController = new languageSelectController(translatorEls.sourceLanguageSelect);\n    targetLanguageSelectController = new languageSelectController(translatorEls.targetLanguageSelect);\n    sourceContentController = new translationContentController(translatorEls.sourceContentInputfield);\n    translatedContentController = new translationContentController(translatorEls.translatedContentInputfield, this.toggleCopyContentButton);\n  };\n\n  /**\n   * Inits on object creation\n   */\n  (() => {\n    this.cacheInputs();\n    this.createInputControllers();\n    activityOverlay = new _FtActivityOverlay.default(this);\n    this.addCopyContentButton();\n    this.bindTranslateButton();\n  })();\n};\n\n/**\n * Stat management for language select Inputfields\n */\nconst languageSelectController = function (inputfield) {\n  let activityOverlay;\n  let selectEl;\n  this.getSelf = () => inputfield;\n  this.getValue = () => selectEl.value;\n  this.indicateError = () => activityOverlay.flashError('', 300);\n  (() => {\n    selectEl = inputfield.querySelector('select');\n    activityOverlay = new _FtActivityOverlay.default(this);\n  })();\n};\n\n/**\n * Content IO for translation content Inputfields\n */\nconst translationContentController = function (inputfield) {\n  let contentPresenceChangeCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  /**\n   * Standalone translator localized text\n   *\n   * @type {object}\n   */\n  let uiText = _FtConfig.default.getUiTextFor('standaloneTranslator');\n\n  /**\n   * Holds the textarea that will have content managed\n   */\n  let inputfieldContent;\n\n  /**\n   * Holds state of field contents\n   */\n  let hasContent = false;\n\n  /**\n   * Activity Overlay instance\n   */\n  let activityOverlay;\n  this.getSelf = () => inputfield;\n\n  /**\n   * Retrieves content from this Inputfield\n   * @return {String}\n   */\n  this.getContent = () => inputfieldContent.get();\n\n  /**\n   * Sets content for this Inputfield\n   * @param  {String} content Content to set\n   * @return {void}\n   */\n  this.setContent = content => {\n    inputfieldContent.set(content);\n  };\n  // this.setContent = content => inputfieldContent.set(content);\n\n  /**\n   * Flash an error overlay to draw attention\n   * @return {void}\n   */\n  this.indicateError = () => activityOverlay.flashError('', 300);\n\n  /**\n   * Flash a success message overlay\n   * @param  {String} message Content of message\n   * @return {void}\n   */\n  this.indicateSuccess = message => activityOverlay.flashSuccess(message);\n\n  /**\n   * Inits on object creation\n   */\n  (() => {\n    inputfieldContent = new textareaInputfieldContent(inputfield, contentPresenceChangeCallback);\n    activityOverlay = new _FtActivityOverlay.default(this);\n  })();\n};\n\n/**\n * textarea I/O\n */\nconst textareaInputfieldContent = function (inputfield) {\n  let stateChangeCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let textarea;\n  let hasContent = false;\n  this.set = content => {\n    textarea.value = content;\n    textarea.dispatchEvent(new Event('input'));\n  };\n  this.get = () => textarea.value;\n  this.bindContentChangeListener = () => {\n    textarea.addEventListener('input', e => {\n      const currentContent = e.target.value;\n      if (currentContent && !hasContent) {\n        hasContent = true;\n        stateChangeCallback(true);\n      }\n      if (!currentContent && hasContent) {\n        hasContent = false;\n        stateChangeCallback(false);\n      }\n    });\n  };\n  (() => {\n    textarea = inputfield.querySelector('textarea');\n    if (stateChangeCallback) {\n      this.bindContentChangeListener();\n    }\n  })();\n};\nvar _default = FtStandaloneTranslatorFieldset;\nexports.default = _default;\n\n},{\"../global/Fluency\":3,\"../global/FtConfig\":4,\"../ui/FtActivityOverlay\":5}],2:[function(require,module,exports){\n\"use strict\";\n\nvar _FtStandaloneTranslatorFieldset = _interopRequireDefault(require(\"./components/FtStandaloneTranslatorFieldset\"));\nvar _FtConfig = _interopRequireDefault(require(\"./global/FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nwindow.addEventListener('load', e => {\n  if (_FtConfig.default.moduleShouldInitialize()) {\n    _FtStandaloneTranslatorFieldset.default.init();\n  }\n});\n\n},{\"./components/FtStandaloneTranslatorFieldset\":1,\"./global/FtConfig\":4}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"./FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Core module interface\n * Handles all interaction with the ProcessWire module backend\n * @return {object} Public interfaces\n */\n\nconst Fluency = function () {\n  /**\n   * Localized error strings\n   * @type {Object}\n   */\n  const errors = _FtConfig.default.getUiTextFor('errors');\n\n  /**\n   * Data Request Methods\n   */\n\n  /**\n   * Gets a translation from the Fluency module\n   * @param  {String}       sourceLanguage ISO language code\n   * @param  {String}       targetLanguage ISO langauge code\n   * @param  {String|Array} content        Content to translate\n   * @param  {Array}        options        Additional options\n   * @param  {Bool|null}         caching        Enable/disable caching\n   * @return {Promise}\n   */\n  const getTranslation = function (sourceLanguage, targetLanguage, content) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let caching = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    return postRequest(_FtConfig.default.getApiEndpointFor('translation'), {\n      sourceLanguage: sourceLanguage,\n      targetLanguage: targetLanguage,\n      content: content,\n      options: options,\n      caching: caching\n    }, response => {\n      return response;\n    });\n  };\n\n  /**\n   * Gets the current translation service API usage\n   * @return {Promise}\n   */\n  const getUsage = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('usage'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Get all language available for translation. Provides source/target lists from the translation\n   * service API\n   * @return {Promise}\n   */\n  const getAvailableLanguages = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('languages'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear all cached translations\n   * @return {Promise}\n   */\n  const deleteTranslationCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translationCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear cached list of translatable languages\n   * @return {Promise}\n   */\n  const deleteTranslatableLanguagesCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translatableLanguagesCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * HTTP Requests\n   */\n\n  /**\n   * Create headers for AJAX requests\n   * @return {Object}\n   */\n  const requestHeaders = requestType => {\n    const requestHeaders = {\n      'X-Requested-With': 'XMLHttpRequest'\n    };\n    if (requestType === 'GET') {\n      requestHeaders['Accept'] = 'application/json';\n    }\n    if (requestType === 'POST') {\n      requestHeaders['Content-Type'] = 'application/json';\n    }\n    return requestHeaders;\n  };\n\n  /**\n   * Executes a POST request to a given endpoint\n   * @param  {String}    endpoint URL for AJAX request\n   * @param  {Object}    data     Data for request\n   * @param  {Callable}  data     Function to handle response body\n   * @return {Promise}\n   */\n  const postRequest = (endpoint, data, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'POST',\n      cache: 'no-store',\n      headers: requestHeaders,\n      body: JSON.stringify(data)\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a GET request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const getRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'GET',\n      cache: 'no-store',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a DELETE request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const deleteRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'DELETE',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Parses response\n   * @param  {Object} response Fluency API response\n   * @return {Object|Void}\n   * @throws Error\n   */\n  const parseResponse = response => {\n    if (response.status === 204) {\n      return response;\n    }\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error();\n  };\n\n  /**\n   * Parses and returns results for a fetch error\n   * These are network level errors that occur between ProcessWire and the hosting server\n   * Any translation or service errors will be located within the response body itself\n   * @param  {Error} error Fetch API error object\n   * @return {Object}\n   */\n  const handleFetchError = error => {\n    console.error('[Fluency module API failure]', error.message);\n    const returnObject = {\n      error: null,\n      message: null\n    };\n    switch (error.message.split(' ')[0]) {\n      case 'NetworkError':\n        returnObject.error = 'FLUENCY_CLIENT_DISCONNECTED';\n        returnObject.message = errors['FLUENCY_CLIENT_DISCONNECTED'];\n        break;\n      default:\n        returnObject.error = 'UNKNOWN_ERROR';\n        returnObject.message = errors['UNKNOWN_ERROR'];\n        break;\n    }\n    return returnObject;\n  };\n  return {\n    deleteTranslatableLanguagesCache,\n    deleteTranslationCache,\n    getAvailableLanguages,\n    getTranslation,\n    getUsage\n  };\n}();\nvar _default = Fluency;\nexports.default = _default;\n\n},{\"./FtConfig\":4}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * This provides access methods to get module configuration values\n * @return {Object}  Public methods\n */\nconst FtConfig = function () {\n  // Public properties\n\n  const fieldInitializedAttr = 'data-ft-initialized';\n\n  // Private properties\n\n  /**\n   * Holds the data passed from the Fluency module\n   * @access Private\n   * @type {Object}\n   */\n  const config = ProcessWire.config.fluency;\n\n  /**\n   * All UI strings\n   * @type {Object}\n   */\n  const localizedStrings = config.localization;\n\n  /**\n   * Objects interface with the Fluency config object so that changes to the object\n   * structure from the back end do not break the UI. Use the public methods below\n   * to access ProcessWire.config.fluency properties and data\n   */\n\n  /**\n   * Localized strings keyed sets\n   * @type {Object}\n   */\n  const strings = {\n    activityOverlay: localizedStrings.activityOverlay,\n    languageSelect: localizedStrings.languageSelect,\n    inputfieldTranslateButtons: localizedStrings.inputfieldTranslateButtons,\n    standaloneTranslator: localizedStrings.standaloneTranslator,\n    usage: localizedStrings.usage,\n    errors: localizedStrings.errors\n  };\n\n  /**\n   * Fluency API keyed URLs\n   * @type {Object}\n   */\n  const endpoints = {\n    languages: config.apiEndpoints.languages,\n    translatableLanguagesCache: config.apiEndpoints.translatableLanguagesCache,\n    test: config.apiEndpoints.test,\n    translation: config.apiEndpoints.translation,\n    translationCache: config.apiEndpoints.translationCache,\n    usage: config.apiEndpoints.usage\n  };\n\n  /**\n   * Contains all of the Fluency configured langauges from the module\n   * @type {Array}\n   */\n  const configuredLanguages = config.configuredLanguages;\n\n  /**\n   * Contains an array of ProcessWire language IDs not configured in Fluency\n   * @type {Array}\n   */\n  const unconfiguredLanguages = config.unconfiguredLanguages;\n\n  // Public methods\n\n  /**\n   * Fluency REST API\n   */\n  const getApiEndpointFor = key => endpoints[key];\n\n  /**\n   * Languages\n   */\n\n  const getConfiguredLanguages = () => configuredLanguages;\n  const getDefaultLanguage = () => getConfiguredLanguages().reduce((defaultLang, lang) => lang.default ? lang : defaultLang, null);\n  const languageIsTranslatable = languageId => !getUnconfiguredLanguages().includes(parseInt(languageId, 10));\n  const getUnconfiguredLanguages = () => unconfiguredLanguages;\n  const getLanguageCount = () => getConfiguredLanguages().length + getUnconfiguredLanguages().length;\n  const getLanguageForId = pwLanguageId => {\n    pwLanguageId = parseInt(pwLanguageId, 10);\n    return getConfiguredLanguages().reduce((match, language) => language.id === pwLanguageId ? language : match, null);\n  };\n\n  /**\n   * Localization\n   */\n\n  const getUiTextFor = key => strings[key];\n\n  /**\n   * Module Configuration/State\n   */\n\n  const moduleShouldInitialize = () => getConfiguredLanguages().length > 1;\n  const getEngineInfo = () => config.engine;\n  const getEngineProvidesUsageData = () => getEngineInfo().providesUsageData;\n  return {\n    fieldInitializedAttr,\n    getApiEndpointFor,\n    getConfiguredLanguages,\n    getDefaultLanguage,\n    getEngineInfo,\n    getEngineProvidesUsageData,\n    getLanguageCount,\n    getLanguageForId,\n    getUiTextFor,\n    getUnconfiguredLanguages,\n    languageIsTranslatable,\n    moduleShouldInitialize\n  };\n}();\nvar _default = FtConfig;\nexports.default = _default;\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Creates, inserts, and controls the actions the activity overlay for the provided\n * targetContainer\n * @param {object} targetContainer An instantiated object for an inputfield or fieldset\n * @param {string} type       The type of activity for this overlay. 'translate' or 'update'\n */\nconst FtActivityOverlay = function (targetContainer) {\n  var _this = this;\n  let activityType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'translating';\n  const elClasses = {\n    parent: 'ft-activity-overlay-container',\n    overlay: 'ft-activity-overlay',\n    error: 'error',\n    message: 'message',\n    flash: 'flash',\n    success: 'success',\n    activity: 'activity',\n    visible: 'visible',\n    activityContainer: 'ft-activity',\n    activityStaticText: 'ft-activity-text',\n    activityAnimationContainer: 'ft-activity-animation-container',\n    activityAnimationItem: 'ft-activity-animation-item',\n    messageContainer: 'ft-activity-message'\n  };\n\n  /**\n   * Will contain the activityOverlay Element for this targetContainer\n   * @type {Element}\n   */\n  let activityOverlay;\n\n  /**\n   * Will contain the message Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let messageContainer;\n\n  /**\n   * Will contain the animation container Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let activityContainer;\n\n  /**\n   * Control Methods\n   */\n\n  /**\n   * This shows the overlay's activity animation that was created at instantiation\n   * Must be manually hidden with the hide() method\n   *\n   * @return {void}\n   */\n  this.showActivity = () => {\n    this.setActivityActive();\n    this.setOverlayVisible();\n  };\n\n  /**\n   * Shows a message in the overlay (neutral background)\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showMessage = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;\n    _this.setMessageContent(message);\n    _this.setActivityInactive();\n    _this.setMessageActive();\n    _this.setOverlayVisible();\n    _this.hide(displayTime);\n  };\n\n  /**\n   * Shows a success message (success color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashSuccess = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n    _this.setSuccessActive();\n    _this.setFlashActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows a success message (error color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashError = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n    _this.setFlashActive();\n    _this.setErrorActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows an error message in a visible overlay (error background)\n   *\n   * @param  {String} message     Message to show in overlay error\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showError = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 7000;\n    _this.setErrorActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Hide an overlay immediately or after a preset amount of time\n   *\n   * @param {Number} delay Length of time in ms before hiding overlay\n   */\n  this.hide = function () {\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    setTimeout(() => {\n      _this.setOverlayInvisible();\n    }, delay);\n\n    // Ensures the animation is finished before modifying content\n    setTimeout(() => {\n      _this.setActivityInactive();\n      _this.setMessageInactive();\n      _this.setErrorInactive();\n      _this.setFlashInactive();\n      _this.setMessageContent('');\n    }, delay + 500);\n  };\n\n  /**\n   * Private Methods\n   */\n\n  /**\n   * Shows the activity element\n   *\n   * @access Private\n   */\n  this.setActivityActive = () => {\n    activityOverlay.classList.add(elClasses.activity);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setActivityInactive = () => {\n    activityOverlay.classList.remove(elClasses.activity);\n  };\n\n  /**\n   * Shows the message element\n   *\n   * @access Private\n   */\n  this.setMessageActive = () => {\n    activityOverlay.classList.add(elClasses.message);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setMessageInactive = () => {\n    activityOverlay.classList.remove(elClasses.message);\n  };\n\n  /**\n   * Sets the content of the overlay message\n   *\n   * @access Private\n   */\n  this.setMessageContent = content => {\n    messageContainer.innerText = content;\n  };\n\n  /**\n   * Adds flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashActive = content => {\n    activityOverlay.classList.add(elClasses.flash);\n  };\n\n  /**\n   * removes flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashInactive = content => {\n    activityOverlay.classList.remove(elClasses.flash);\n  };\n\n  /**\n   * Sets message to success\n   *\n   * @access Private\n   */\n  this.setSuccessActive = () => {\n    activityOverlay.classList.add(elClasses.success);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setSuccessInactive = () => {\n    activityOverlay.classList.remove(elClasses.success);\n  };\n\n  /**\n   * Sets message to error\n   *\n   * @access Private\n   */\n  this.setErrorActive = () => {\n    activityOverlay.classList.add(elClasses.error);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setErrorInactive = () => {\n    activityOverlay.classList.remove(elClasses.error);\n  };\n\n  /**\n   * Shows this activity overlay\n   *\n   * @access Private\n   */\n  this.setOverlayVisible = () => {\n    activityOverlay.classList.add(elClasses.visible);\n  };\n  this.setOverlayInvisible = () => {\n    activityOverlay.classList.remove(elClasses.visible);\n  };\n\n  /**\n   * Creates and returns an activity overlay element\n   *\n   * @return {HTMLElement}\n   */\n  this.create = () => {\n    activityOverlay = this.buildOverlayEl();\n    activityContainer = this.buildActivityEl();\n    messageContainer = this.buildMessageEl();\n    activityOverlay.appendChild(activityContainer);\n    activityOverlay.appendChild(messageContainer);\n    return activityOverlay;\n  };\n\n  /**\n   * Creates the parent overlay element\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildOverlayEl = () => {\n    const overlay = document.createElement('div');\n\n    // overlay.setAttribute('data-gradient-1', 'rgba(62, 185, 152, .85)');\n    overlay.setAttribute('class', elClasses.overlay);\n    return overlay;\n  };\n\n  /**\n   * Creates container for animation and contents of animation\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildActivityEl = () => {\n    let text = _FtConfig.default.getUiTextFor('activityOverlay')[activityType];\n    let activityAnimationContainer = document.createElement('div');\n    activityAnimationContainer.setAttribute('class', elClasses.activityAnimationContainer);\n\n    // Add all animation items to the animation container\n    activityAnimationContainer = text.animated.reduce((el, string) => {\n      let activityText = document.createElement('span');\n\n      // Add text items\n      activityText.setAttribute('class', elClasses.activityAnimationItem);\n      activityText.innerHTML = string;\n      el.appendChild(activityText);\n      return el;\n    }, activityAnimationContainer);\n\n    // Create static text element\n    let staticText = document.createElement('div');\n    staticText.setAttribute('class', elClasses.activityStaticText);\n    staticText.innerText = text.static;\n\n    // Create activity container and append children\n    activityContainer = document.createElement('div');\n    activityContainer.setAttribute('class', elClasses.activityContainer);\n    activityContainer.appendChild(staticText);\n    activityContainer.appendChild(activityAnimationContainer);\n    return activityContainer;\n  };\n\n  /**\n   * Builds the element that will hold messages in the overlay\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildMessageEl = () => {\n    messageContainer = document.createElement('div');\n    messageContainer.setAttribute('class', elClasses.messageContainer);\n    return messageContainer;\n  };\n  (() => {\n    const targetContainerContainer = targetContainer.getSelf();\n    activityOverlay = this.create();\n    targetContainerContainer.classList.add(elClasses.parent);\n    targetContainerContainer.appendChild(activityOverlay);\n  })();\n};\nvar _default = FtActivityOverlay;\nexports.default = _default;\n\n},{\"../global/FtConfig\":4}]},{},[2]);\n"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","default","_Fluency","_interopRequireDefault","_FtConfig","_FtActivityOverlay","obj","__esModule","FtStandaloneTranslatorFieldset","initializedAttr","init","document","querySelectorAll","forEach","usageTableEl","initializeStandaloneTranslatorFieldset","fieldset","let","activityOverlay","sourceContentController","translatedContentController","sourceLanguageSelectController","targetLanguageSelectController","uiText","getUiTextFor","translatorEls","sourceLanguageSelect","targetLanguageSelect","sourceContentInputfield","translatedContentInputfield","translateButton","copyButton","this","cacheInputs","querySelector","closest","getSelf","bindTranslateButton","addEventListener","preventDefault","sourceLanguage","getValue","targetLanguage","sourceContent","getContent","indicateError","showActivity","getTranslation","then","result","error","showError","message","setContent","translations","hide","addCopyContentButton","copyButtonClass","copyIcon","createElement","setAttribute","innerText","clickToCopy","inputfieldHeader","appendChild","classList","add","bindCopyContentButton","content","navigator","clipboard","writeText","indicateSuccess","copied","toggleCopyContentButton","contentPresent","remove","createInputControllers","languageSelectController","translationContentController","inputfield","selectEl","flashError","contentPresenceChangeCallback","arguments","undefined","inputfieldContent","get","set","flashSuccess","textareaInputfieldContent","stateChangeCallback","textarea","hasContent","dispatchEvent","Event","bindContentChangeListener","currentContent","target","../global/Fluency","../global/FtConfig","../ui/FtActivityOverlay","2","_FtStandaloneTranslatorFieldset","window","moduleShouldInitialize","./components/FtStandaloneTranslatorFieldset","./global/FtConfig","3","Fluency","errors","requestHeaders","requestType","X-Requested-With","getRequest","endpoint","responseHandler","fetch","method","cache","headers","parseResponse","catch","handleFetchError","deleteRequest","response","status","ok","json","console","returnObject","split","deleteTranslatableLanguagesCache","getApiEndpointFor","deleteTranslationCache","getAvailableLanguages","options","caching","data","body","JSON","stringify","getUsage","./FtConfig","4","FtConfig","config","ProcessWire","fluency","localizedStrings","localization","strings","languageSelect","inputfieldTranslateButtons","standaloneTranslator","usage","endpoints","languages","apiEndpoints","translatableLanguagesCache","test","translation","translationCache","configuredLanguages","unconfiguredLanguages","getConfiguredLanguages","getUnconfiguredLanguages","getEngineInfo","engine","fieldInitializedAttr","key","getDefaultLanguage","reduce","defaultLang","lang","getEngineProvidesUsageData","providesUsageData","getLanguageCount","getLanguageForId","pwLanguageId","parseInt","match","language","id","languageIsTranslatable","languageId","includes","5","targetContainer","_this","activityType","elClasses","parent","overlay","flash","success","activity","visible","activityContainer","activityStaticText","activityAnimationContainer","activityAnimationItem","messageContainer","setActivityActive","setOverlayVisible","showMessage","displayTime","setMessageContent","setActivityInactive","setMessageActive","setSuccessActive","setFlashActive","setErrorActive","delay","setTimeout","setOverlayInvisible","setMessageInactive","setErrorInactive","setFlashInactive","setSuccessInactive","create","buildOverlayEl","buildActivityEl","buildMessageEl","text","animated","el","string","activityText","innerHTML","staticText","static","targetContainerContainer"],"mappings":"AAAA,CAAY,SAASA,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEC,GAAG,GAAG,CAACJ,EAAEG,GAAG,CAAC,GAAG,CAACJ,EAAEI,GAAG,CAAC,IAAIE,EAAE,YAAY,OAAOC,SAASA,QAAQ,GAAG,CAACF,GAAGC,EAAE,OAAOA,EAAEF,EAAE,CAAA,CAAE,EAAE,GAAGI,EAAE,OAAOA,EAAEJ,EAAE,CAAA,CAAE,EAAgD,MAA1CK,EAAE,IAAIC,MAAM,uBAAuBN,EAAE,GAAG,GAAUO,KAAK,mBAAmBF,CAAC,CAAKG,EAAEX,EAAEG,GAAG,CAACS,QAAQ,EAAE,EAAEb,EAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAoB,OAAOI,EAAlBH,EAAEI,GAAG,GAAGL,IAAeA,CAAC,CAAC,EAAEa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,CAAC,CAAC,CAAC,OAAOD,EAAEG,GAAGS,OAAO,CAAC,IAAI,IAAIL,EAAE,YAAY,OAAOD,SAASA,QAAQH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,CAAC,GAAGD,EAAED,EAAEE,EAAE,EAAE,OAAOD,CAAC,EAAc,CAACa,EAAE,CAAC,SAAST,EAAQU,EAAOJ,GACxe,aAEAK,OAAOC,eAAeN,EAAS,aAAc,CAC3CO,MAAO,CAAA,CACT,CAAC,EACDP,EAAQQ,QAAU,KAAA,EAClB,IAAIC,EAAWC,EAAuBhB,EAAQ,mBAAmB,CAAC,EAC9DiB,EAAYD,EAAuBhB,EAAQ,oBAAoB,CAAC,EAChEkB,EAAqBF,EAAuBhB,EAAQ,yBAAyB,CAAC,EAClF,SAASgB,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEL,QAASK,CAAI,CAAG,CACxFE,EAAiC,WAKrC,MAAMC,EAAkB,sBAYxB,MAAO,CACLA,gBAAAA,EACAC,KARW,KAEX,CAAC,GADiCC,SAASC,mDAAmDH,KAAmB,GAClFI,QAAQC,IACrC,IAAIC,EAAuCD,CAAY,CACzD,CAAC,CACH,CAIA,CACF,EAAE,EAOF,MAAMC,EAAyC,SAAUC,GAKvDC,IAAIC,EAKAC,EACAC,EAKAC,EACAC,EAOAC,EAASnB,EAAUH,QAAQuB,aAAa,sBAAsB,EAOlE,MAAMC,EAAgB,CACpBC,qBAAsB,qBACtBC,qBAAsB,qBACtBC,wBAAyB,oBACzBC,4BAA6B,wBAC7BC,gBAAiB,kBACjBC,WAAY,kBACd,EAOAC,KAAKC,YAAc,KACjBR,EAAcK,gBAAkBd,EAASkB,cAAc,IAAIT,EAAcK,eAAiB,EAC1FL,EAAcC,qBAAuBV,EAASkB,cAAc,IAAIT,EAAcC,oBAAsB,EAAES,QAAQ,eAAe,EAC7HV,EAAcE,qBAAuBX,EAASkB,cAAc,IAAIT,EAAcE,oBAAsB,EAAEQ,QAAQ,eAAe,EAC7HV,EAAcG,wBAA0BZ,EAASkB,cAAc,IAAIT,EAAcG,uBAAyB,EAAEO,QAAQ,eAAe,EACnIV,EAAcI,4BAA8Bb,EAASkB,cAAc,IAAIT,EAAcI,2BAA6B,EAAEM,QAAQ,eAAe,CAC7I,EAMAH,KAAKI,QAAU,IAAMpB,EAOrBgB,KAAKK,oBAAsB,KACzBZ,EAAcK,gBAAgBQ,iBAAiB,QAAS1D,IACtDA,EAAE2D,eAAe,EACjBtB,IAAIuB,EAAiBnB,EAA+BoB,SAAS,EACzDC,EAAiBpB,EAA+BmB,SAAS,EACzDE,EAAgBxB,EAAwByB,WAAW,EAClDJ,GACHnB,EAA+BwB,cAAc,EAE1CH,GACHpB,EAA+BuB,cAAc,EAE1CF,GACHxB,EAAwB0B,cAAc,EAEnCL,GAAmBE,GAAmBC,IAG3CzB,EAAgB4B,aAAa,EAC7B5C,EAASD,QAAQ8C,eAAeP,EAAgBE,EAAgBC,CAAa,EAAEK,KAAKC,IAC9EA,EAAOC,OACThC,EAAgBiC,UAAUF,EAAOG,OAAO,EAE1ChC,EAA4BiC,WAAWJ,EAAOK,aAAa,EAAE,EAC7DpC,EAAgBqC,KAAK,CACvB,CAAC,EACH,CAAC,CACH,EAMAvB,KAAKwB,qBAAuB,KAC1B,IAAMC,EAAkBhC,EAAcM,WAIhC2B,GAHNjC,EAAcM,WAAapB,SAASgD,cAAc,QAAQ,EAC1DlC,EAAcM,WAAW6B,aAAa,QAASH,CAAe,EAC9DhC,EAAcM,WAAW8B,UAAYtC,EAAOuC,YAC3BnD,SAASgD,cAAc,GAAG,GAGrCI,GAFNL,EAASE,aAAa,QAAS,gCAAgC,EAC/DnC,EAAcM,WAAWiC,YAAYN,CAAQ,EACpBjC,EAAcI,4BAA4BK,cAAc,mBAAmB,GACpG6B,EAAiBE,UAAUC,IAAOT,EAAH,YAA8B,EAC7DM,EAAiBC,YAAYvC,EAAcM,UAAU,EACrDC,KAAKmC,sBAAsB,CAC7B,EAOAnC,KAAKmC,sBAAwB,KAC3B1C,EAAcM,WAAWO,iBAAiB,QAAS1D,IACjDA,EAAE2D,eAAe,EACX6B,EAAUhD,EAA4BwB,WAAW,EACnDwB,GACFC,UAAUC,UAAUC,UAAUH,CAAO,EAAEpB,KAAK,KAC1C5B,EAA4BoD,gBAAgBjD,EAAOkD,MAAM,CAC3D,CAAC,CAEL,CAAC,CACH,EAOAzC,KAAK0C,wBAA0BC,IACzBA,EACFlD,EAAcM,WAAWkC,UAAUC,IAAI,SAAS,EAGlDzC,EAAcM,WAAWkC,UAAUW,OAAO,SAAS,CACrD,EACA5C,KAAK6C,uBAAyB,KAC5BxD,EAAiC,IAAIyD,EAAyBrD,EAAcC,oBAAoB,EAChGJ,EAAiC,IAAIwD,EAAyBrD,EAAcE,oBAAoB,EAChGR,EAA0B,IAAI4D,EAA6BtD,EAAcG,uBAAuB,EAChGR,EAA8B,IAAI2D,EAA6BtD,EAAcI,4BAA6BG,KAAK0C,uBAAuB,CACxI,EAME1C,KAAKC,YAAY,EACjBD,KAAK6C,uBAAuB,EAC5B3D,EAAkB,IAAIb,EAAmBJ,QAAQ+B,IAAI,EACrDA,KAAKwB,qBAAqB,EAC1BxB,KAAKK,oBAAoB,CAE7B,EAKMyC,EAA2B,SAAUE,GACzC/D,IAAIC,EACA+D,EACJjD,KAAKI,QAAU,IAAM4C,EACrBhD,KAAKS,SAAW,IAAMwC,EAASjF,MAC/BgC,KAAKa,cAAgB,IAAM3B,EAAgBgE,WAAW,GAAI,GAAG,EAE3DD,EAAWD,EAAW9C,cAAc,QAAQ,EAC5ChB,EAAkB,IAAIb,EAAmBJ,QAAQ+B,IAAI,CAEzD,EAKM+C,EAA+B,SAAUC,GAC7C/D,IAAIkE,EAAmD,EAAnBC,UAAUzF,QAA+B0F,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,KAM3FhF,EAAUH,QAAQuB,aAAa,sBAAsB,EAKlEP,IAAIqE,EAUJrE,IAAIC,EACJc,KAAKI,QAAU,IAAM4C,EAMrBhD,KAAKY,WAAa,IAAM0C,EAAkBC,IAAI,EAO9CvD,KAAKqB,WAAae,IAChBkB,EAAkBE,IAAIpB,CAAO,CAC/B,EAOApC,KAAKa,cAAgB,IAAM3B,EAAgBgE,WAAW,GAAI,GAAG,EAO7DlD,KAAKwC,gBAAkBpB,GAAWlC,EAAgBuE,aAAarC,CAAO,EAMpEkC,EAAoB,IAAII,EAA0BV,EAAYG,CAA6B,EAC3FjE,EAAkB,IAAIb,EAAmBJ,QAAQ+B,IAAI,CAEzD,EAKM0D,EAA4B,SAAUV,GAC1C/D,IAAI0E,EAAyC,EAAnBP,UAAUzF,QAA+B0F,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,KAC1FQ,EACAC,EAAa,CAAA,EACjB7D,KAAKwD,IAAMpB,IACTwB,EAAS5F,MAAQoE,EACjBwB,EAASE,cAAc,IAAIC,MAAM,OAAO,CAAC,CAC3C,EACA/D,KAAKuD,IAAM,IAAMK,EAAS5F,MAC1BgC,KAAKgE,0BAA4B,KAC/BJ,EAAStD,iBAAiB,QAAS1D,IAC3BqH,EAAiBrH,EAAEsH,OAAOlG,MAC5BiG,GAAkB,CAACJ,IACrBA,EAAa,CAAA,EACbF,EAAoB,CAAA,CAAI,GAEtB,CAACM,GAAkBJ,IACrBA,EAAa,CAAA,EACbF,EAAoB,CAAA,CAAK,EAE7B,CAAC,CACH,EAEEC,EAAWZ,EAAW9C,cAAc,UAAU,EAC1CyD,GACF3D,KAAKgE,0BAA0B,CAGrC,EAEAvG,EAAQQ,QADOO,CAGf,EAAE,CAAC2F,oBAAoB,EAAEC,qBAAqB,EAAEC,0BAA0B,CAAC,GAAGC,EAAE,CAAC,SAASnH,EAAQU,EAAOJ,GACzG,aAEA,IAAI8G,EAAkCpG,EAAuBhB,EAAQ,6CAA6C,CAAC,EAC/GiB,EAAYD,EAAuBhB,EAAQ,mBAAmB,CAAC,EACnE,SAASgB,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEL,QAASK,CAAI,CAAG,CAC9FkG,OAAOlE,iBAAiB,OAAQ1D,IAC1BwB,EAAUH,QAAQwG,uBAAuB,GAC3CF,EAAgCtG,QAAQS,KAAK,CAEjD,CAAC,CAED,EAAE,CAACgG,8CAA8C,EAAEC,oBAAoB,CAAC,GAAGC,EAAE,CAAC,SAASzH,EAAQU,EAAOJ,GACtG,aAEAK,OAAOC,eAAeN,EAAS,aAAc,CAC3CO,MAAO,CAAA,CACT,CAAC,EACDP,EAAQQ,QAAU,KAAA,EAClB,IAAIG,GAC4BE,EADOnB,EAAQ,YAAY,IACNmB,EAAIC,WAAaD,EAAM,CAAEL,QAASK,CAAI,EAOrFuG,EAAU,WAKd,MAAMC,EAAS1G,EAAUH,QAAQuB,aAAa,QAAQ,EA8EtD,MAAMuF,EAAiBC,IACrB,IAAMD,EAAiB,CACrBE,mBAAoB,gBACtB,EAOA,MANoB,QAAhBD,IACFD,EAAuB,OAAI,oBAET,SAAhBC,IACFD,EAAe,gBAAkB,oBAE5BA,CACT,EAwBMG,EAAa,CAACC,EAAUC,IACrBC,MAAMF,EAAU,CACrBG,OAAQ,MACRC,MAAO,WACPC,QAAST,EAAe,KAAK,CAC/B,CAAC,EAAE/D,KAAKyE,CAAa,EAAEzE,KAAKoE,CAAe,EAAEM,MAAMC,CAAgB,EAS/DC,EAAgB,CAACT,EAAUC,IACxBC,MAAMF,EAAU,CACrBG,OAAQ,SACRE,QAAST,EAAe,KAAK,CAC/B,CAAC,EAAE/D,KAAKyE,CAAa,EAAEzE,KAAKoE,CAAe,EAAEM,MAAMC,CAAgB,EAS/DF,EAAgBI,IACpB,GAAwB,MAApBA,EAASC,OACX,OAAOD,EAET,GAAIA,EAASE,GACX,OAAOF,EAASG,KAAK,EAEvB,MAAM,IAAI1I,KACZ,EASMqI,EAAmBzE,IACvB+E,QAAQ/E,MAAM,+BAAgCA,EAAME,OAAO,EAC3D,IAAM8E,EAAe,CACnBhF,MAAO,KACPE,QAAS,IACX,EAWA,MATO,iBADCF,EAAME,QAAQ+E,MAAM,GAAG,EAAE,IAE7BD,EAAahF,MAAQ,8BACrBgF,EAAa9E,QAAU0D,EAAoC,8BAG3DoB,EAAahF,MAAQ,gBACrBgF,EAAa9E,QAAU0D,EAAsB,eAG1CoB,CACT,EACA,MAAO,CACLE,iCAhHuC,IAChCR,EAAcxH,EAAUH,QAAQoI,kBAAkB,4BAA4B,EAAGR,GAC/EA,CACR,EA8GDS,uBA3H6B,IACtBV,EAAcxH,EAAUH,QAAQoI,kBAAkB,kBAAkB,EAAGR,GACrEA,CACR,EAyHDU,sBAtI4B,IACrBrB,EAAW9G,EAAUH,QAAQoI,kBAAkB,WAAW,EAAGR,GAC3DA,CACR,EAoID9E,eApKqB,SAAUP,EAAgBE,EAAgB0B,GAC/DnD,IAkFmBkG,EAlFfqB,EAA6B,EAAnBpD,UAAUzF,QAA+B0F,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,GAC9EqD,EAA6B,EAAnBrD,UAAUzF,QAA+B0F,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,KAClF,OAgFmB+B,EAhFA/G,EAAUH,QAAQoI,kBAAkB,aAAa,EAgFvCK,EAhF0C,CACrElG,eAAgBA,EAChBE,eAAgBA,EAChB0B,QAASA,EACToE,QAASA,EACTC,QAASA,CACX,EA0EmCrB,EA1EhCS,GACMA,EA0EFR,MAAMF,EAAU,CACrBG,OAAQ,OACRC,MAAO,WACPC,QAAST,EACT4B,KAAMC,KAAKC,UAAUH,CAAI,CAC3B,CAAC,EAAE1F,KAAKyE,CAAa,EAAEzE,KAAKoE,CAAe,EAAEM,MAAMC,CAAgB,CA7ErE,EAyJEmB,SAnJe,IACR5B,EAAW9G,EAAUH,QAAQoI,kBAAkB,OAAO,EAAGR,GACvDA,CACR,CAiJH,CACF,EAAE,EAEFpI,EAAQQ,QADO4G,CAGf,EAAE,CAACkC,aAAa,CAAC,GAAGC,EAAE,CAAC,SAAS7J,EAAQU,EAAOJ,GAC/C,aAEAK,OAAOC,eAAeN,EAAS,aAAc,CAC3CO,MAAO,CAAA,CACT,CAAC,EACDP,EAAQQ,QAAU,KAAA,EAKlB,IAAMgJ,EAAW,WAYf,MAAMC,EAASC,YAAYD,OAAOE,QAMlC,IAAMC,EAAmBH,EAAOI,aAYhC,MAAMC,EAAU,CACdrI,gBAAiBmI,EAAiBnI,gBAClCsI,eAAgBH,EAAiBG,eACjCC,2BAA4BJ,EAAiBI,2BAC7CC,qBAAsBL,EAAiBK,qBACvCC,MAAON,EAAiBM,MACxB7C,OAAQuC,EAAiBvC,MAC3B,EAMM8C,EAAY,CAChBC,UAAWX,EAAOY,aAAaD,UAC/BE,2BAA4Bb,EAAOY,aAAaC,2BAChDC,KAAMd,EAAOY,aAAaE,KAC1BC,YAAaf,EAAOY,aAAaG,YACjCC,iBAAkBhB,EAAOY,aAAaI,iBACtCP,MAAOT,EAAOY,aAAaH,KAC7B,EAMMQ,EAAsBjB,EAAOiB,oBAM7BC,EAAwBlB,EAAOkB,sBAarC,MAAMC,EAAyB,IAAMF,EAGrC,MAAMG,EAA2B,IAAMF,EAkBvC,MAAMG,EAAgB,IAAMrB,EAAOsB,OAEnC,MAAO,CACLC,qBAhG2B,sBAiG3BpC,kBA/BwBqC,GAAOd,EAAUc,GAgCzCL,uBAAAA,EACAM,mBA1ByB,IADUR,EACqBS,OAAO,CAACC,EAAaC,IAASA,EAAK7K,QAAU6K,EAAOD,EAAa,IAAI,EA2B7HN,cAAAA,EACAQ,2BAPiC,IAAMR,EAAc,EAAES,kBAQvDC,iBA1BuB,IAJYd,EAImBxK,OADjByK,EACqDzK,OA2B1FuL,iBA1BuBC,IACvBA,EAAeC,SAASD,EAAc,EAAE,EANLhB,EAOHS,OAAO,CAACS,EAAOC,IAAaA,EAASC,KAAOJ,EAAeG,EAAWD,EAAO,IAAI,GAyBjH7J,aAlBmBkJ,GAAOnB,EAAQmB,GAmBlCJ,yBAAAA,EACAkB,uBAhC6BC,GAAc,CACNrB,EADkCsB,SAASN,SAASK,EAAY,EAAE,CAAC,EAiCxGhF,uBAf6B,IAAwC,EApBlC0D,EAoByBxK,MAgB9D,CACF,EAAE,EAEFF,EAAQQ,QADOgJ,CAGf,EAAE,IAAI0C,EAAE,CAAC,SAASxM,EAAQU,EAAOJ,GACjC,aAEAK,OAAOC,eAAeN,EAAS,aAAc,CAC3CO,MAAO,CAAA,CACT,CAAC,EACDP,EAAQQ,QAAU,KAAA,EAClB,IAAIG,GAC4BE,EADOnB,EAAQ,oBAAoB,IACdmB,EAAIC,WAAaD,EAAM,CAAEL,QAASK,CAAI,EA6U3Fb,EAAQQ,QAtUkB,SAAU2L,GAClC,IAAIC,EAAQ7J,KACZf,IAAI6K,EAAkC,EAAnB1G,UAAUzF,QAA+B0F,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,cACvF,MAAM2G,EAAY,CAChBC,OAAQ,gCACRC,QAAS,sBACT/I,MAAO,QACPE,QAAS,UACT8I,MAAO,QACPC,QAAS,UACTC,SAAU,WACVC,QAAS,UACTC,kBAAmB,cACnBC,mBAAoB,mBACpBC,2BAA4B,kCAC5BC,sBAAuB,6BACvBC,iBAAkB,qBACpB,EAMAzL,IAAIC,EAMAwL,EAMAJ,EAYJtK,KAAKc,aAAe,KAClBd,KAAK2K,kBAAkB,EACvB3K,KAAK4K,kBAAkB,CACzB,EAQA5K,KAAK6K,YAAc,SAAUzJ,GAC3BnC,IAAI6L,EAAiC,EAAnB1H,UAAUzF,QAA+B0F,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,IACtFyG,EAAMkB,kBAAkB3J,CAAO,EAC/ByI,EAAMmB,oBAAoB,EAC1BnB,EAAMoB,iBAAiB,EACvBpB,EAAMe,kBAAkB,EACxBf,EAAMtI,KAAKuJ,CAAW,CACxB,EASA9K,KAAKyD,aAAe,SAAUrC,GAC5BnC,IAAI6L,EAAiC,EAAnB1H,UAAUzF,QAA+B0F,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,IACtFyG,EAAMqB,iBAAiB,EACvBrB,EAAMsB,eAAe,EACrBtB,EAAMgB,YAAYzJ,EAAS0J,CAAW,CACxC,EASA9K,KAAKkD,WAAa,SAAU9B,GAC1BnC,IAAI6L,EAAiC,EAAnB1H,UAAUzF,QAA+B0F,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,IACtFyG,EAAMsB,eAAe,EACrBtB,EAAMuB,eAAe,EACrBvB,EAAMgB,YAAYzJ,EAAS0J,CAAW,CACxC,EASA9K,KAAKmB,UAAY,SAAUC,GACzBnC,IAAI6L,EAAiC,EAAnB1H,UAAUzF,QAA+B0F,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,IACtFyG,EAAMuB,eAAe,EACrBvB,EAAMgB,YAAYzJ,EAAS0J,CAAW,CACxC,EAOA9K,KAAKuB,KAAO,WACVtC,IAAIoM,EAA2B,EAAnBjI,UAAUzF,QAA+B0F,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,EAChFkI,WAAW,KACTzB,EAAM0B,oBAAoB,CAC5B,EAAGF,CAAK,EAGRC,WAAW,KACTzB,EAAMmB,oBAAoB,EAC1BnB,EAAM2B,mBAAmB,EACzB3B,EAAM4B,iBAAiB,EACvB5B,EAAM6B,iBAAiB,EACvB7B,EAAMkB,kBAAkB,EAAE,CAC5B,EAAGM,EAAQ,GAAG,CAChB,EAWArL,KAAK2K,kBAAoB,KACvBzL,EAAgB+C,UAAUC,IAAI6H,EAAUK,QAAQ,CAClD,EAOApK,KAAKgL,oBAAsB,KACzB9L,EAAgB+C,UAAUW,OAAOmH,EAAUK,QAAQ,CACrD,EAOApK,KAAKiL,iBAAmB,KACtB/L,EAAgB+C,UAAUC,IAAI6H,EAAU3I,OAAO,CACjD,EAOApB,KAAKwL,mBAAqB,KACxBtM,EAAgB+C,UAAUW,OAAOmH,EAAU3I,OAAO,CACpD,EAOApB,KAAK+K,kBAAoB3I,IACvBsI,EAAiB7I,UAAYO,CAC/B,EAOApC,KAAKmL,eAAiB/I,IACpBlD,EAAgB+C,UAAUC,IAAI6H,EAAUG,KAAK,CAC/C,EAOAlK,KAAK0L,iBAAmBtJ,IACtBlD,EAAgB+C,UAAUW,OAAOmH,EAAUG,KAAK,CAClD,EAOAlK,KAAKkL,iBAAmB,KACtBhM,EAAgB+C,UAAUC,IAAI6H,EAAUI,OAAO,CACjD,EAOAnK,KAAK2L,mBAAqB,KACxBzM,EAAgB+C,UAAUW,OAAOmH,EAAUI,OAAO,CACpD,EAOAnK,KAAKoL,eAAiB,KACpBlM,EAAgB+C,UAAUC,IAAI6H,EAAU7I,KAAK,CAC/C,EAOAlB,KAAKyL,iBAAmB,KACtBvM,EAAgB+C,UAAUW,OAAOmH,EAAU7I,KAAK,CAClD,EAOAlB,KAAK4K,kBAAoB,KACvB1L,EAAgB+C,UAAUC,IAAI6H,EAAUM,OAAO,CACjD,EACArK,KAAKuL,oBAAsB,KACzBrM,EAAgB+C,UAAUW,OAAOmH,EAAUM,OAAO,CACpD,EAOArK,KAAK4L,OAAS,KACZ1M,EAAkBc,KAAK6L,eAAe,EACtCvB,EAAoBtK,KAAK8L,gBAAgB,EACzCpB,EAAmB1K,KAAK+L,eAAe,EACvC7M,EAAgB8C,YAAYsI,CAAiB,EAC7CpL,EAAgB8C,YAAY0I,CAAgB,EACrCxL,GASTc,KAAK6L,eAAiB,KACpB,IAAM5B,EAAUtL,SAASgD,cAAc,KAAK,EAI5C,OADAsI,EAAQrI,aAAa,QAASmI,EAAUE,OAAO,EACxCA,CACT,EAQAjK,KAAK8L,gBAAkB,KACrB7M,IAAI+M,EAAO5N,EAAUH,QAAQuB,aAAa,iBAAiB,EAAEsK,GAC7D7K,IAAIuL,EAA6B7L,SAASgD,cAAc,KAAK,EAC7D6I,EAA2B5I,aAAa,QAASmI,EAAUS,0BAA0B,EAGrFA,EAA6BwB,EAAKC,SAASrD,OAAO,CAACsD,EAAIC,KACrDlN,IAAImN,EAAezN,SAASgD,cAAc,MAAM,EAMhD,OAHAyK,EAAaxK,aAAa,QAASmI,EAAUU,qBAAqB,EAClE2B,EAAaC,UAAYF,EACzBD,EAAGlK,YAAYoK,CAAY,EACpBF,CACT,EAAG1B,CAA0B,EAG7BvL,IAAIqN,EAAa3N,SAASgD,cAAc,KAAK,EAS7C,OARA2K,EAAW1K,aAAa,QAASmI,EAAUQ,kBAAkB,EAC7D+B,EAAWzK,UAAYmK,EAAKO,QAG5BjC,EAAoB3L,SAASgD,cAAc,KAAK,GAC9BC,aAAa,QAASmI,EAAUO,iBAAiB,EACnEA,EAAkBtI,YAAYsK,CAAU,EACxChC,EAAkBtI,YAAYwI,CAA0B,EACjDF,CACT,EAQAtK,KAAK+L,eAAiB,MACpBrB,EAAmB/L,SAASgD,cAAc,KAAK,GAC9BC,aAAa,QAASmI,EAAUW,gBAAgB,EAC1DA,GAGD8B,EAA2B5C,EAAgBxJ,QAAQ,EACzDlB,EAAkBc,KAAK4L,OAAO,EAC9BY,EAAyBvK,UAAUC,IAAI6H,EAAUC,MAAM,EACvDwC,EAAyBxK,YAAY9C,CAAe,CAExD,CAIA,EAAE,CAACkF,qBAAqB,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE"}