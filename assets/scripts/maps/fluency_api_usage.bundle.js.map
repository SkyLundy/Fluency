{"version":3,"file":"../fluency_api_usage.bundle.js","sources":["fluency_api_usage.bundle.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _Fluency = _interopRequireDefault(require(\"../global/Fluency\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Primary initialization object\n * This initializes all tables available in markup in the event there are multiple but some not\n * visible\n *\n * @return {Object} Public methods\n */\nconst FtApiUsageTableFieldset = function () {\n  /**\n   * Attribute present on initialized instances\n   * @type {String}\n   */\n  const initializedAttr = 'data-ft-initialized';\n\n  /**\n   * Initialize all API usage tables on page\n   *\n   * @return {void}\n   */\n  const init = () => {\n    if (!_FtConfig.default.getEngineProvidesUsageData()) {\n      return;\n    }\n    const translationApiUsageTables = document.querySelectorAll(`.ft-api-usage-table-fieldset:not([${initializedAttr}])`);\n    [...translationApiUsageTables].forEach(el => {\n      new initializeApiUsageTableFieldset(el);\n    });\n  };\n  return {\n    init,\n    initializedAttr\n  };\n}();\n\n/**\n * Creates a bound object for an API Usage Table\n * @param  {Element} fieldset Fieldset that contains all of the API Usage Table Element\n * @return {void}\n */\nconst initializeApiUsageTableFieldset = function (fieldset) {\n  /**\n   * Contains the activityOverlay\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /**\n   * Values are classes that will be replaced with their associated HTML element on initialization\n   * @type {Object}\n   */\n  const usageTableElements = {\n    unit: 'ft-usage-unit',\n    limit: 'ft-usage-limit',\n    used: 'ft-usage-used',\n    remaining: 'ft-usage-remaining',\n    total: 'ft-usage-total',\n    refreshButton: 'js-ft-refresh-usage'\n  };\n  this.getSelf = () => fieldset;\n\n  /**\n   * Updates translation API usage table with data from API\n   * @return {Void}\n   */\n  this.updateView = () => {\n    activityOverlay.showActivity();\n    _Fluency.default.getUsage().then(result => {\n      if (result.error) {\n        activityOverlay.showError(result.message);\n        return;\n      }\n      usageTableElements.unit.innerText = result.unit;\n      usageTableElements.limit.innerText = result.limit;\n      usageTableElements.remaining.innerText = result.remaining;\n      usageTableElements.used.innerText = result.used;\n      usageTableElements.total.innerText = result.percentUsed;\n      activityOverlay.hide();\n    });\n  };\n\n  /**\n   * Binds behavior to refresh button\n   * @return {void}\n   */\n  this.bindRefreshButton = () => {\n    usageTableElements.refreshButton.addEventListener('click', e => {\n      e.preventDefault();\n      this.updateView();\n    });\n  };\n  (() => {\n    for (let [elType, className] of Object.entries(usageTableElements)) {\n      usageTableElements[elType] = fieldset.querySelector(`.${className}`);\n    }\n    activityOverlay = new _FtActivityOverlay.default(this, 'refreshing');\n    this.bindRefreshButton();\n    fieldset.setAttribute(FtApiUsageTableFieldset.initializedAttr, true);\n  })();\n};\nvar _default = FtApiUsageTableFieldset;\nexports.default = _default;\n\n},{\"../global/Fluency\":3,\"../global/FtConfig\":4,\"../ui/FtActivityOverlay\":5}],2:[function(require,module,exports){\n\"use strict\";\n\nvar _FtApiUsageTableFieldset = _interopRequireDefault(require(\"./components/FtApiUsageTableFieldset\"));\nvar _FtConfig = _interopRequireDefault(require(\"./global/FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nwindow.addEventListener('load', e => {\n  if (_FtConfig.default.getEngineProvidesUsageData()) {\n    _FtApiUsageTableFieldset.default.init();\n  }\n});\n\n},{\"./components/FtApiUsageTableFieldset\":1,\"./global/FtConfig\":4}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"./FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Core module interface\n * Handles all interaction with the ProcessWire module backend\n * @return {object} Public interfaces\n */\n\nconst Fluency = function () {\n  /**\n   * Localized error strings\n   * @type {Object}\n   */\n  const errors = _FtConfig.default.getUiTextFor('errors');\n\n  /**\n   * Data Request Methods\n   */\n\n  /**\n   * Gets a translation from the Fluency module\n   * @param  {String}       sourceLanguage ISO language code\n   * @param  {String}       targetLanguage ISO langauge code\n   * @param  {String|Array} content        Content to translate\n   * @param  {Array}        options        Additional options\n   * @param  {Bool|null}         caching        Enable/disable caching\n   * @return {Promise}\n   */\n  const getTranslation = (sourceLanguage, targetLanguage, content, options = [], caching = null) => {\n    return postRequest(_FtConfig.default.getApiEndpointFor('translation'), {\n      sourceLanguage: sourceLanguage,\n      targetLanguage: targetLanguage,\n      content: content,\n      options: options,\n      caching: caching\n    }, response => {\n      return response;\n    });\n  };\n\n  /**\n   * Gets the current translation service API usage\n   * @return {Promise}\n   */\n  const getUsage = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('usage'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Get all language available for translation. Provides source/target lists from the translation\n   * service API\n   * @return {Promise}\n   */\n  const getAvailableLanguages = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('languages'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear all cached translations\n   * @return {Promise}\n   */\n  const deleteTranslationCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translationCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear cached list of translatable languages\n   * @return {Promise}\n   */\n  const deleteTranslatableLanguagesCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translatableLanguagesCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * HTTP Requests\n   */\n\n  /**\n   * Create headers for AJAX requests\n   * @return {Object}\n   */\n  const requestHeaders = requestType => {\n    const requestHeaders = {\n      'X-Requested-With': 'XMLHttpRequest'\n    };\n    if (requestType === 'GET') {\n      requestHeaders['Accept'] = 'application/json';\n    }\n    if (requestType === 'POST') {\n      requestHeaders['Content-Type'] = 'application/json';\n    }\n    return requestHeaders;\n  };\n\n  /**\n   * Executes a POST request to a given endpoint\n   * @param  {String}    endpoint URL for AJAX request\n   * @param  {Object}    data     Data for request\n   * @param  {Callable}  data     Function to handle response body\n   * @return {Promise}\n   */\n  const postRequest = (endpoint, data, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'POST',\n      cache: 'no-store',\n      headers: requestHeaders,\n      body: JSON.stringify(data)\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a GET request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const getRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'GET',\n      cache: 'no-store',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a DELETE request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const deleteRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'DELETE',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Parses response\n   * @param  {Object} response Fluency API response\n   * @return {Object|Void}\n   * @throws Error\n   */\n  const parseResponse = response => {\n    if (response.status === 204) {\n      return response;\n    }\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error();\n  };\n\n  /**\n   * Parses and returns results for a fetch error\n   * These are network level errors that occur between ProcessWire and the hosting server\n   * Any translation or service errors will be located within the response body itself\n   * @param  {Error} error Fetch API error object\n   * @return {Object}\n   */\n  const handleFetchError = error => {\n    console.error('[Fluency module API failure]', error.message);\n    const returnObject = {\n      error: null,\n      message: null\n    };\n    switch (error.message.split(' ')[0]) {\n      case 'NetworkError':\n        returnObject.error = 'FLUENCY_CLIENT_DISCONNECTED';\n        returnObject.message = errors['FLUENCY_CLIENT_DISCONNECTED'];\n        break;\n      default:\n        returnObject.error = 'UNKNOWN_ERROR';\n        returnObject.message = errors['UNKNOWN_ERROR'];\n        break;\n    }\n    return returnObject;\n  };\n  return {\n    deleteTranslatableLanguagesCache,\n    deleteTranslationCache,\n    getAvailableLanguages,\n    getTranslation,\n    getUsage\n  };\n}();\nvar _default = Fluency;\nexports.default = _default;\n\n},{\"./FtConfig\":4}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * This provides access methods to get module configuration values\n * @return {Object}  Public methods\n */\nconst FtConfig = function () {\n  // Public properties\n\n  const fieldInitializedAttr = 'data-ft-initialized';\n  const translationActionTypes = {\n    each: 'translate_each_language',\n    all: 'translate_to_all_languages',\n    both: 'both'\n  };\n\n  // Private properties\n\n  /**\n   * Holds the data passed from the Fluency module\n   * @access Private\n   * @type {Object}\n   */\n  const config = ProcessWire.config.fluency;\n\n  /**\n   * All UI strings\n   * @type {Object}\n   */\n  const localizedStrings = config.localization;\n\n  /**\n   * Classes for elements created in UI\n   * @type {Object}\n   */\n  const elementClasses = {\n    translateButton: {\n      container: 'ft-translate-button-container',\n      button: 'ft-translate-button'\n    },\n    languageTranslator: {\n      container: 'Inputfield InputfieldHeaderHidden',\n      content: 'InputfieldContent ft-language-translator-button-content',\n      translateButton: 'ft-translate-all-button',\n      sourceLanguageSelect: 'uk-select ft-source-language-select',\n      sourceLanguageSelectLabel: 'ft-source-language-select-label'\n    },\n    statusPlaceholder: {\n      container: 'ft-translation-status-container',\n      label: 'ft-translation-status'\n    },\n    icon: 'ft-icon'\n  };\n\n  /**\n   * Objects interface with the Fluency config object so that changes to the object\n   * structure from the back end do not break the UI. Use the public methods below\n   * to access ProcessWire.config.fluency properties and data\n   */\n\n  /**\n   * Localized strings keyed sets\n   * @type {Object}\n   */\n  const strings = {\n    activityOverlay: localizedStrings.activityOverlay,\n    languageSelect: localizedStrings.languageSelect,\n    inputfieldTranslateButtons: localizedStrings.inputfieldTranslateButtons,\n    standaloneTranslator: localizedStrings.standaloneTranslator,\n    usage: localizedStrings.usage,\n    errors: localizedStrings.errors,\n    languageTranslator: localizedStrings.languageTranslator\n  };\n\n  /**\n   * Fluency API keyed URLs\n   * @type {Object}\n   */\n  const endpoints = {\n    languages: config.apiEndpoints.languages,\n    translatableLanguagesCache: config.apiEndpoints.translatableLanguagesCache,\n    test: config.apiEndpoints.test,\n    translation: config.apiEndpoints.translation,\n    translationCache: config.apiEndpoints.translationCache,\n    usage: config.apiEndpoints.usage\n  };\n\n  /**\n   * Contains all of the Fluency configured langauges from the module\n   * @type {Array}\n   */\n  const configuredLanguages = config.configuredLanguages;\n\n  /**\n   * Contains an array of ProcessWire language IDs not configured in Fluency\n   * @type {Array}\n   */\n  const unconfiguredLanguages = config.unconfiguredLanguages;\n\n  // Public methods\n\n  /**\n   * Fluency REST API\n   */\n  const getApiEndpointFor = key => endpoints[key];\n\n  /**\n   * Languages\n   */\n\n  /**\n   * Get all configured languages\n   * @return {object}\n   */\n  const getConfiguredLanguages = () => configuredLanguages;\n\n  /**\n   * Returns ProcessWire's default language\n   * @return {object}\n   */\n  const getDefaultLanguage = () => getConfiguredLanguages().reduce((defaultLang, lang) => lang.default ? lang : defaultLang, null);\n\n  /**\n   * Determines if the language with a given ProcessWire ID can be translated\n   * @param  {int|string} languageId ProcessWire language ID\n   * @return {bool}\n   */\n  const languageIsTranslatable = languageId => !getUnconfiguredLanguages().includes(parseInt(languageId, 10));\n\n  /**\n   * Get all languages not configured in Fluency\n   * @return {object}\n   */\n  const getUnconfiguredLanguages = () => unconfiguredLanguages;\n\n  /**\n   * Gets total count of configured and unconfigured languages\n   * @return {int}\n   */\n  const getLanguageCount = () => getConfiguredLanguages().length + getUnconfiguredLanguages().length;\n\n  /**\n   * Get a configured language by it's ProcessWire ID\n   * @param  {string|int} pwLanguageId ProcessWire language ID\n   * @return {object}\n   */\n  const getLanguageForId = pwLanguageId => {\n    pwLanguageId = parseInt(pwLanguageId, 10);\n    return getConfiguredLanguages().reduce((match, language) => language.id === pwLanguageId ? language : match, null);\n  };\n\n  /**\n   * Localization\n   */\n\n  /**\n   * Accessor method for localized UI strings\n   * @param  {string} key Object key\n   * @return {string}\n   */\n  const getUiTextFor = key => strings[key];\n\n  /**\n   * Module Configuration/State\n   */\n\n  /**\n   * Determines if Fluency JS should initialize based on whether languages have\n   * been configured\n   * @return {bool}\n   */\n  const moduleShouldInitialize = () => getConfiguredLanguages().length > 1;\n\n  /**\n   * Returns the translation engine config object for the engine configured in Fluency\n   * @return {object|null}\n   */\n  const getEngineInfo = () => config.engine;\n\n  /**\n   * Does this engine provide usage data?\n   * @return {bool}\n   */\n  const getEngineProvidesUsageData = () => getEngineInfo().providesUsageData;\n\n  /**\n   * Gets the type of translation action chosen in the Flunecy module config\n   * @return {string}\n   */\n  const getTranslationAction = () => config.interface.inputfieldTranslationAction;\n\n  /**\n   * The attribute added to individual field elements where translation has been disabled\n   * @return {string}\n   */\n  const getTranslationDisabledFieldAttribute = () => `[${config.interface.translationDisabledFieldAttr}]`;\n\n  /**\n   * Class names added to UI components\n   * @param  {string} element The type of component\n   * @return {string}\n   */\n  const getElementClassesFor = element => elementClasses[element];\n  return {\n    fieldInitializedAttr,\n    getApiEndpointFor,\n    getConfiguredLanguages,\n    getDefaultLanguage,\n    getElementClassesFor,\n    getEngineInfo,\n    getEngineProvidesUsageData,\n    getLanguageCount,\n    getLanguageForId,\n    getTranslationAction,\n    getTranslationDisabledFieldAttribute,\n    getUiTextFor,\n    getUnconfiguredLanguages,\n    languageIsTranslatable,\n    moduleShouldInitialize,\n    translationActionTypes\n  };\n}();\nvar _default = FtConfig;\nexports.default = _default;\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Creates, inserts, and controls the actions the activity overlay for the provided\n * targetContainer\n * @param {object} targetContainer An instantiated object for an inputfield or fieldset\n * @param {string} type       The type of activity for this overlay. 'translate' or 'update'\n */\nconst FtActivityOverlay = function (targetContainer, activityType = 'translating') {\n  const elClasses = {\n    parent: 'ft-activity-overlay-container',\n    overlay: 'ft-activity-overlay',\n    error: 'error',\n    message: 'message',\n    flash: 'flash',\n    success: 'success',\n    activity: 'activity',\n    visible: 'visible',\n    activityContainer: 'ft-activity',\n    activityStaticText: 'ft-activity-text',\n    activityAnimationContainer: 'ft-activity-animation-container',\n    activityAnimationItem: 'ft-activity-animation-item',\n    messageContainer: 'ft-activity-message'\n  };\n\n  /**\n   * Will contain the activityOverlay Element for this targetContainer\n   * @type {Element}\n   */\n  let activityOverlay;\n\n  /**\n   * Will contain the message Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let messageContainer;\n\n  /**\n   * Will contain the animation container Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let activityContainer;\n\n  /**\n   * Control Methods\n   */\n\n  /**\n   * This shows the overlay's activity animation that was created at instantiation\n   * Must be manually hidden with the hide() method\n   *\n   * @return {void}\n   */\n  this.showActivity = () => {\n    this.setActivityActive();\n    this.setOverlayVisible();\n  };\n\n  /**\n   * Shows a message in the overlay (neutral background)\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showMessage = (message, displayTime = 5000) => {\n    this.setMessageContent(message);\n    this.setActivityInactive();\n    this.setMessageActive();\n    this.setOverlayVisible();\n    this.hide(displayTime);\n  };\n\n  /**\n   * Shows a success message (success color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashSuccess = (message, displayTime = 500) => {\n    this.setSuccessActive();\n    this.setFlashActive();\n    this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows a success message (error color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashError = (message, displayTime = 500) => {\n    this.setFlashActive();\n    this.setErrorActive();\n    this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows an error message in a visible overlay (error background)\n   *\n   * @param  {String} message     Message to show in overlay error\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showError = (message, displayTime = 7000) => {\n    this.setErrorActive();\n    this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Hide an overlay immediately or after a preset amount of time\n   *\n   * @param {Number} delay Length of time in ms before hiding overlay\n   */\n  this.hide = (delay = 0) => {\n    setTimeout(() => {\n      this.setOverlayInvisible();\n    }, delay);\n\n    // Ensures the animation is finished before modifying content\n    setTimeout(() => {\n      this.setActivityInactive();\n      this.setMessageInactive();\n      this.setErrorInactive();\n      this.setFlashInactive();\n      this.setMessageContent('');\n    }, delay + 500);\n  };\n\n  /**\n   * Private Methods\n   */\n\n  /**\n   * Shows the activity element\n   *\n   * @access Private\n   */\n  this.setActivityActive = () => {\n    activityOverlay.classList.add(elClasses.activity);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setActivityInactive = () => {\n    activityOverlay.classList.remove(elClasses.activity);\n  };\n\n  /**\n   * Shows the message element\n   *\n   * @access Private\n   */\n  this.setMessageActive = () => {\n    activityOverlay.classList.add(elClasses.message);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setMessageInactive = () => {\n    activityOverlay.classList.remove(elClasses.message);\n  };\n\n  /**\n   * Sets the content of the overlay message\n   *\n   * @access Private\n   */\n  this.setMessageContent = content => {\n    messageContainer.innerText = content;\n  };\n\n  /**\n   * Adds flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashActive = content => {\n    activityOverlay.classList.add(elClasses.flash);\n  };\n\n  /**\n   * removes flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashInactive = content => {\n    activityOverlay.classList.remove(elClasses.flash);\n  };\n\n  /**\n   * Sets message to success\n   *\n   * @access Private\n   */\n  this.setSuccessActive = () => {\n    activityOverlay.classList.add(elClasses.success);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setSuccessInactive = () => {\n    activityOverlay.classList.remove(elClasses.success);\n  };\n\n  /**\n   * Sets message to error\n   *\n   * @access Private\n   */\n  this.setErrorActive = () => {\n    activityOverlay.classList.add(elClasses.error);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setErrorInactive = () => {\n    activityOverlay.classList.remove(elClasses.error);\n  };\n\n  /**\n   * Shows this activity overlay\n   *\n   * @access Private\n   */\n  this.setOverlayVisible = () => {\n    activityOverlay.classList.add(elClasses.visible);\n  };\n  this.setOverlayInvisible = () => {\n    activityOverlay.classList.remove(elClasses.visible);\n  };\n\n  /**\n   * Creates and returns an activity overlay element\n   *\n   * @return {HTMLElement}\n   */\n  this.create = () => {\n    activityOverlay = this.buildOverlayEl();\n    activityContainer = this.buildActivityEl();\n    messageContainer = this.buildMessageEl();\n    activityOverlay.appendChild(activityContainer);\n    activityOverlay.appendChild(messageContainer);\n    return activityOverlay;\n  };\n\n  /**\n   * Creates the parent overlay element\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildOverlayEl = () => {\n    const overlay = document.createElement('div');\n\n    // overlay.setAttribute('data-gradient-1', 'rgba(62, 185, 152, .85)');\n    overlay.setAttribute('class', elClasses.overlay);\n    return overlay;\n  };\n\n  /**\n   * Creates container for animation and contents of animation\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildActivityEl = () => {\n    let text = this.getActivityTexts();\n    let activityAnimationContainer = document.createElement('div');\n    activityAnimationContainer.setAttribute('class', elClasses.activityAnimationContainer);\n\n    // Add all animation items to the animation container\n    activityAnimationContainer = text.animated.reduce((el, string) => {\n      let activityText = document.createElement('span');\n\n      // Add text items\n      activityText.setAttribute('class', elClasses.activityAnimationItem);\n      activityText.innerHTML = string;\n      el.appendChild(activityText);\n      return el;\n    }, activityAnimationContainer);\n\n    // Create static text element\n    let staticText = document.createElement('div');\n    staticText.setAttribute('class', elClasses.activityStaticText);\n    staticText.innerText = text.static;\n\n    // Create activity container and append children\n    activityContainer = document.createElement('div');\n    activityContainer.setAttribute('class', elClasses.activityContainer);\n    activityContainer.appendChild(staticText);\n    activityContainer.appendChild(activityAnimationContainer);\n    return activityContainer;\n  };\n\n  /**\n   * Gets activity overlay texts and shuffles the animated array\n   * No purpose really other than to add some uniqueness to overlay animations and prevent looking\n   * like one language was preferred by me over another.\n   *\n   * Fisher-Yates algorithm, for the curious\n   *\n   * @return {Array} Randomized array of the activity animation texts for this instance\n   * @access Private\n   */\n  this.getActivityTexts = () => {\n    let uiTexts = _FtConfig.default.getUiTextFor('activityOverlay')[activityType];\n    let animationTexts = uiTexts.animated;\n    for (let i = animationTexts.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = animationTexts[i];\n      animationTexts[i] = animationTexts[j];\n      animationTexts[j] = temp;\n    }\n    uiTexts.animated = animationTexts;\n    return uiTexts;\n  };\n\n  /**\n   * Builds the element that will hold messages in the overlay\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildMessageEl = () => {\n    messageContainer = document.createElement('div');\n    messageContainer.setAttribute('class', elClasses.messageContainer);\n    return messageContainer;\n  };\n  (() => {\n    const targetContainerContainer = targetContainer.getSelf();\n    activityOverlay = this.create();\n    targetContainerContainer.classList.add(elClasses.parent);\n    targetContainerContainer.appendChild(activityOverlay);\n  })();\n};\nvar _default = FtActivityOverlay;\nexports.default = _default;\n\n},{\"../global/FtConfig\":4}]},{},[2]);\n"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","default","_Fluency","_interopRequireDefault","_FtConfig","_FtActivityOverlay","obj","__esModule","FtApiUsageTableFieldset","initializedAttr","init","getEngineProvidesUsageData","document","querySelectorAll","forEach","el","initializeApiUsageTableFieldset","fieldset","let","activityOverlay","usageTableElements","unit","limit","used","remaining","total","refreshButton","this","getSelf","updateView","showActivity","getUsage","then","result","error","showError","message","innerText","percentUsed","hide","bindRefreshButton","addEventListener","preventDefault","elType","className","entries","querySelector","setAttribute","_default","../global/Fluency","../global/FtConfig","../ui/FtActivityOverlay","2","_FtApiUsageTableFieldset","window","./components/FtApiUsageTableFieldset","./global/FtConfig","3","Fluency","errors","getUiTextFor","requestHeaders","requestType","X-Requested-With","getRequest","endpoint","responseHandler","fetch","method","cache","headers","parseResponse","catch","handleFetchError","deleteRequest","response","status","ok","json","console","returnObject","split","deleteTranslatableLanguagesCache","getApiEndpointFor","deleteTranslationCache","getAvailableLanguages","getTranslation","sourceLanguage","targetLanguage","content","options","caching","data","body","JSON","stringify","./FtConfig","4","FtConfig","config","ProcessWire","fluency","localizedStrings","localization","elementClasses","translateButton","container","button","languageTranslator","sourceLanguageSelect","sourceLanguageSelectLabel","statusPlaceholder","label","icon","strings","languageSelect","inputfieldTranslateButtons","standaloneTranslator","usage","endpoints","languages","apiEndpoints","translatableLanguagesCache","test","translation","translationCache","configuredLanguages","unconfiguredLanguages","getConfiguredLanguages","getUnconfiguredLanguages","getEngineInfo","engine","fieldInitializedAttr","key","getDefaultLanguage","reduce","defaultLang","lang","getElementClassesFor","element","providesUsageData","getLanguageCount","getLanguageForId","pwLanguageId","parseInt","match","language","id","getTranslationAction","interface","inputfieldTranslationAction","getTranslationDisabledFieldAttribute","translationDisabledFieldAttr","languageIsTranslatable","languageId","includes","moduleShouldInitialize","translationActionTypes","each","all","both","5","targetContainer","activityType","elClasses","parent","overlay","flash","success","activity","visible","activityContainer","activityStaticText","activityAnimationContainer","activityAnimationItem","messageContainer","setActivityActive","setOverlayVisible","showMessage","displayTime","setMessageContent","setActivityInactive","setMessageActive","flashSuccess","setSuccessActive","setFlashActive","flashError","setErrorActive","delay","setTimeout","setOverlayInvisible","setMessageInactive","setErrorInactive","setFlashInactive","classList","add","remove","setSuccessInactive","create","buildOverlayEl","buildActivityEl","buildMessageEl","appendChild","createElement","text","getActivityTexts","animated","string","activityText","innerHTML","staticText","static","uiTexts","animationTexts","j","Math","floor","random","temp","targetContainerContainer"],"mappings":"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"}