{"version":3,"file":"../fluency_language_translator.bundle.js","sources":["fluency_language_translator.bundle.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _FtLanguageTranslatorInputfields = _interopRequireDefault(require(\"./inputfields/FtLanguageTranslatorInputfields\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nwindow.addEventListener('load', e => {\n  _FtLanguageTranslatorInputfields.default.init();\n});\n\n},{\"./inputfields/FtLanguageTranslatorInputfields\":5}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"./FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Core module interface\n * Handles all interaction with the ProcessWire module backend\n * @return {object} Public interfaces\n */\n\nconst Fluency = function () {\n  /**\n   * Localized error strings\n   * @type {Object}\n   */\n  const errors = _FtConfig.default.getUiTextFor('errors');\n\n  /**\n   * Data Request Methods\n   */\n\n  /**\n   * Gets a translation from the Fluency module\n   * @param  {String}       sourceLanguage ISO language code\n   * @param  {String}       targetLanguage ISO langauge code\n   * @param  {String|Array} content        Content to translate\n   * @param  {Array}        options        Additional options\n   * @param  {Bool|null}         caching        Enable/disable caching\n   * @return {Promise}\n   */\n  const getTranslation = function (sourceLanguage, targetLanguage, content) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let caching = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    return postRequest(_FtConfig.default.getApiEndpointFor('translation'), {\n      sourceLanguage: sourceLanguage,\n      targetLanguage: targetLanguage,\n      content: content,\n      options: options,\n      caching: caching\n    }, response => {\n      return response;\n    });\n  };\n\n  /**\n   * Gets the current translation service API usage\n   * @return {Promise}\n   */\n  const getUsage = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('usage'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Get all language available for translation. Provides source/target lists from the translation\n   * service API\n   * @return {Promise}\n   */\n  const getAvailableLanguages = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('languages'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear all cached translations\n   * @return {Promise}\n   */\n  const deleteTranslationCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translationCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear cached list of translatable languages\n   * @return {Promise}\n   */\n  const deleteTranslatableLanguagesCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translatableLanguagesCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * HTTP Requests\n   */\n\n  /**\n   * Create headers for AJAX requests\n   * @return {Object}\n   */\n  const requestHeaders = requestType => {\n    const requestHeaders = {\n      'X-Requested-With': 'XMLHttpRequest'\n    };\n    if (requestType === 'GET') {\n      requestHeaders['Accept'] = 'application/json';\n    }\n    if (requestType === 'POST') {\n      requestHeaders['Content-Type'] = 'application/json';\n    }\n    return requestHeaders;\n  };\n\n  /**\n   * Executes a POST request to a given endpoint\n   * @param  {String}    endpoint URL for AJAX request\n   * @param  {Object}    data     Data for request\n   * @param  {Callable}  data     Function to handle response body\n   * @return {Promise}\n   */\n  const postRequest = (endpoint, data, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'POST',\n      cache: 'no-store',\n      headers: requestHeaders,\n      body: JSON.stringify(data)\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a GET request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const getRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'GET',\n      cache: 'no-store',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a DELETE request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const deleteRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'DELETE',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Parses response\n   * @param  {Object} response Fluency API response\n   * @return {Object|Void}\n   * @throws Error\n   */\n  const parseResponse = response => {\n    if (response.status === 204) {\n      return response;\n    }\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error();\n  };\n\n  /**\n   * Parses and returns results for a fetch error\n   * These are network level errors that occur between ProcessWire and the hosting server\n   * Any translation or service errors will be located within the response body itself\n   * @param  {Error} error Fetch API error object\n   * @return {Object}\n   */\n  const handleFetchError = error => {\n    console.error('[Fluency module API failure]', error.message);\n    const returnObject = {\n      error: null,\n      message: null\n    };\n    switch (error.message.split(' ')[0]) {\n      case 'NetworkError':\n        returnObject.error = 'FLUENCY_CLIENT_DISCONNECTED';\n        returnObject.message = errors['FLUENCY_CLIENT_DISCONNECTED'];\n        break;\n      default:\n        returnObject.error = 'UNKNOWN_ERROR';\n        returnObject.message = errors['UNKNOWN_ERROR'];\n        break;\n    }\n    return returnObject;\n  };\n  return {\n    deleteTranslatableLanguagesCache,\n    deleteTranslationCache,\n    getAvailableLanguages,\n    getTranslation,\n    getUsage\n  };\n}();\nvar _default = Fluency;\nexports.default = _default;\n\n},{\"./FtConfig\":3}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * This provides access methods to get module configuration values\n * @return {Object}  Public methods\n */\nconst FtConfig = function () {\n  // Public properties\n\n  const fieldInitializedAttr = 'data-ft-initialized';\n\n  // Private properties\n\n  /**\n   * Holds the data passed from the Fluency module\n   * @access Private\n   * @type {Object}\n   */\n  const config = ProcessWire.config.fluency;\n\n  /**\n   * All UI strings\n   * @type {Object}\n   */\n  const localizedStrings = config.localization;\n\n  /**\n   * Objects interface with the Fluency config object so that changes to the object\n   * structure from the back end do not break the UI. Use the public methods below\n   * to access ProcessWire.config.fluency properties and data\n   */\n\n  /**\n   * Localized strings keyed sets\n   * @type {Object}\n   */\n  const strings = {\n    activityOverlay: localizedStrings.activityOverlay,\n    languageSelect: localizedStrings.languageSelect,\n    inputfieldTranslateButtons: localizedStrings.inputfieldTranslateButtons,\n    standaloneTranslator: localizedStrings.standaloneTranslator,\n    usage: localizedStrings.usage,\n    errors: localizedStrings.errors\n  };\n\n  /**\n   * Fluency API keyed URLs\n   * @type {Object}\n   */\n  const endpoints = {\n    languages: config.apiEndpoints.languages,\n    translatableLanguagesCache: config.apiEndpoints.translatableLanguagesCache,\n    test: config.apiEndpoints.test,\n    translation: config.apiEndpoints.translation,\n    translationCache: config.apiEndpoints.translationCache,\n    usage: config.apiEndpoints.usage\n  };\n\n  /**\n   * Contains all of the Fluency configured langauges from the module\n   * @type {Array}\n   */\n  const configuredLanguages = config.configuredLanguages;\n\n  /**\n   * Contains an array of ProcessWire language IDs not configured in Fluency\n   * @type {Array}\n   */\n  const unconfiguredLanguages = config.unconfiguredLanguages;\n\n  // Public methods\n\n  /**\n   * Fluency REST API\n   */\n  const getApiEndpointFor = key => endpoints[key];\n\n  /**\n   * Languages\n   */\n\n  const getConfiguredLanguages = () => configuredLanguages;\n  const getDefaultLanguage = () => getConfiguredLanguages().reduce((defaultLang, lang) => lang.default ? lang : defaultLang, null);\n  const languageIsTranslatable = languageId => !getUnconfiguredLanguages().includes(parseInt(languageId, 10));\n  const getUnconfiguredLanguages = () => unconfiguredLanguages;\n  const getLanguageCount = () => getConfiguredLanguages().length + getUnconfiguredLanguages().length;\n  const getLanguageForId = pwLanguageId => {\n    pwLanguageId = parseInt(pwLanguageId, 10);\n    return getConfiguredLanguages().reduce((match, language) => language.id === pwLanguageId ? language : match, null);\n  };\n\n  /**\n   * Localization\n   */\n\n  const getUiTextFor = key => strings[key];\n\n  /**\n   * Module Configuration/State\n   */\n\n  const moduleShouldInitialize = () => getConfiguredLanguages().length > 1;\n  const getEngineInfo = () => config.engine;\n  const getEngineProvidesUsageData = () => getEngineInfo().providesUsageData;\n  return {\n    fieldInitializedAttr,\n    getApiEndpointFor,\n    getConfiguredLanguages,\n    getDefaultLanguage,\n    getEngineInfo,\n    getEngineProvidesUsageData,\n    getLanguageCount,\n    getLanguageForId,\n    getUiTextFor,\n    getUnconfiguredLanguages,\n    languageIsTranslatable,\n    moduleShouldInitialize\n  };\n}();\nvar _default = FtConfig;\nexports.default = _default;\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * These are common tools the Fluency translation module uses\n * It is loaded first in order of scripts added to the page so that the module\n * is available to all subsequent scripts\n *\n * @return {Object}   Public methods\n */\nconst FtTools = function () {\n  /**\n   * Create a random string of hex characters\n   * @param  {Number} length\n   * @return {String}\n   */\n  const randomHex = function () {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n    const chars = '0123456789ABCDEF'.split('');\n    [...Array(length)].reduce((hex, i) => hex = chars[Math.floor(Math.random() * chars.length)], '');\n  };\n\n  /**\n   * Generate random string of upper/lower/ints\n   * @param length\n   * @return string\n   */\n  const createRandomString = function () {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    return [...Array(length)].map(() => Math.random().toString(36)[2]).join('');\n  };\n\n  /**\n   * Appends a div to a given element with a defined string, optionally adds a unique\n   * string in case differentiating between more than one with the same text is\n   * needed\n   * @param  {Element}  element    Element to tag\n   * @param  {String}  text        Text for tag\n   * @param  {Boolean} addRandomId Add random ID string to tag\n   * @return {Void}\n   */\n  const tagElement = function (element, text) {\n    let addRandomId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const tagDiv = document.createElement('div');\n    tagDiv.setAttribute('class', 'ft-element-tag');\n    if (addRandomId) {\n      text += ' | ' + createRandomString();\n    }\n    tagDiv.innerText = text;\n    element.appendChild(tagDiv);\n  };\n\n  /**\n   * Creates a random HTML hex code\n   * @return {String} [description]\n   */\n  const randomHexColor = () => `#${randomHex()}`;\n\n  /**\n   * Gets the page ID from the current URL\n   * @return {int|null} Page ID number, null if not present\n   */\n  var getPageId = function () {\n    var urlParams = new URLSearchParams(window.location.search);\n    return urlParams ? parseInt(urlParams.get('id')) : null;\n  };\n\n  /**\n   * Checks page ID against page ID passed\n   * @param  {int}  id ID to check against\n   * @return {bool}    True/false whether is current page ID\n   */\n  const pageIdIs = id => getPageId() === id;\n  return {\n    tagElement,\n    getPageId,\n    pageIdIs\n  };\n}();\nvar _default = FtTools;\nexports.default = _default;\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.LanguageTranslatorInputfield = exports.FtInputfieldText = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtUiElements = _interopRequireDefault(require(\"../ui/FtUiElements\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _Fluency = _interopRequireDefault(require(\"../global/Fluency\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Used for creating translation function for ProcessWire's core language translation pages\n *\n * @return {Object} Public methods\n */\nconst FtLanguageTranslatorInputfields = function () {\n  const init = () => {\n    const translationInputfields = document.querySelectorAll('.InputfieldContent');\n    if (!translationInputfields) {\n      return;\n    }\n    [...translationInputfields].forEach(inputfield => {\n      if (inputfield.querySelector('input.translatable')) {\n        new LanguageTranslatorInputfield(inputfield);\n      }\n    });\n  };\n  return {\n    init\n  };\n}();\nconst LanguageTranslatorInputfield = function (inputfieldContainer) {\n  /**\n   * Gets all localized strings from the FluencyConfig object\n   * These do nothing on their own and must be bound with any behavior after creation\n   *\n   * @type {object}\n   */\n  const uiText = _FtConfig.default.getUiTextFor('inputfieldTranslateButtons');\n  let activityOverlay;\n  let sourceText = inputfieldContainer.querySelector('.description').innerText;\n  let targetInput = inputfieldContainer.querySelector('input');\n  this.getSelf = () => inputfieldContainer;\n  this.getActivityOverlay = () => activityOverlay;\n  this.addTranslateButton = () => {\n    const {\n      button,\n      container\n    } = _FtUiElements.default.createTranslateButton(uiText.translate);\n    this.bindTranslateButton(button);\n    inputfieldContainer.appendChild(container);\n  };\n  this.bindTranslateButton = button => {\n    button.addEventListener('click', e => {\n      e.preventDefault();\n      this.translateContent();\n    });\n  };\n  this.translateContent = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const id = parseInt(urlParams.get('language_id'));\n    activityOverlay.showActivity();\n    _Fluency.default.getTranslation(_FtConfig.default.getDefaultLanguage().engineLanguage.sourceCode, _FtConfig.default.getLanguageForId(id).engineLanguage.targetCode, sourceText).then(result => {\n      if (result.error) {\n        activityOverlay.showError(result.message);\n        return;\n      }\n      targetInput.value = result.translations[0];\n      activityOverlay.hide();\n    });\n  };\n  (() => {\n    activityOverlay = new _FtActivityOverlay.default(this);\n    this.addTranslateButton();\n  })();\n};\nexports.LanguageTranslatorInputfield = LanguageTranslatorInputfield;\nvar _default = FtLanguageTranslatorInputfields;\n/**\n * Handles IO operations for a multilanguage InputfieldText element\n * Language IDs are always converted to int to accept values from all sources since some may be\n * retrieved from various sources as a string\n *\n * NOTE: This is not a standard inputfield object and should not be instantiated in FtInputfields\n *       and only in specific locations of the PW Admin\n *\n * @param {Element}\n */\nexports.default = _default;\nconst FtInputfieldText = function (inputfield) {\n  /**\n   * Page-load values for all fields/languages\n   * Populated on object instantiation\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when content is modified\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * FtLanguageTab objects for each language\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all elements containing language inputs\n   * @property {String} ProcessWire Language ID\n   * @type {NodeList}\n   */\n  const inputContainers = {};\n\n  /**\n   * Text input fields\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const languageFields = {};\n\n  /**\n   * Activity overlay object, set on instantiation\n   *\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /*\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @access public\n   * @param  {String|Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => this.getFieldForLanguage(languageId).value;\n\n  /**\n   * @access public\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @param  {Mixed}      value      Value to insert into field\n   * @return {Bool}                  Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const field = this.getFieldForLanguage(languageId);\n    FtInputfields.updateValue(field, value);\n\n    // Required to programmatically trigger the event listener for this field\n    field.dispatchEvent(new Event('input'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int}  languageId ProcessWire language ID\n   * @return {Element}                Text field\n   */\n  this.getFieldForLanguage = languageId => {\n    if (Object.hasOwn(languageFields, languageId) && !!languageFields[languageId]) {\n      return languageFields[languageId];\n    }\n    languageFields[languageId] = this.getInputContainerForLanguage(languageId).querySelector('input');\n    return languageFields[languageId];\n  };\n\n  /**\n   * Gets a specific input container\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getInputContainerForLanguage = languageId => {\n    if (Object.hasOwn(inputContainers, languageId) && !!inputContainers[languageId]) {\n      return inputContainers[languageId];\n    }\n    inputContainers[languageId] = inputfield.querySelector(`[data-language=\"${languageId}\"]`);\n    return inputContainers[languageId];\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    inputfield.querySelectorAll('[data-language]').forEach(el => inputContainers[el.dataset.language] = el);\n    return inputContainers;\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Registers the event listener that watches for changes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getFieldForLanguage(languageId).addEventListener('input', e => {\n      changedValues[languageId] = e.target.value;\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * - Stores initial field values for each langauge\n   * - Creates/stores an FtLanguageTab object for each language\n   * - Binds an event that detects changes on input\n   * @return {Void}\n   */\n  (() => {\n    const allInputContainers = this.getInputContainers();\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      initValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId] = new FtLanguageTab(inputContainer);\n      this.registerInputEventListener(languageId);\n    }\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new FtInputfieldTranslateButton(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldText = FtInputfieldText;\n\n},{\"../global/Fluency\":2,\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":6,\"../ui/FtUiElements\":7}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Creates, inserts, and controls the actions the activity overlay for the provided\n * targetContainer\n * @param {object} targetContainer An instantiated object for an inputfield or fieldset\n * @param {string} type       The type of activity for this overlay. 'translate' or 'update'\n */\nconst FtActivityOverlay = function (targetContainer) {\n  var _this = this;\n  let activityType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'translating';\n  const elClasses = {\n    parent: 'ft-activity-overlay-container',\n    overlay: 'ft-activity-overlay',\n    error: 'error',\n    message: 'message',\n    flash: 'flash',\n    success: 'success',\n    activity: 'activity',\n    visible: 'visible',\n    activityContainer: 'ft-activity',\n    activityStaticText: 'ft-activity-text',\n    activityAnimationContainer: 'ft-activity-animation-container',\n    activityAnimationItem: 'ft-activity-animation-item',\n    messageContainer: 'ft-activity-message'\n  };\n\n  /**\n   * Will contain the activityOverlay Element for this targetContainer\n   * @type {Element}\n   */\n  let activityOverlay;\n\n  /**\n   * Will contain the message Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let messageContainer;\n\n  /**\n   * Will contain the animation container Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let activityContainer;\n\n  /**\n   * Control Methods\n   */\n\n  /**\n   * This shows the overlay's activity animation that was created at instantiation\n   * Must be manually hidden with the hide() method\n   *\n   * @return {void}\n   */\n  this.showActivity = () => {\n    this.setActivityActive();\n    this.setOverlayVisible();\n  };\n\n  /**\n   * Shows a message in the overlay (neutral background)\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showMessage = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;\n    _this.setMessageContent(message);\n    _this.setActivityInactive();\n    _this.setMessageActive();\n    _this.setOverlayVisible();\n    _this.hide(displayTime);\n  };\n\n  /**\n   * Shows a success message (success color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashSuccess = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n    _this.setSuccessActive();\n    _this.setFlashActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows a success message (error color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashError = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n    _this.setFlashActive();\n    _this.setErrorActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows an error message in a visible overlay (error background)\n   *\n   * @param  {String} message     Message to show in overlay error\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showError = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 7000;\n    _this.setErrorActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Hide an overlay immediately or after a preset amount of time\n   *\n   * @param {Number} delay Length of time in ms before hiding overlay\n   */\n  this.hide = function () {\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    setTimeout(() => {\n      _this.setOverlayInvisible();\n    }, delay);\n\n    // Ensures the animation is finished before modifying content\n    setTimeout(() => {\n      _this.setActivityInactive();\n      _this.setMessageInactive();\n      _this.setErrorInactive();\n      _this.setFlashInactive();\n      _this.setMessageContent('');\n    }, delay + 500);\n  };\n\n  /**\n   * Private Methods\n   */\n\n  /**\n   * Shows the activity element\n   *\n   * @access Private\n   */\n  this.setActivityActive = () => {\n    activityOverlay.classList.add(elClasses.activity);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setActivityInactive = () => {\n    activityOverlay.classList.remove(elClasses.activity);\n  };\n\n  /**\n   * Shows the message element\n   *\n   * @access Private\n   */\n  this.setMessageActive = () => {\n    activityOverlay.classList.add(elClasses.message);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setMessageInactive = () => {\n    activityOverlay.classList.remove(elClasses.message);\n  };\n\n  /**\n   * Sets the content of the overlay message\n   *\n   * @access Private\n   */\n  this.setMessageContent = content => {\n    messageContainer.innerText = content;\n  };\n\n  /**\n   * Adds flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashActive = content => {\n    activityOverlay.classList.add(elClasses.flash);\n  };\n\n  /**\n   * removes flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashInactive = content => {\n    activityOverlay.classList.remove(elClasses.flash);\n  };\n\n  /**\n   * Sets message to success\n   *\n   * @access Private\n   */\n  this.setSuccessActive = () => {\n    activityOverlay.classList.add(elClasses.success);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setSuccessInactive = () => {\n    activityOverlay.classList.remove(elClasses.success);\n  };\n\n  /**\n   * Sets message to error\n   *\n   * @access Private\n   */\n  this.setErrorActive = () => {\n    activityOverlay.classList.add(elClasses.error);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setErrorInactive = () => {\n    activityOverlay.classList.remove(elClasses.error);\n  };\n\n  /**\n   * Shows this activity overlay\n   *\n   * @access Private\n   */\n  this.setOverlayVisible = () => {\n    activityOverlay.classList.add(elClasses.visible);\n  };\n  this.setOverlayInvisible = () => {\n    activityOverlay.classList.remove(elClasses.visible);\n  };\n\n  /**\n   * Creates and returns an activity overlay element\n   *\n   * @return {HTMLElement}\n   */\n  this.create = () => {\n    activityOverlay = this.buildOverlayEl();\n    activityContainer = this.buildActivityEl();\n    messageContainer = this.buildMessageEl();\n    activityOverlay.appendChild(activityContainer);\n    activityOverlay.appendChild(messageContainer);\n    return activityOverlay;\n  };\n\n  /**\n   * Creates the parent overlay element\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildOverlayEl = () => {\n    const overlay = document.createElement('div');\n\n    // overlay.setAttribute('data-gradient-1', 'rgba(62, 185, 152, .85)');\n    overlay.setAttribute('class', elClasses.overlay);\n    return overlay;\n  };\n\n  /**\n   * Creates container for animation and contents of animation\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildActivityEl = () => {\n    let text = _FtConfig.default.getUiTextFor('activityOverlay')[activityType];\n    let activityAnimationContainer = document.createElement('div');\n    activityAnimationContainer.setAttribute('class', elClasses.activityAnimationContainer);\n\n    // Add all animation items to the animation container\n    activityAnimationContainer = text.animated.reduce((el, string) => {\n      let activityText = document.createElement('span');\n\n      // Add text items\n      activityText.setAttribute('class', elClasses.activityAnimationItem);\n      activityText.innerHTML = string;\n      el.appendChild(activityText);\n      return el;\n    }, activityAnimationContainer);\n\n    // Create static text element\n    let staticText = document.createElement('div');\n    staticText.setAttribute('class', elClasses.activityStaticText);\n    staticText.innerText = text.static;\n\n    // Create activity container and append children\n    activityContainer = document.createElement('div');\n    activityContainer.setAttribute('class', elClasses.activityContainer);\n    activityContainer.appendChild(staticText);\n    activityContainer.appendChild(activityAnimationContainer);\n    return activityContainer;\n  };\n\n  /**\n   * Builds the element that will hold messages in the overlay\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildMessageEl = () => {\n    messageContainer = document.createElement('div');\n    messageContainer.setAttribute('class', elClasses.messageContainer);\n    return messageContainer;\n  };\n  (() => {\n    const targetContainerContainer = targetContainer.getSelf();\n    activityOverlay = this.create();\n    targetContainerContainer.classList.add(elClasses.parent);\n    targetContainerContainer.appendChild(activityOverlay);\n  })();\n};\nvar _default = FtActivityOverlay;\nexports.default = _default;\n\n},{\"../global/FtConfig\":3}],7:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtTools = _interopRequireDefault(require(\"../global/FtTools\"));\nvar _Fluency = _interopRequireDefault(require(\"../global/Fluency\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Creates common HTML elements\n *\n * @return {Object} Public methods\n */\nconst FtUiElements = function () {\n  /**\n   * @type {Object}\n   */\n  const elementClasses = {\n    translateButton: {\n      container: 'ft-translate-button-container',\n      button: 'ft-translate-button'\n    },\n    statusPlaceholder: {\n      container: 'ft-translation-status-container',\n      label: 'ft-translation-status'\n    },\n    icon: 'ft-icon'\n  };\n\n  /**\n   * Gets all localized strings from the FluencyConfig object\n   * These do nothing on their own and must be bound with any behavior after creation\n   *\n   * @type {object}\n   */\n  const uiText = _FtConfig.default.getUiTextFor('inputfieldTranslateButtons');\n\n  /**\n   * Creates a language fontawesome icon element\n   *\n   * @return {Element}\n   */\n  const createIcon = () => {\n    const icon = document.createElement('i');\n    icon.setAttribute('class', `${elementClasses.icon} fa fa-language`);\n    icon.setAttribute('title', uiText.poweredBy);\n    return icon;\n  };\n\n  /**\n   * Creates a status placeholder\n   *\n   * @return {Element}\n   */\n  const createStatusElement = text => {\n    const label = document.createElement('span');\n    label.setAttribute('class', elementClasses.statusPlaceholder.label);\n    label.innerText = text;\n    const container = document.createElement('div');\n    container.setAttribute('class', elementClasses.statusPlaceholder.container);\n    container.appendChild(createIcon());\n    container.appendChild(label);\n    return container;\n  };\n\n  /**\n   * Creates a translate button element\n   *\n   * @return {Object} Container element and Button element\n   */\n  const createTranslateButton = text => {\n    const button = document.createElement('button');\n    button.innerText = text;\n    button.setAttribute('class', elementClasses.translateButton.button);\n    const container = document.createElement('div');\n    container.setAttribute('class', elementClasses.translateButton.container);\n    const icon = document.createElement('i');\n    icon.setAttribute('class', 'ft-icon fa fa-language');\n    container.appendChild(createIcon());\n    container.appendChild(button);\n    return {\n      button,\n      container\n    };\n  };\n  return {\n    createStatusElement,\n    createTranslateButton,\n    createIcon,\n    elementClasses\n  };\n}();\nvar _default = FtUiElements;\nexports.default = _default;\n\n},{\"../global/Fluency\":2,\"../global/FtConfig\":3,\"../global/FtTools\":4}]},{},[1]);\n"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_FtLanguageTranslatorInputfields","obj","__esModule","default","window","addEventListener","init","./inputfields/FtLanguageTranslatorInputfields","2","Object","defineProperty","value","_FtConfig","Fluency","errors","getUiTextFor","requestHeaders","requestType","X-Requested-With","getRequest","endpoint","responseHandler","fetch","method","cache","headers","then","parseResponse","catch","handleFetchError","deleteRequest","response","status","ok","json","error","console","message","returnObject","split","deleteTranslatableLanguagesCache","getApiEndpointFor","deleteTranslationCache","getAvailableLanguages","getTranslation","sourceLanguage","targetLanguage","content","let","options","arguments","undefined","caching","data","body","JSON","stringify","getUsage","./FtConfig","3","FtConfig","config","ProcessWire","fluency","localizedStrings","localization","strings","activityOverlay","languageSelect","inputfieldTranslateButtons","standaloneTranslator","usage","endpoints","languages","apiEndpoints","translatableLanguagesCache","test","translation","translationCache","configuredLanguages","unconfiguredLanguages","getConfiguredLanguages","getUnconfiguredLanguages","getEngineInfo","engine","fieldInitializedAttr","key","getDefaultLanguage","reduce","defaultLang","lang","getEngineProvidesUsageData","providesUsageData","getLanguageCount","getLanguageForId","pwLanguageId","parseInt","match","language","id","languageIsTranslatable","languageId","includes","moduleShouldInitialize","4","getPageId","urlParams","URLSearchParams","location","search","get","tagElement","element","text","addRandomId","tagDiv","document","createElement","setAttribute","Array","map","Math","random","toString","join","innerText","appendChild","pageIdIs","5","LanguageTranslatorInputfield","FtInputfieldText","_FtActivityOverlay","_interopRequireDefault","_FtUiElements","_Fluency","FtLanguageTranslatorInputfields","translationInputfields","querySelectorAll","forEach","inputfield","querySelector","inputfieldContainer","uiText","sourceText","targetInput","this","getSelf","getActivityOverlay","addTranslateButton","button","container","createTranslateButton","translate","bindTranslateButton","preventDefault","translateContent","showActivity","engineLanguage","sourceCode","targetCode","result","showError","translations","hide","initValues","changedValues","languageTabs","inputContainers","languageFields","getValueForDefaultLanguage","getValueForLanguage","getFieldForLanguage","setValueForLanguage","field","FtInputfields","updateValue","dispatchEvent","Event","contentHasChanged","hasOwn","getInputContainerForLanguage","getInputContainers","el","dataset","registerInputEventListener","target","setModifiedState","allInputContainers","inputContainer","FtLanguageTab","FtInputfieldTranslateButton","../global/Fluency","../global/FtConfig","../ui/FtActivityOverlay","../ui/FtUiElements","6","targetContainer","_this","activityType","elClasses","parent","overlay","flash","success","activity","visible","activityContainer","activityStaticText","activityAnimationContainer","activityAnimationItem","messageContainer","setActivityActive","setOverlayVisible","showMessage","displayTime","setMessageContent","setActivityInactive","setMessageActive","flashSuccess","setSuccessActive","setFlashActive","flashError","setErrorActive","delay","setTimeout","setOverlayInvisible","setMessageInactive","setErrorInactive","setFlashInactive","classList","add","remove","setSuccessInactive","create","buildOverlayEl","buildActivityEl","buildMessageEl","animated","string","activityText","innerHTML","staticText","static","targetContainerContainer","7","FtUiElements","elementClasses","translateButton","statusPlaceholder","label","icon","createIcon","poweredBy","createStatusElement","../global/FtTools"],"mappings":"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"}