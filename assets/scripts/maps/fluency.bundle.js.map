{"version":3,"file":"../fluency.bundle.js","sources":["fluency.bundle.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _FtInputfields = _interopRequireDefault(require(\"./inputfields/FtInputfields\"));\nvar _FtAdminMenu = _interopRequireDefault(require(\"./ui/FtAdminMenu\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n// Each module has its own checks to determine if they should initialize\nwindow.addEventListener('load', e => {\n  _FtAdminMenu.default.init();\n  _FtInputfields.default.init();\n});\n\n},{\"./inputfields/FtInputfields\":13,\"./ui/FtAdminMenu\":15}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"./FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Core module interface\n * Handles all interaction with the ProcessWire module backend\n * @return {object} Public interfaces\n */\n\nconst Fluency = function () {\n  /**\n   * Localized error strings\n   * @type {Object}\n   */\n  const errors = _FtConfig.default.getUiTextFor('errors');\n\n  /**\n   * Data Request Methods\n   */\n\n  /**\n   * Gets a translation from the Fluency module\n   * @param  {String}       sourceLanguage ISO language code\n   * @param  {String}       targetLanguage ISO langauge code\n   * @param  {String|Array} content        Content to translate\n   * @param  {Array}        options        Additional options\n   * @param  {Bool|null}         caching        Enable/disable caching\n   * @return {Promise}\n   */\n  const getTranslation = function (sourceLanguage, targetLanguage, content) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let caching = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    return postRequest(_FtConfig.default.getApiEndpointFor('translation'), {\n      sourceLanguage: sourceLanguage,\n      targetLanguage: targetLanguage,\n      content: content,\n      options: options,\n      caching: caching\n    }, response => {\n      return response;\n    });\n  };\n\n  /**\n   * Gets the current translation service API usage\n   * @return {Promise}\n   */\n  const getUsage = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('usage'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Get all language available for translation. Provides source/target lists from the translation\n   * service API\n   * @return {Promise}\n   */\n  const getAvailableLanguages = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('languages'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear all cached translations\n   * @return {Promise}\n   */\n  const deleteTranslationCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translationCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear cached list of translatable languages\n   * @return {Promise}\n   */\n  const deleteTranslatableLanguagesCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translatableLanguagesCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * HTTP Requests\n   */\n\n  /**\n   * Create headers for AJAX requests\n   * @return {Object}\n   */\n  const requestHeaders = requestType => {\n    const requestHeaders = {\n      'X-Requested-With': 'XMLHttpRequest'\n    };\n    if (requestType === 'GET') {\n      requestHeaders['Accept'] = 'application/json';\n    }\n    if (requestType === 'POST') {\n      requestHeaders['Content-Type'] = 'application/json';\n    }\n    return requestHeaders;\n  };\n\n  /**\n   * Executes a POST request to a given endpoint\n   * @param  {String}    endpoint URL for AJAX request\n   * @param  {Object}    data     Data for request\n   * @param  {Callable}  data     Function to handle response body\n   * @return {Promise}\n   */\n  const postRequest = (endpoint, data, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'POST',\n      cache: 'no-store',\n      headers: requestHeaders,\n      body: JSON.stringify(data)\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a GET request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const getRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'GET',\n      cache: 'no-store',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a DELETE request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const deleteRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'DELETE',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Parses response\n   * @param  {Object} response Fluency API response\n   * @return {Object|Void}\n   * @throws Error\n   */\n  const parseResponse = response => {\n    if (response.status === 204) {\n      return response;\n    }\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error();\n  };\n\n  /**\n   * Parses and returns results for a fetch error\n   * These are network level errors that occur between ProcessWire and the hosting server\n   * Any translation or service errors will be located within the response body itself\n   * @param  {Error} error Fetch API error object\n   * @return {Object}\n   */\n  const handleFetchError = error => {\n    console.error('[Fluency module API failure]', error.message);\n    const returnObject = {\n      error: null,\n      message: null\n    };\n    switch (error.message.split(' ')[0]) {\n      case 'NetworkError':\n        returnObject.error = 'FLUENCY_CLIENT_DISCONNECTED';\n        returnObject.message = errors['FLUENCY_CLIENT_DISCONNECTED'];\n        break;\n      default:\n        returnObject.error = 'UNKNOWN_ERROR';\n        returnObject.message = errors['UNKNOWN_ERROR'];\n        break;\n    }\n    return returnObject;\n  };\n  return {\n    deleteTranslatableLanguagesCache,\n    deleteTranslationCache,\n    getAvailableLanguages,\n    getTranslation,\n    getUsage\n  };\n}();\nvar _default = Fluency;\nexports.default = _default;\n\n},{\"./FtConfig\":3}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * This provides access methods to get module configuration values\n * @return {Object}  Public methods\n */\nconst FtConfig = function () {\n  // Public properties\n\n  const fieldInitializedAttr = 'data-ft-initialized';\n\n  // Private properties\n\n  /**\n   * Holds the data passed from the Fluency module\n   * @access Private\n   * @type {Object}\n   */\n  const config = ProcessWire.config.fluency;\n\n  /**\n   * All UI strings\n   * @type {Object}\n   */\n  const localizedStrings = config.localization;\n\n  /**\n   * Objects interface with the Fluency config object so that changes to the object\n   * structure from the back end do not break the UI. Use the public methods below\n   * to access ProcessWire.config.fluency properties and data\n   */\n\n  /**\n   * Localized strings keyed sets\n   * @type {Object}\n   */\n  const strings = {\n    activityOverlay: localizedStrings.activityOverlay,\n    languageSelect: localizedStrings.languageSelect,\n    inputfieldTranslateButtons: localizedStrings.inputfieldTranslateButtons,\n    standaloneTranslator: localizedStrings.standaloneTranslator,\n    usage: localizedStrings.usage,\n    errors: localizedStrings.errors\n  };\n\n  /**\n   * Fluency API keyed URLs\n   * @type {Object}\n   */\n  const endpoints = {\n    languages: config.apiEndpoints.languages,\n    translatableLanguagesCache: config.apiEndpoints.translatableLanguagesCache,\n    test: config.apiEndpoints.test,\n    translation: config.apiEndpoints.translation,\n    translationCache: config.apiEndpoints.translationCache,\n    usage: config.apiEndpoints.usage\n  };\n\n  /**\n   * Contains all of the Fluency configured langauges from the module\n   * @type {Array}\n   */\n  const configuredLanguages = config.configuredLanguages;\n\n  /**\n   * Contains an array of ProcessWire language IDs not configured in Fluency\n   * @type {Array}\n   */\n  const unconfiguredLanguages = config.unconfiguredLanguages;\n\n  // Public methods\n\n  /**\n   * Fluency REST API\n   */\n  const getApiEndpointFor = key => endpoints[key];\n\n  /**\n   * Languages\n   */\n\n  const getConfiguredLanguages = () => configuredLanguages;\n  const getDefaultLanguage = () => getConfiguredLanguages().reduce((defaultLang, lang) => lang.default ? lang : defaultLang, null);\n  const languageIsTranslatable = languageId => !getUnconfiguredLanguages().includes(parseInt(languageId, 10));\n  const getUnconfiguredLanguages = () => unconfiguredLanguages;\n  const getLanguageCount = () => getConfiguredLanguages().length + getUnconfiguredLanguages().length;\n  const getLanguageForId = pwLanguageId => {\n    pwLanguageId = parseInt(pwLanguageId, 10);\n    return getConfiguredLanguages().reduce((match, language) => language.id === pwLanguageId ? language : match, null);\n  };\n\n  /**\n   * Localization\n   */\n\n  const getUiTextFor = key => strings[key];\n\n  /**\n   * Module Configuration/State\n   */\n\n  const moduleShouldInitialize = () => getConfiguredLanguages().length > 1;\n  const getEngineInfo = () => config.engine;\n  const getEngineProvidesUsageData = () => getEngineInfo().providesUsageData;\n  return {\n    fieldInitializedAttr,\n    getApiEndpointFor,\n    getConfiguredLanguages,\n    getDefaultLanguage,\n    getEngineInfo,\n    getEngineProvidesUsageData,\n    getLanguageCount,\n    getLanguageForId,\n    getUiTextFor,\n    getUnconfiguredLanguages,\n    languageIsTranslatable,\n    moduleShouldInitialize\n  };\n}();\nvar _default = FtConfig;\nexports.default = _default;\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * These are common tools the Fluency translation module uses\n * It is loaded first in order of scripts added to the page so that the module\n * is available to all subsequent scripts\n *\n * @return {Object}   Public methods\n */\nconst FtTools = function () {\n  /**\n   * Create a random string of hex characters\n   * @param  {Number} length\n   * @return {String}\n   */\n  const randomHex = function () {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n    const chars = '0123456789ABCDEF'.split('');\n    [...Array(length)].reduce((hex, i) => hex = chars[Math.floor(Math.random() * chars.length)], '');\n  };\n\n  /**\n   * Generate random string of upper/lower/ints\n   * @param length\n   * @return string\n   */\n  const createRandomString = function () {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    return [...Array(length)].map(() => Math.random().toString(36)[2]).join('');\n  };\n\n  /**\n   * Appends a div to a given element with a defined string, optionally adds a unique\n   * string in case differentiating between more than one with the same text is\n   * needed\n   * @param  {Element}  element    Element to tag\n   * @param  {String}  text        Text for tag\n   * @param  {Boolean} addRandomId Add random ID string to tag\n   * @return {Void}\n   */\n  const tagElement = function (element, text) {\n    let addRandomId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const tagDiv = document.createElement('div');\n    tagDiv.setAttribute('class', 'ft-element-tag');\n    if (addRandomId) {\n      text += ' | ' + createRandomString();\n    }\n    tagDiv.innerText = text;\n    element.appendChild(tagDiv);\n  };\n\n  /**\n   * Creates a random HTML hex code\n   * @return {String} [description]\n   */\n  const randomHexColor = () => `#${randomHex()}`;\n\n  /**\n   * Gets the page ID from the current URL\n   * @return {int|null} Page ID number, null if not present\n   */\n  var getPageId = function () {\n    var urlParams = new URLSearchParams(window.location.search);\n    return urlParams ? parseInt(urlParams.get('id')) : null;\n  };\n\n  /**\n   * Checks page ID against page ID passed\n   * @param  {int}  id ID to check against\n   * @return {bool}    True/false whether is current page ID\n   */\n  const pageIdIs = id => getPageId() === id;\n  return {\n    tagElement,\n    getPageId,\n    pageIdIs\n  };\n}();\nvar _default = FtTools;\nexports.default = _default;\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldCKEditor = exports.FtInputfieldCKEditor = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if a given inputfield contains a regular CKEditor instance\n * @param  {Element} inputfield Inputfield (.langTabs) element\n * @return {Bool}\n */\nconst FtIsInputfieldCKEditor = inputfield => !!inputfield.querySelector('.InputfieldCKEditorNormal');\n\n/**\n * Handles translations for CKEditor Inputfields\n * @return {object}  Public methods\n */\nexports.FtIsInputfieldCKEditor = FtIsInputfieldCKEditor;\nconst FtInputfieldCKEditor = function (inputfield) {\n  /**\n   * Contains values for all fields/languages keyed by ProcessWire language ID.\n   * Populated on object instantiation\n   *\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when they change keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {String} Inputfield content\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * Will contain FtLanguageTab object for each language keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type     {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all language input containers keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type {Object}\n   */\n  const inputContainers = {};\n\n  /**\n   * Will contain all CKEditor instances\n   * @property {String} ProcessWire Language ID\n   * @value    {CKEditor|null}\n   * @type     {Object}\n   */\n  const editorInstances = {};\n\n  /**\n   * Will contain the base CKEditor instance ID that can be used to get the default CKEditor instance\n   * using the CKEditor API, or another instance by modifying this one.\n   * Set on FtInputfieldCKEditor instantiation\n   * @type {?String}\n   */\n  let defaultLanguageInstanceId = null;\n\n  /**\n   * Activity overlay object, set on instantiation\n   *\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /**\n   * Gets existing or instantiates a new activity overlay\n   *\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @access public\n   * @param  {Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => this.getEditorInstanceForLanguage(languageId).getData();\n\n  /**\n   * @access public\n   * @param  {Int}    languageId ProcessWire language ID\n   * @param  {Mixed}  value      Value to insert into field\n   * @return {Bool}              Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const instance = this.getEditorInstanceForLanguage(languageId);\n    instance.setData(value);\n    instance.fire('change');\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * Attempts to get the CKEditor instance for a given language ID. This method should\n   * be used exclusively to get instances as it also sets event listeners for content\n   * changes if they have been instantiated after FtInputfieldCKEditor has loaded\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {?CKEditor}\n   */\n  this.getEditorInstanceForLanguage = languageId => {\n    if (Object.hasOwn(editorInstances, languageId) && !!editorInstances[languageId]) {\n      return editorInstances[languageId];\n    }\n    const ckeditorSelector = this.createCKEditorSelector(languageId);\n    editorInstances[languageId] = CKEDITOR.instances[ckeditorSelector];\n    return editorInstances[languageId];\n  };\n\n  /**\n   * Creates a CKEditor ID used to get instances by language\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {String}\n   */\n  this.createCKEditorSelector = languageId => {\n    if (languageId == _FtConfig.default.getDefaultLanguage().id) {\n      return defaultLanguageInstanceId;\n    }\n    return `${defaultLanguageInstanceId}__${languageId}`;\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    this.getSelf().querySelectorAll('[data-language]').forEach(el => {\n      inputContainers[el.dataset.language] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * @access private\n   * @param  {Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Registers the event listener that watches for content changes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getEditorInstanceForLanguage(languageId).on('change', e => {\n      changedValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Init on object instantiation\n   * @access private\n   * @return {Void}\n   */\n  (() => {\n    if (CKEDITOR === undefined) {\n      console.error('CKEditor was not found by Fluency, translation unavailable');\n      return;\n    }\n    const allInputContainers = this.getInputContainers();\n    defaultLanguageInstanceId = Object.values(allInputContainers)[0].id.replace('langTab_', '');\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      editorInstances[languageId] = this.getEditorInstanceForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      this.registerInputEventListener(languageId);\n    }\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldCKEditor = FtInputfieldCKEditor;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":14,\"../ui/FtInputfieldTranslateButton\":16,\"../ui/FtLanguageTab\":17,\"./FtInputfields\":13}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldCKEditorInline = exports.FtInputfieldCKEditorInline = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if a given inputfield contains an inline CKEditor instance\n * @param  {Element} inputfield Inputfield (.langTabs) element\n * @return {Bool}\n */\nconst FtIsInputfieldCKEditorInline = inputfield => !!inputfield.querySelector('.InputfieldCKEditorInline');\n\n/**\n * Handles translations for CKEditor Inputfields\n * @return {object}  Public methods\n */\nexports.FtIsInputfieldCKEditorInline = FtIsInputfieldCKEditorInline;\nconst FtInputfieldCKEditorInline = function (inputfield) {\n  /**\n   * Contains values for all fields/languages\n   * Populated on FtInputfieldCKEditorInline instantiation\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when they change keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {String} Inputfield content\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * Will contain FtLanguageTab object for each language keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type     {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all language input containers keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type {Object}\n   */\n  const inputContainers = {};\n\n  /**\n   * Will contain all CKEditor instances\n   * @property {String} ProcessWire Language ID\n   * @value    {CKEditor|null}\n   * @type     {Object}\n   */\n  const editorInstances = {};\n\n  /**\n   * Will contain all elements that the inline editor uses for content\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const contentElements = {};\n\n  /**\n   * Will contain the base CKEditor instance ID that can be used to get the default CKEditor instance\n   * using the CKEditor API, or another instance by modifying this one.\n   * Set on FtInputfieldCKEditor instantiation\n   * @type {?String}\n   */\n  let defaultLanguageInstanceId = null;\n\n  /**\n   * Activity overlay object, set on instantiation\n   *\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /**\n   * Gets existing or instantiates a new activity overlay\n   *\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * Attempts to get the value for a language via the CKEditor API, falls back to directly getting\n   * the content of the content element\n   * @access public\n   * @param  {Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => {\n    const ckeditorInstance = this.getEditorInstanceForLanguage(languageId);\n    if (ckeditorInstance) {\n      return ckeditorInstance.getData();\n    }\n    return this.getContentElementForLanguage(languageId).innerHTML;\n  };\n\n  /**\n   * @access public\n   * @param  {Int}    languageId ProcessWire language ID\n   * @param  {Mixed}  value      Value to insert into field\n   * @return {Bool}              Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const instance = this.getEditorInstanceForLanguage(languageId);\n    const contentElement = this.getContentElementForLanguage(languageId);\n    instance ? instance.setValue(value) : contentElement.innerHTML = value;\n    contentElement.dispatchEvent(new Event('input'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * Attempts to get the CKEditor instance for a given language ID. This method should\n   * be used exclusively to get instances as it also sets event listeners for content\n   * changes if they have been instantiated after FtInputfieldCKEditor has loaded\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {?CKEditor}\n   */\n  this.getEditorInstanceForLanguage = languageId => {\n    if (Object.hasOwn(editorInstances, languageId) && !!editorInstances[languageId]) {\n      return editorInstances[languageId];\n    }\n    editorInstances[languageId] = CKEDITOR.instances[this.createCKEditorSelector(languageId)];\n    return editorInstances[languageId];\n  };\n\n  /**\n   * Gets the content element that CKEditor uses to store the field content\n   * Ensures memoization\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getContentElementForLanguage = languageId => {\n    if (Object.hasOwn(contentElements, languageId)) {\n      return contentElements[languageId];\n    }\n    contentElements[languageId] = this.getInputContainerForLanguage(languageId).querySelector('.InputfieldCKEditorInlineEditor');\n    return contentElements[languageId];\n  };\n\n  /**\n   * Creates a CKEditor ID used to get instances by language\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {String}\n   */\n  this.createCKEditorSelector = languageId => {\n    if (languageId == _FtConfig.default.getDefaultLanguage().id) {\n      return defaultLanguageInstanceId;\n    }\n    return `${defaultLanguageInstanceId}__${languageId}`;\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    if (Object.keys(inputContainers).length === _FtConfig.default.getLanguageCount()) {\n      return inputContainers;\n    }\n    this.getSelf().querySelectorAll('[data-language]').forEach(el => {\n      inputContainers[el.dataset.language] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * Gets a specific input container\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getInputContainerForLanguage = languageId => {\n    if (Object.hasOwn(inputContainers, languageId)) {\n      return inputContainers[languageId];\n    }\n    inputContainers[languageId] = inputfield.querySelector(`[data-language=\"${languageId}\"]`);\n    return inputContainers[languageId];\n  };\n\n  /**\n   * @access private\n   * @param  {Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Creates a MutationObserver that will detect when the content has changed for a given content\n   * element. When content is changed, is will mock an 'input' even that an eventListener will\n   * respond to\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerUpdateEvent = languageId => {\n    const contentElement = this.getContentElementForLanguage(languageId);\n    new MutationObserver((mutations, observer) => {\n      for (let mutation of mutations) {\n        mutation.target.dispatchEvent(new Event('input'));\n      }\n    }).observe(contentElement, {\n      childList: true\n    });\n  };\n\n  /**\n   * Registers an event listener that will respond to any 'input' changes in a\n   * content element\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getContentElementForLanguage(languageId).addEventListener('input', e => {\n      changedValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Init on object instantiation\n   * @access private\n   * @return {Void}\n   */\n  (() => {\n    if (CKEDITOR === undefined) {\n      console.error('CKEditor was not found by Fluency, translation unavailable');\n      return null;\n    }\n    const allInputContainers = this.getInputContainers();\n    defaultLanguageInstanceId = Object.values(allInputContainers)[0].id.replace('langTab_', '');\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      editorInstances[languageId] = this.getEditorInstanceForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      this.registerInputEventListener(languageId);\n    }\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldCKEditorInline = FtInputfieldCKEditorInline;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":14,\"../ui/FtInputfieldTranslateButton\":16,\"../ui/FtLanguageTab\":17,\"./FtInputfields\":13}],7:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Handles IO operations for a multilanguage InputfieldPageName element\n * The InputfieldPageName element has special considerations compared to other fields as they do not\n * have the same markup structure.\n * Some actions are internalized here, such as\n * @param {Element} inputfield The Inputfield .InputfieldPageName container\n */\nconst FtInputfieldPageName = function (inputfield) {\n  /**\n   * Page-load values for all fields/languages\n   * Populated on object instantiation\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when content is modified\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * FtLanguageTab objects for each language\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all elements containing language inputs\n   * @property {String} ProcessWire Language ID\n   * @type {NodeList}\n   */\n  const inputContainers = {};\n\n  /**\n   * Text input fields\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const languageFields = {};\n  let contentModifiedClass = new _FtLanguageTab.default().getContentModifiedClass();\n\n  /**\n   * Activity overlays by language IDs\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlays = {};\n\n  /*\n   * Return null to signal that the overlay should be by language ID\n   *\n   * @access public\n   * @return {Object|Null}\n   */\n  this.getActivityOverlay = languageId => {\n    if (!languageId) {\n      return null;\n    }\n    return activityOverlays[languageId].getActivityOverlay();\n  };\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @access public\n   * @param  {String|Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => this.getFieldForLanguage(languageId).value;\n\n  /**\n   * @access public\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @param  {Mixed}      value      Value to insert into field\n   * @return {Bool}                  Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const field = this.getFieldForLanguage(languageId);\n    _FtInputfields.default.updateValue(field, value);\n\n    // Required to programmatically trigger the event listener for this field\n    field.dispatchEvent(new Event('input'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int}  languageId ProcessWire language ID\n   * @return {Element}                Text field\n   */\n  this.getFieldForLanguage = languageId => {\n    if (Object.hasOwn(languageFields, languageId) && !!languageFields[languageId]) {\n      return languageFields[languageId];\n    }\n    languageFields[languageId] = this.getInputContainerForLanguage(languageId).querySelector('input');\n    return languageFields[languageId];\n  };\n\n  /**\n   * Gets a specific input container\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getInputContainerForLanguage = languageId => {\n    if (!Object.hasOwn(inputContainers, languageId) && !inputContainers[languageId]) {\n      this.getInputContainers();\n    }\n    return inputContainers[languageId];\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    // Page name fields require querying the child input and determining the language by analyzing\n    // the name attribute of the text input itself\n    this.getSelf().querySelectorAll('.LanguageSupport').forEach(el => {\n      // The default language input has no language ID, it's the default language, so fallback\n      const languageId = el.querySelector('input[type=text]').name.replace('_pw_page_name', '') || _FtConfig.default.getDefaultLanguage().id;\n      inputContainers[languageId] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n  this.setModifiedState = (languageId, contentHasChanged) => {\n    const inputContainer = this.getInputContainerForLanguage(languageId);\n    if (contentHasChanged) {\n      inputContainer.classList.add(contentModifiedClass);\n    }\n    if (!contentHasChanged) {\n      inputContainer.classList.remove(contentModifiedClass);\n    }\n  };\n\n  /**\n   * Registers the event listener that watches for changes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getFieldForLanguage(languageId).addEventListener('input', e => {\n      changedValues[languageId] = e.target.value;\n      this.setModifiedState(languageId, this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * - Stores initial field values for each langauge\n   * - Creates/stores an FtLanguageTab object for each language\n   * - Binds an event that detects changes on input\n   * @return {Void}\n   */\n  (() => {\n    const allInputContainers = this.getInputContainers();\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      initValues[languageId] = this.getValueForLanguage(languageId);\n      activityOverlays[languageId] = new createActivityOverlay(inputContainer);\n      this.registerInputEventListener(languageId);\n    }\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nconst createActivityOverlay = function (languageInput) {\n  let activityOverlay;\n  this.getSelf = () => languageInput;\n  this.getActivityOverlay = () => activityOverlay;\n  (() => {\n    activityOverlay = new _FtActivityOverlay.default(this);\n  })();\n};\nvar _default = FtInputfieldPageName;\nexports.default = _default;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":14,\"../ui/FtInputfieldTranslateButton\":16,\"../ui/FtLanguageTab\":17,\"./FtInputfields\":13}],8:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldTable = void 0;\n/**\n * Determines if a given inputfield contains a Table instance\n * @param  {Element} inputfield Inputfield (.langTabs) element\n * @return {Bool}\n */\nconst FtIsInputfieldTable = inputfield => !!inputfield.classList.contains('InputfieldTable');\nexports.FtIsInputfieldTable = FtIsInputfieldTable;\n\n},{}],9:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldText = exports.FtInputfieldText = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if the current inputfield is an InputfieldText\n * @param  {Element} inputfield Element containing the multilanguage fields\n * @return {Bool}\n */\nconst FtIsInputfieldText = inputfield => !!inputfield.querySelector(\"input[type='text']\");\n\n/**\n * Handles IO operations for a multilanguage InputfieldText element\n * Language IDs are always converted to int to accept values from all sources since some may be\n * retrieved from various sources as a string\n * @param {Element} inputfield The Inputfield .hasLangTabs container\n */\nexports.FtIsInputfieldText = FtIsInputfieldText;\nconst FtInputfieldText = function (inputfield) {\n  /**\n   * Page-load values for all fields/languages\n   * Populated on object instantiation\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when content is modified\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * FtLanguageTab objects for each language\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all elements containing language inputs\n   * @property {String} ProcessWire Language ID\n   * @type {NodeList}\n   */\n  const inputContainers = {};\n\n  /**\n   * Text input fields\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const languageFields = {};\n\n  /**\n   * Activity overlay object, set on instantiation\n   *\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /*\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @access public\n   * @param  {String|Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => this.getFieldForLanguage(languageId).value;\n\n  /**\n   * @access public\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @param  {Mixed}      value      Value to insert into field\n   * @return {Bool}                  Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const field = this.getFieldForLanguage(languageId);\n    _FtInputfields.default.updateValue(field, value);\n\n    // Required to programmatically trigger the event listener for this field\n    field.dispatchEvent(new Event('input'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int}  languageId ProcessWire language ID\n   * @return {Element}                Text field\n   */\n  this.getFieldForLanguage = languageId => {\n    if (Object.hasOwn(languageFields, languageId) && !!languageFields[languageId]) {\n      return languageFields[languageId];\n    }\n    languageFields[languageId] = this.getInputContainerForLanguage(languageId).querySelector('input');\n    return languageFields[languageId];\n  };\n\n  /**\n   * Gets a specific input container\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getInputContainerForLanguage = languageId => {\n    if (Object.hasOwn(inputContainers, languageId) && !!inputContainers[languageId]) {\n      return inputContainers[languageId];\n    }\n    inputContainers[languageId] = inputfield.querySelector(`[data-language=\"${languageId}\"]`);\n    return inputContainers[languageId];\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    inputfield.querySelectorAll('[data-language]').forEach(el => inputContainers[el.dataset.language] = el);\n    return inputContainers;\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Registers the event listener that watches for changes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getFieldForLanguage(languageId).addEventListener('input', e => {\n      changedValues[languageId] = e.target.value;\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * - Stores initial field values for each langauge\n   * - Creates/stores an FtLanguageTab object for each language\n   * - Binds an event that detects changes on input\n   * @return {Void}\n   */\n  (() => {\n    const allInputContainers = this.getInputContainers();\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      initValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      this.registerInputEventListener(languageId);\n    }\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldText = FtInputfieldText;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":14,\"../ui/FtInputfieldTranslateButton\":16,\"../ui/FtLanguageTab\":17,\"./FtInputfields\":13}],10:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldTextarea = exports.FtInputfieldTextarea = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if the current inputfield is an InputfieldText\n * @param  {Element} inputfield Element containing the multilanguage fields\n * @return {Bool}\n */\nconst FtIsInputfieldTextarea = inputfield => !!inputfield.querySelector('textarea:not(.InputfieldCKEditorNormal,.InputfieldTinyMCEEditor)');\n\n/**\n * Handles IO operations for a multilanguage InputfieldText element\n * Language IDs are always converted to int to accept values from all sources since some may be\n * retrieved from various sources as a string\n * @param {Element} inputfield The Inputfield .hasLangTabs container\n */\nexports.FtIsInputfieldTextarea = FtIsInputfieldTextarea;\nconst FtInputfieldTextarea = function (inputfield) {\n  /**\n   * Contains values for all fields/languages keyed by ProcessWire language ID.\n   * Populated on object instantiation\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when they change keyed by language ID\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * Will contain FtLanguageTab object for each language keyed by language ID\n   * Language ID keys are integers\n   * @type {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all language input containers keyed by language ID\n   * Language ID keys are integers\n   * @type {NodeList}\n   */\n  const inputContainers = {};\n\n  /**\n   * Will contain all language input text fields keyed by language ID\n   * @type {Object}\n   */\n  const languageFields = {};\n\n  /**\n   * Activity overlay object, set on instantiation\n   *\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /*\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @param  {Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => this.getFieldForLanguage(languageId).value;\n\n  /**\n   * @param  {Int}    languageId ProcessWire language ID\n   * @param  {Mixed}  value      Value to insert into field\n   * @return {Bool}              Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const field = this.getFieldForLanguage(languageId);\n    _FtInputfields.default.updateValue(field, value);\n\n    // Required to programmatically trigger the event listener for this field\n    field.dispatchEvent(new Event('input'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * @param  {Int}    languageId ProcessWire language ID\n   * @return {Element}           Text field\n   */\n  this.getFieldForLanguage = languageId => {\n    if (Object.hasOwn(languageFields, languageId)) {\n      return languageFields[languageId];\n    }\n    languageFields[languageId] = inputfield.querySelector(`[data-language=\"${languageId}\"] textarea`);\n    return languageFields[languageId];\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    inputfield.querySelectorAll('[data-language]').forEach(el => {\n      inputContainers[el.dataset.language] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * @param  {Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Init method executed on object instantiation\n   * - Stores initial field values for each langauge\n   * - Creates/stores an FtLanguageTab object for each language\n   * - Binds an event that detects changes on input\n   * @return {Void}\n   */\n  (() => {\n    const allInputContainers = this.getInputContainers();\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      initValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      inputContainer.querySelector('textarea').addEventListener('input', e => {\n        changedValues[languageId] = e.target.value;\n        languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n      });\n    }\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldTextarea = FtInputfieldTextarea;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":14,\"../ui/FtInputfieldTranslateButton\":16,\"../ui/FtLanguageTab\":17,\"./FtInputfields\":13}],11:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldTinyMCE = exports.FtInputfieldTinyMCE = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if a given inputfield contains a regular TinyMCE instance\n * @param  {Element} inputfield Inputfield (.langTabs) element\n * @return {Bool}\n */\nconst FtIsInputfieldTinyMCE = inputfield => !!inputfield.querySelector('.InputfieldTinyMCENormal');\n\n/**\n * Handles IO operations for a multilanguage InputfieldTinyMCE elements\n * @param {Element} inputfield The Inputfield .hasLangTabs container\n */\nexports.FtIsInputfieldTinyMCE = FtIsInputfieldTinyMCE;\nconst FtInputfieldTinyMCE = function (inputfield) {\n  /**\n   * Contains values for all fields/languages keyed by ProcessWire language ID.\n   * Populated on object instantiation\n   *\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when they change keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {String} Inputfield content\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * Will contain FtLanguageTab object for each language keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type     {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all language input containers keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type {Object}\n   */\n  const inputContainers = {};\n\n  /**\n   * Will contain all language input textarea fields that hold Inputfield data before TinyMCE\n   * instances are initialized.\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type     {Object}\n   */\n  const textareas = {};\n\n  /**\n   * Will contain all TinyMCE instances as they become available (are initialized). Most TinyMCE\n   * instances are lazy loaded or loaded on demand. Keyed by language ID\n   * This is populated on FtInputfieldTinyMCE on instantiation and language ID properties will either\n   * have a TinyMCE object or null\n   * @property {String} ProcessWire Language ID\n   * @value    {TinyMCE|null}\n   * @type     {Object}\n   */\n  const editorInstances = {};\n\n  /**\n   * Will contain the base TinyMCE instance ID that can be used to get the default TinyMCE instance\n   * using the TinyMCE API, or another instance by modifying this one.\n   * Set on FtInputfieldTinyMCE instantiation\n   * @type {?String}\n   */\n  let defaultLanguageInstanceId = null;\n\n  /**\n   * Activity overlay object, set on instantiation\n   *\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /*\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @param  {Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => {\n    const tinymceInstance = this.getTinymceInstanceForLanguage(languageId);\n    if (tinymceInstance) {\n      return tinymceInstance.getContent();\n    }\n    return this.getTextareaForLanguage(languageId).value;\n  };\n\n  /**\n   * Sets content for a language, will set the value for TinyMCE if it exists, and always set the\n   * value for the textarea\n   * @access public\n   * @param  {Int}    languageId ProcessWire language ID\n   * @param  {Mixed}  value      Value to insert into field\n   * @return {Bool}              Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const tinymceInstance = this.getTinymceInstanceForLanguage(languageId);\n    if (tinymceInstance) {\n      tinymceInstance.setContent(value);\n      tinymceInstance.fire('input');\n    }\n    const field = this.getTextareaForLanguage(languageId);\n    _FtInputfields.default.updateValue(field, value);\n    field.dispatchEvent(new Event('input'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * Attempts to get the TinyMCE instance for a given language ID if it exists\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {?TinyMCE}\n   */\n  this.getTinymceInstanceForLanguage = languageId => {\n    if (Object.hasOwn(editorInstances, languageId) && editorInstances[languageId]) {\n      return editorInstances[languageId];\n    }\n    const tinymceSelector = this.createTinymceSelector(languageId);\n    editorInstances[languageId] = tinymce.get(tinymceSelector);\n    return editorInstances[languageId];\n  };\n\n  /**\n   * @access private\n   * @param  {Int}    languageId ProcessWire language ID\n   * @return {Element}           Text field\n   */\n  this.getTextareaForLanguage = languageId => {\n    if (Object.hasOwn(textareas, languageId) && !!textareas[languageId]) {\n      return textareas[languageId];\n    }\n    textareas[languageId] = this.getSelf().querySelector(`[data-language=\"${languageId}\"] textarea`);\n    return textareas[languageId];\n  };\n\n  /**\n   * Get all input containers holding TinyMCE instances, memoizes. Keyed by ID\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    this.getSelf().querySelectorAll('[data-language]').forEach(el => {\n      inputContainers[el.dataset.language] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Creates a TinyMCE ID used to get instances by language\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {String}\n   */\n  this.createTinymceSelector = languageId => {\n    if (languageId == _FtConfig.default.getDefaultLanguage().id) {\n      return defaultLanguageInstanceId;\n    }\n    return `${defaultLanguageInstanceId}__${languageId}`;\n  };\n\n  /**\n   * Bind Inputfield required events to a TinyMCE instance\n   * @access private\n   * @param  {String|Int} languageId      ProcessWire language ID\n   * @param  {Object}     tinymceInstance TinyMCE object\n   * @return {Void}\n   */\n  this.bindTinymceEvents = (languageId, tinymceInstance) => {\n    tinymceInstance.on('keyup', e => this.getTextareaForLanguage(languageId).dispatchEvent(new Event('input')));\n  };\n\n  /**\n   * Creates an observer that looks for new TinyMCE instances within this Inputfield\n   * @access private\n   * @return {void}\n   */\n  this.initTinymceInstanceOnCreation = (languageId, inputContainer) => {\n    new MutationObserver((mutations, observer) => {\n      for (let mutation of mutations) {\n        let targetEl = mutation.target;\n        if (targetEl.dataset.language == languageId) {\n          editorInstances[languageId] = this.getTinymceInstanceForLanguage(languageId);\n          this.bindTinymceEvents(languageId, editorInstances[languageId]);\n          if (editorInstances[languageId]) {\n            observer.disconnect();\n          }\n        }\n      }\n    }).observe(inputContainer, {\n      childList: true\n    });\n  };\n\n  /**\n   * Registers the event listener that watches for content changes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {void}\n   */\n  this.registerInputEventListener = languageId => {\n    textareas[languageId].addEventListener('input', e => {\n      changedValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Initializes FtInputfieldTinyMCE Inputfield\n   * @access private\n   * @param  {Array<Element>} allInputContainers All elements containing TinyMCE fields\n   * @return {Void}\n   */\n  this.initAll = allInputContainers => {\n    // TinyMCE instances are initialzied using a field ID. The default language element contains\n    // an ID substring that can be modified to create a TinyMCE ID string that can be used to get\n    // TinyMCE instances\n    defaultLanguageInstanceId = Object.values(allInputContainers)[0].id.replace('langTab_', '');\n\n    // At runtime/initialization only the TinyMCE instance will load for the default language, others\n    // will be loaded when switched to the tab. Still attempt to get all TinyMCE instances for all\n    // tabs in case they are available\n    for (let languageId in allInputContainers) {\n      const inputContainer = allInputContainers[languageId];\n\n      // Get initial content on page load\n      // Call this first to ensure getValueForLanguage() pulls from the textarea element rather than\n      // attempting to use the TinyMCE API on object instantiation\n      initValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      editorInstances[languageId] = this.getTinymceInstanceForLanguage(languageId);\n      textareas[languageId] = this.getTextareaForLanguage(languageId);\n      this.registerInputEventListener(languageId);\n\n      // If there was no editor found at initialization, register when created\n      if (!editorInstances[languageId]) {\n        this.initTinymceInstanceOnCreation(languageId, inputContainer);\n      }\n    }\n\n    // Bind TinyMCE event listeners to any TinyMCE input fields found on initialization\n    for (let languageId in editorInstances) {\n      if (Object.hasOwn(editorInstances, languageId) && !!editorInstances[languageId]) {\n        this.bindTinymceEvents(languageId, editorInstances[languageId]);\n      }\n    }\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * - Stores initial field values for each langauge\n   * - Creates/stores an FtLanguageTab object for each language\n   * - Binds an event that detects changes on input\n   * @return {Void}\n   */\n  (() => {\n    const allInputContainers = this.getInputContainers();\n\n    // Set a micro timeout to allow TinyMCE instances to instantiate.\n    // This is especially important when new fields are dynamically added after page load\n    setTimeout(() => {\n      this.initAll(allInputContainers);\n    }, 50);\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldTinyMCE = FtInputfieldTinyMCE;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":14,\"../ui/FtInputfieldTranslateButton\":16,\"../ui/FtLanguageTab\":17,\"./FtInputfields\":13}],12:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldTinyMCEInline = exports.FtInputfieldTinyMCEInline = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if a given inputfield contains an inline TinyMCE instance\n * @param  {Element} inputfield Inputfield (.langTabs) element\n * @return {Bool}\n */\nconst FtIsInputfieldTinyMCEInline = inputfield => !!inputfield.querySelector('.InputfieldTinyMCEInline');\n\n/**\n * Handles translations for TinyMCE Inputfields\n * @return {object}  Public methods\n */\nexports.FtIsInputfieldTinyMCEInline = FtIsInputfieldTinyMCEInline;\nconst FtInputfieldTinyMCEInline = function (inputfield) {\n  /**\n   * Contains values for all fields/languages keyed by ProcessWire language ID.\n   * Populated on object instantiation\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when they change keyed by language ID\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * Will contain FtLanguageTab object for each language keyed by language ID\n   * Language ID keys are integers\n   * @type {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all language input containers keyed by language ID\n   * Language ID keys are integers\n   * @type {NodeList}\n   */\n  const inputContainers = {};\n\n  /**\n   * Will contain all the HTML elements that the inline TinyMCE editor stores/modifies content\n   * keyed by language ID\n   * @type {Object}\n   */\n  const contentElements = {};\n\n  /**\n   * Will contain all TinyMCE instances as they become available\n   * @type {Object}\n   */\n  const editorInstances = {};\n\n  /**\n   * Will contain the TinyMCE instance name for the default language.\n   * Used to get the TinyMCE instance\n   * @type {?String}\n   */\n  let defaultLanguageInstanceId = null;\n\n  /**\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /*\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @access public\n   * @param  {Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => {\n    const tinymceInstance = this.getEditorInstanceForLanguage(languageId);\n    if (tinymceInstance) {\n      return tinymceInstance.getContent();\n    }\n    return this.getContentElementForLanguage(languageId).innerHTML;\n  };\n\n  /**\n   * @access public\n   * @param  {Int}    languageId ProcessWire language ID\n   * @param  {Mixed}  value      Value to insert into field\n   * @return {Bool}              Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const contentElement = this.getContentElementForLanguage(languageId);\n    contentElement.innerHTML = value;\n\n    // Required to programmatically trigger the event listener for this field\n    contentElement.dispatchEvent(new Event('input'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * Attempts to get the TinyMCE instance for a given language ID if it exists\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {?TinyMCE}\n   */\n  this.getEditorInstanceForLanguage = languageId => {\n    if (Object.hasOwn(editorInstances, languageId) && !!editorInstances[languageId]) {\n      return editorInstances[languageId];\n    }\n    const tinymceSelector = this.createTinymceSelector(languageId);\n    editorInstances[languageId] = tinymce.get(tinymceSelector);\n    return editorInstances[languageId];\n  };\n\n  /**\n   * Gets the content element that TinyMCE uses to store the field content\n   * Ensures memoization\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getContentElementForLanguage = languageId => {\n    if (Object.hasOwn(contentElements, languageId)) {\n      return contentElements[languageId];\n    }\n    contentElements[languageId] = this.getInputContainerForLanguage(languageId).querySelector('.mce-content-body');\n    return contentElements[languageId];\n  };\n\n  /**\n   * Gets a specific input container. Memoizes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getInputContainerForLanguage = languageId => {\n    if (Object.hasOwn(inputContainers, languageId) && !!inputContainers[languageId]) {\n      return inputContainers[languageId];\n    }\n    inputContainers[languageId] = this.getSelf().querySelector(`[data-language=\"${languageId}\"]`);\n    return inputContainers[languageId];\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    this.getSelf().querySelectorAll('[data-language]').forEach(el => {\n      inputContainers[el.dataset.language] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * This determines if the content for a given langauge has changed. In some instancesTinyMCE\n   * inserts unwanted elements into empty fields that will always register content as having been\n   * changed. This includes adding elements to fields that may be returned to their original content\n   * matching content at page load. These \"phantom elements\" must me checked for.\n   * @access private\n   * @param  {Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Creates a TinyMCE ID used to get instances by language\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {String}\n   */\n  this.createTinymceSelector = languageId => {\n    if (languageId == _FtConfig.default.getDefaultLanguage().id) {\n      return defaultLanguageInstanceId;\n    }\n    return `${defaultLanguageInstanceId}__${languageId}`;\n  };\n\n  /**\n   * Creates a MutationObserver that will detect when the innerHTML content has changed for a given\n   * content element. When content is changed, it will mock an 'input' event that an eventListener\n   * can respond to\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerUpdateEvent = languageId => {\n    const contentElement = this.getContentElementForLanguage(languageId);\n    new MutationObserver((mutations, observer) => {\n      for (let mutation of mutations) {\n        mutation.target.dispatchEvent(new Event('input'));\n      }\n    }).observe(contentElement, {\n      childList: true\n    });\n  };\n\n  /**\n   * Register an input observer\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getContentElementForLanguage(languageId).addEventListener('input', e => {\n      changedValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * - Stores initial field values for each langauge\n   * - Creates/stores an FtLanguageTab object for each language\n   * - Binds an event that detects changes on input\n   * @return {Void}\n   */\n  (() => {\n    if (tinymce === undefined) {\n      console.error('TinyMCE was not found by Fluency, translation unavailable');\n      return null;\n    }\n    const allInputContainers = this.getInputContainers();\n\n    // TinyMCE instances are initialzied using a field ID. The default language element contains\n    // an ID substring that can be modified to create a TinyMCE ID string that can be used to get\n    // TinyMCE instances\n    defaultLanguageInstanceId = Object.values(allInputContainers)[0].id.replace('langTab_', '');\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      initValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      this.registerUpdateEvent(languageId);\n      this.registerInputEventListener(languageId);\n    }\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldTinyMCEInline = FtInputfieldTinyMCEInline;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":14,\"../ui/FtInputfieldTranslateButton\":16,\"../ui/FtLanguageTab\":17,\"./FtInputfields\":13}],13:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtTools = _interopRequireDefault(require(\"../global/FtTools\"));\nvar _FtInputfieldCKEditor = require(\"./FtInputfieldCKEditor\");\nvar _FtInputfieldCKEditorInline = require(\"./FtInputfieldCKEditorInline\");\nvar _FtInputfieldTable = require(\"./FtInputfieldTable\");\nvar _FtInputfieldText = require(\"./FtInputfieldText\");\nvar _FtInputfieldTextarea = require(\"./FtInputfieldTextarea\");\nvar _FtInputfieldTinyMCE = require(\"./FtInputfieldTinyMCE\");\nvar _FtInputfieldTinyMCEInline = require(\"./FtInputfieldTinyMCEInline\");\nvar _FtInputfieldPageName = _interopRequireDefault(require(\"./FtInputfieldPageName\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Orchestration for initializing all multilanguage inputfields on a page\n * @return {Object}   Public interface methods\n */\nconst FtInputfields = function () {\n  /**\n   * Selector used to find translatable Inputfields\n   * All inputfield containers on the page that are multilanguage have this class\n   * @type {String}\n   */\n  const langInputfieldClass = '.hasLangTabs';\n\n  /**\n   * Initializes multilanguage fields if present on page\n   * @return {void}\n   */\n  const init = function () {\n    const langInputfieldContainers = document.querySelectorAll(langInputfieldClass);\n\n    // Only init if there are multi-language Inputfields on the page\n    if (langInputfieldContainers.length) {\n      initInputfields(langInputfieldContainers);\n      initInputfieldsOnInsertion();\n      initPageNameInputfields();\n    }\n  };\n\n  /**\n   * Initializes multiple multilanguage fields in a collection of elelents\n   * @param  {NodeList} langInputfieldContainers\n   * @return {Void}\n   */\n  const initInputfields = langInputfieldContainers => {\n    for (let langInputfieldContainer of langInputfieldContainers) {\n      initInputfield(langInputfieldContainer);\n    }\n  };\n\n  /**\n   * Initializes the field within a container\n   * @param  {Element} langInputfieldContainer Element containing inputfield\n   * @return {void}\n   */\n  const initInputfield = langInputfieldContainer => {\n    // Do not initialize fields that have already been initialized\n    // Do not initialized fields that are a list element and not an Inputfield themselves\n    if (!fieldIsInitialized(langInputfieldContainer) && !langInputfieldContainer.classList.contains('InputfieldItemList')) {\n      let inputfield = getFtInputfieldObject(langInputfieldContainer);\n      setFieldIsInitialized(langInputfieldContainer);\n      if (!inputfield) {\n        return;\n      }\n    }\n  };\n\n  /**\n   * Initializes a FtInputfield object instance by type\n   * Order of checks is important Complex fields should be cased higher\n   * Fields with lower complexity should be cased last to prevent catching simple elements in\n   * complex fields that use simple inputs\n   * @param  {Element} langInputfieldContainers\n   * @return {?Object}\n   */\n  const getFtInputfieldObject = langInputfieldContainer => {\n    switch (true) {\n      case (0, _FtInputfieldTable.FtIsInputfieldTable)(langInputfieldContainer):\n        // Initialize all new fields which have a different class than top-level fields\n        initInputfields(langInputfieldContainer.querySelectorAll('.langTabs'));\n        break;\n      case (0, _FtInputfieldCKEditor.FtIsInputfieldCKEditor)(langInputfieldContainer):\n        return new _FtInputfieldCKEditor.FtInputfieldCKEditor(langInputfieldContainer);\n      case (0, _FtInputfieldCKEditorInline.FtIsInputfieldCKEditorInline)(langInputfieldContainer):\n        return new _FtInputfieldCKEditorInline.FtInputfieldCKEditorInline(langInputfieldContainer);\n      case (0, _FtInputfieldTinyMCE.FtIsInputfieldTinyMCE)(langInputfieldContainer):\n        return new _FtInputfieldTinyMCE.FtInputfieldTinyMCE(langInputfieldContainer);\n      case (0, _FtInputfieldTinyMCEInline.FtIsInputfieldTinyMCEInline)(langInputfieldContainer):\n        return new _FtInputfieldTinyMCEInline.FtInputfieldTinyMCEInline(langInputfieldContainer);\n      case (0, _FtInputfieldTextarea.FtIsInputfieldTextarea)(langInputfieldContainer):\n        return new _FtInputfieldTextarea.FtInputfieldTextarea(langInputfieldContainer);\n      case (0, _FtInputfieldText.FtIsInputfieldText)(langInputfieldContainer):\n        return new _FtInputfieldText.FtInputfieldText(langInputfieldContainer);\n      default:\n        console.warn('Fluency does not recognize this inputfield, translation is not available', langInputfieldContainer);\n        return null;\n    }\n  };\n\n  /**\n   * This sets a mutation observer on the main content area of the edit page that will initialize\n   * new fields that may be added on focus or triggered by AJAX actions\n   *\n   * @return {void}\n   */\n  const initInputfieldsOnInsertion = () => {\n    const parentNode = document.getElementById('pw-content-body');\n    new MutationObserver((mutations, observer) => {\n      for (let mutation of mutations) {\n        let targetEl = mutation.target;\n        const foundEls = targetEl.querySelectorAll(langInputfieldClass);\n        if (foundEls.length) {\n          initInputfields(foundEls);\n        }\n      }\n    }).observe(parentNode, {\n      childList: true,\n      subtree: true\n    });\n  };\n\n  /**\n   * Initializes page name fields. Must be initialized separately since they do not\n   * follow the structure of other inputfields\n   * @return {void}\n   */\n  const initPageNameInputfields = () => {\n    const pageNameInputfields = document.querySelectorAll('.InputfieldPageName');\n    [...pageNameInputfields].forEach(pageNameInputfield => {\n      if (pageNameInputfield && !fieldIsInitialized(pageNameInputfield)) {\n        let inputfield = new _FtInputfieldPageName.default(pageNameInputfield);\n        setFieldIsInitialized(pageNameInputfield);\n        if (!inputfield) {\n          return;\n        }\n      }\n    });\n  };\n\n  /**\n   * Checks if a given field has been initialized\n   * @param  {DOMNode} langInputfieldContainer Container element for multi-language field\n   * @return {bool}\n   */\n  const fieldIsInitialized = langTabContainer => langTabContainer.hasAttribute(_FtConfig.default.fieldInitializedAttr);\n\n  /**\n   * Marks a field as initialized by adding a data attribute to the container\n   * @param  {DOMNode} langTabContainer Container element for multi-language field\n   * @return {void}\n   */\n  const setFieldIsInitialized = langTabContainer => langTabContainer.setAttribute(_FtConfig.default.fieldInitializedAttr, '');\n\n  /**\n   * This updates the value of an input element such as text or textarea\n   * When a field is updated it must be blurred so that it is recognized as having been changed and\n   * the \"unsaved changes\" alert will be shown if navigating away from a page without saving\n   * @param  {HTMLElement} inputEl Element\n   * @param  {string}      value\n   * @return {void}\n   */\n  const updateValue = (inputEl, value) => {\n    inputEl.focus();\n    inputEl.value = value;\n    inputEl.blur();\n  };\n  return {\n    init,\n    updateValue,\n    fieldIsInitialized\n  };\n}();\nvar _default = FtInputfields;\nexports.default = _default;\n\n},{\"../global/FtConfig\":3,\"../global/FtTools\":4,\"./FtInputfieldCKEditor\":5,\"./FtInputfieldCKEditorInline\":6,\"./FtInputfieldPageName\":7,\"./FtInputfieldTable\":8,\"./FtInputfieldText\":9,\"./FtInputfieldTextarea\":10,\"./FtInputfieldTinyMCE\":11,\"./FtInputfieldTinyMCEInline\":12}],14:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Creates, inserts, and controls the actions the activity overlay for the provided\n * targetContainer\n * @param {object} targetContainer An instantiated object for an inputfield or fieldset\n * @param {string} type       The type of activity for this overlay. 'translate' or 'update'\n */\nconst FtActivityOverlay = function (targetContainer) {\n  var _this = this;\n  let activityType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'translating';\n  const elClasses = {\n    parent: 'ft-activity-overlay-container',\n    overlay: 'ft-activity-overlay',\n    error: 'error',\n    message: 'message',\n    flash: 'flash',\n    success: 'success',\n    activity: 'activity',\n    visible: 'visible',\n    activityContainer: 'ft-activity',\n    activityStaticText: 'ft-activity-text',\n    activityAnimationContainer: 'ft-activity-animation-container',\n    activityAnimationItem: 'ft-activity-animation-item',\n    messageContainer: 'ft-activity-message'\n  };\n\n  /**\n   * Will contain the activityOverlay Element for this targetContainer\n   * @type {Element}\n   */\n  let activityOverlay;\n\n  /**\n   * Will contain the message Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let messageContainer;\n\n  /**\n   * Will contain the animation container Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let activityContainer;\n\n  /**\n   * Control Methods\n   */\n\n  /**\n   * This shows the overlay's activity animation that was created at instantiation\n   * Must be manually hidden with the hide() method\n   *\n   * @return {void}\n   */\n  this.showActivity = () => {\n    this.setActivityActive();\n    this.setOverlayVisible();\n  };\n\n  /**\n   * Shows a message in the overlay (neutral background)\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showMessage = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;\n    _this.setMessageContent(message);\n    _this.setActivityInactive();\n    _this.setMessageActive();\n    _this.setOverlayVisible();\n    _this.hide(displayTime);\n  };\n\n  /**\n   * Shows a success message (success color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashSuccess = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n    _this.setSuccessActive();\n    _this.setFlashActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows a success message (error color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashError = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n    _this.setFlashActive();\n    _this.setErrorActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows an error message in a visible overlay (error background)\n   *\n   * @param  {String} message     Message to show in overlay error\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showError = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 7000;\n    _this.setErrorActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Hide an overlay immediately or after a preset amount of time\n   *\n   * @param {Number} delay Length of time in ms before hiding overlay\n   */\n  this.hide = function () {\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    setTimeout(() => {\n      _this.setOverlayInvisible();\n    }, delay);\n\n    // Ensures the animation is finished before modifying content\n    setTimeout(() => {\n      _this.setActivityInactive();\n      _this.setMessageInactive();\n      _this.setErrorInactive();\n      _this.setFlashInactive();\n      _this.setMessageContent('');\n    }, delay + 500);\n  };\n\n  /**\n   * Private Methods\n   */\n\n  /**\n   * Shows the activity element\n   *\n   * @access Private\n   */\n  this.setActivityActive = () => {\n    activityOverlay.classList.add(elClasses.activity);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setActivityInactive = () => {\n    activityOverlay.classList.remove(elClasses.activity);\n  };\n\n  /**\n   * Shows the message element\n   *\n   * @access Private\n   */\n  this.setMessageActive = () => {\n    activityOverlay.classList.add(elClasses.message);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setMessageInactive = () => {\n    activityOverlay.classList.remove(elClasses.message);\n  };\n\n  /**\n   * Sets the content of the overlay message\n   *\n   * @access Private\n   */\n  this.setMessageContent = content => {\n    messageContainer.innerText = content;\n  };\n\n  /**\n   * Adds flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashActive = content => {\n    activityOverlay.classList.add(elClasses.flash);\n  };\n\n  /**\n   * removes flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashInactive = content => {\n    activityOverlay.classList.remove(elClasses.flash);\n  };\n\n  /**\n   * Sets message to success\n   *\n   * @access Private\n   */\n  this.setSuccessActive = () => {\n    activityOverlay.classList.add(elClasses.success);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setSuccessInactive = () => {\n    activityOverlay.classList.remove(elClasses.success);\n  };\n\n  /**\n   * Sets message to error\n   *\n   * @access Private\n   */\n  this.setErrorActive = () => {\n    activityOverlay.classList.add(elClasses.error);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setErrorInactive = () => {\n    activityOverlay.classList.remove(elClasses.error);\n  };\n\n  /**\n   * Shows this activity overlay\n   *\n   * @access Private\n   */\n  this.setOverlayVisible = () => {\n    activityOverlay.classList.add(elClasses.visible);\n  };\n  this.setOverlayInvisible = () => {\n    activityOverlay.classList.remove(elClasses.visible);\n  };\n\n  /**\n   * Creates and returns an activity overlay element\n   *\n   * @return {HTMLElement}\n   */\n  this.create = () => {\n    activityOverlay = this.buildOverlayEl();\n    activityContainer = this.buildActivityEl();\n    messageContainer = this.buildMessageEl();\n    activityOverlay.appendChild(activityContainer);\n    activityOverlay.appendChild(messageContainer);\n    return activityOverlay;\n  };\n\n  /**\n   * Creates the parent overlay element\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildOverlayEl = () => {\n    const overlay = document.createElement('div');\n\n    // overlay.setAttribute('data-gradient-1', 'rgba(62, 185, 152, .85)');\n    overlay.setAttribute('class', elClasses.overlay);\n    return overlay;\n  };\n\n  /**\n   * Creates container for animation and contents of animation\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildActivityEl = () => {\n    let text = _FtConfig.default.getUiTextFor('activityOverlay')[activityType];\n    let activityAnimationContainer = document.createElement('div');\n    activityAnimationContainer.setAttribute('class', elClasses.activityAnimationContainer);\n\n    // Add all animation items to the animation container\n    activityAnimationContainer = text.animated.reduce((el, string) => {\n      let activityText = document.createElement('span');\n\n      // Add text items\n      activityText.setAttribute('class', elClasses.activityAnimationItem);\n      activityText.innerHTML = string;\n      el.appendChild(activityText);\n      return el;\n    }, activityAnimationContainer);\n\n    // Create static text element\n    let staticText = document.createElement('div');\n    staticText.setAttribute('class', elClasses.activityStaticText);\n    staticText.innerText = text.static;\n\n    // Create activity container and append children\n    activityContainer = document.createElement('div');\n    activityContainer.setAttribute('class', elClasses.activityContainer);\n    activityContainer.appendChild(staticText);\n    activityContainer.appendChild(activityAnimationContainer);\n    return activityContainer;\n  };\n\n  /**\n   * Builds the element that will hold messages in the overlay\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildMessageEl = () => {\n    messageContainer = document.createElement('div');\n    messageContainer.setAttribute('class', elClasses.messageContainer);\n    return messageContainer;\n  };\n  (() => {\n    const targetContainerContainer = targetContainer.getSelf();\n    activityOverlay = this.create();\n    targetContainerContainer.classList.add(elClasses.parent);\n    targetContainerContainer.appendChild(activityOverlay);\n  })();\n};\nvar _default = FtActivityOverlay;\nexports.default = _default;\n\n},{\"../global/FtConfig\":3}],15:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * Handles modifying the Fluency menu item\n * @return {object} Public methods\n */\nconst FtAdminMenu = function () {\n  /**\n   * Initializes module\n   * @return {void}\n   */\n  const init = () => {\n    convertFtAdminMenuToModal();\n  };\n\n  /**\n   * Finds and converts the Translation admin menu item to open in a modal\n   * rather than navigating to the page.\n   * @return {void}\n   */\n  const convertFtAdminMenuToModal = () => {\n    const adminNavItems = document.querySelectorAll('.pw-masthead .pw-primary-nav > li > a'),\n      urlParams = new URLSearchParams(window.location.search);\n\n    // We don't want to modify this menu item if we are on the Fluency config page\n    // because the modal behavior is not available\n    if (urlParams.get('name') === 'Fluency') {\n      return false;\n    }\n    adminNavItems.forEach((el, i) => {\n      let hrefSegments = el.href.split('/').filter(Boolean);\n      if (hrefSegments[hrefSegments.length - 1].includes('fluency')) {\n        el.href = el.href + '?modal=1';\n        el.classList.add('pw-modal-large');\n        el.classList.add('pw-modal');\n      }\n    });\n  };\n  return {\n    init: init\n  };\n}();\nvar _default = FtAdminMenu;\nexports.default = _default;\n\n},{}],16:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtTools = _interopRequireDefault(require(\"../global/FtTools\"));\nvar _Fluency = _interopRequireDefault(require(\"../global/Fluency\"));\nvar _FtUiElements = _interopRequireDefault(require(\"./FtUiElements\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * The translate button establishes the UI element used to trigger translations\n * by the user. It manages the translation process by displaying/hiding the\n * activity overlay, showing messages and errors, getting translations from\n * the Fluency API, and modifying content. This is done by manipulating the\n * inputfield and activityOverlay objects passed.\n */\n\nconst FtInputfieldTranslateButton = function (inputfield, inputContainers) {\n  /**\n   * Gets all localized strings from the FluencyConfig object\n   * @type {object}\n   */\n  const uiText = _FtConfig.default.getUiTextFor('inputfieldTranslateButtons');\n\n  /**\n   * Add\n   * @param  {string|int} languageId     ProcessWire language ID\n   * @param  {Element}    inputContainer Inputcontainer for this language\n   * @return {void}\n   */\n  this.addTranslateElements = (languageId, inputContainer) => {\n    const isTranslatable = _FtConfig.default.languageIsTranslatable(languageId);\n    const isDefaultLanguage = languageId == _FtConfig.default.getDefaultLanguage().id;\n\n    // Translatable, not default language\n    if (isTranslatable && !isDefaultLanguage) {\n      const {\n        button,\n        container\n      } = _FtUiElements.default.createTranslateButton(uiText.translateButton);\n      this.bindButton(button, _FtConfig.default.getLanguageForId(languageId));\n      inputContainer.appendChild(container);\n    }\n\n    // Translatable, default language\n    if (isTranslatable && isDefaultLanguage) {\n      inputContainer.appendChild(_FtUiElements.default.createStatusElement(uiText.translationReady));\n    }\n\n    // Not translatable\n    if (!isTranslatable) {\n      inputContainer.appendChild(_FtUiElements.default.createStatusElement(uiText.languageNotAvailable));\n    }\n  };\n\n  /**\n   * Binds a button for translation\n   * @param  {Element} buttonElement Element to bind translation action to\n   * @param  {Object} languageConfig Fluency language configuration object\n   * @return {Void}\n   */\n  this.bindButton = (buttonElement, languageConfig) => {\n    buttonElement.addEventListener('click', e => {\n      e.preventDefault();\n\n      // Try to get the inputfield activity overlay, fall back to retrieving by language ID where\n      // the inputfield element can delegate to a specific activity overlay located within it\n      const activityOverlay = inputfield.getActivityOverlay() ?? inputfield.getActivityOverlay(languageConfig.id);\n      activityOverlay.showActivity();\n      _Fluency.default.getTranslation(_FtConfig.default.getDefaultLanguage().engineLanguage.sourceCode, languageConfig.engineLanguage.targetCode, inputfield.getValueForDefaultLanguage()).then(result => {\n        if (result.error) {\n          inputfield.getActivityOverlay().showError(result.message);\n          return;\n        }\n        inputfield.setValueForLanguage(languageConfig.id, result.translations[0]);\n        activityOverlay.hide();\n      });\n    });\n  };\n\n  /**\n   * Init on object instantiation\n   */\n  (() => {\n    for (let languageId in inputContainers) {\n      this.addTranslateElements(languageId, inputContainers[languageId]);\n    }\n  })();\n};\nvar _default = FtInputfieldTranslateButton;\nexports.default = _default;\n\n},{\"../global/Fluency\":2,\"../global/FtConfig\":3,\"../global/FtTools\":4,\"./FtUiElements\":18}],17:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * A stateful function handling  behaviors for a language tab associated with a input container\n * contained within an Inputfield. An \"input container\" is the div that contains the label and\n * input/textarea/element (depending on Inputfield type) for a language\n * @param {Element} inputContainer Language\n */\nconst FtLanguageTab = function (inputContainer) {\n  /**\n   * Note\n   * @type {String}\n   */\n  const contentModifiedClass = 'ft-content-changed';\n\n  /**\n   * Cached associated tab for this input container\n   * @type {Element}\n   */\n  let languageTab = null;\n  this.getContentModifiedClass = () => contentModifiedClass;\n\n  /**\n   * Sets state of tab\n   * @param  {bool} modified Determines state of tab display\n   * @return {void}\n   */\n  this.setModifiedState = modified => modified ? this.setTabModified() : this.setTabUnmodified();\n  this.setTabModified = () => this.getLanguageTab().classList.add(contentModifiedClass);\n  this.setTabUnmodified = () => this.getLanguageTab().classList.remove(contentModifiedClass);\n  this.getLanguageTab = () => {\n    return languageTab ?? inputContainer.closest('.langTabs').querySelector(`.langTabLink[data-lang=\"${inputContainer.dataset.language}\"`);\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * @return {void}\n   */\n  (() => {\n    if (!inputContainer) {\n      return false;\n    }\n    languageTab = this.getLanguageTab();\n  })();\n};\nvar _default = FtLanguageTab;\nexports.default = _default;\n\n},{}],18:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtTools = _interopRequireDefault(require(\"../global/FtTools\"));\nvar _Fluency = _interopRequireDefault(require(\"../global/Fluency\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Creates common HTML elements\n *\n * @return {Object} Public methods\n */\nconst FtUiElements = function () {\n  /**\n   * @type {Object}\n   */\n  const elementClasses = {\n    translateButton: {\n      container: 'ft-translate-button-container',\n      button: 'ft-translate-button'\n    },\n    statusPlaceholder: {\n      container: 'ft-translation-status-container',\n      label: 'ft-translation-status'\n    },\n    icon: 'ft-icon'\n  };\n\n  /**\n   * Gets all localized strings from the FluencyConfig object\n   * These do nothing on their own and must be bound with any behavior after creation\n   *\n   * @type {object}\n   */\n  const uiText = _FtConfig.default.getUiTextFor('inputfieldTranslateButtons');\n\n  /**\n   * Creates a language fontawesome icon element\n   *\n   * @return {Element}\n   */\n  const createIcon = () => {\n    const icon = document.createElement('i');\n    icon.setAttribute('class', `${elementClasses.icon} fa fa-language`);\n    icon.setAttribute('title', uiText.poweredBy);\n    return icon;\n  };\n\n  /**\n   * Creates a status placeholder\n   *\n   * @return {Element}\n   */\n  const createStatusElement = text => {\n    const label = document.createElement('span');\n    label.setAttribute('class', elementClasses.statusPlaceholder.label);\n    label.innerText = text;\n    const container = document.createElement('div');\n    container.setAttribute('class', elementClasses.statusPlaceholder.container);\n    container.appendChild(createIcon());\n    container.appendChild(label);\n    return container;\n  };\n\n  /**\n   * Creates a translate button element\n   *\n   * @return {Object} Container element and Button element\n   */\n  const createTranslateButton = text => {\n    const button = document.createElement('button');\n    button.innerText = text;\n    button.setAttribute('class', elementClasses.translateButton.button);\n    const container = document.createElement('div');\n    container.setAttribute('class', elementClasses.translateButton.container);\n    const icon = document.createElement('i');\n    icon.setAttribute('class', 'ft-icon fa fa-language');\n    container.appendChild(createIcon());\n    container.appendChild(button);\n    return {\n      button,\n      container\n    };\n  };\n  return {\n    createStatusElement,\n    createTranslateButton,\n    createIcon,\n    elementClasses\n  };\n}();\nvar _default = FtUiElements;\nexports.default = _default;\n\n},{\"../global/Fluency\":2,\"../global/FtConfig\":3,\"../global/FtTools\":4}]},{},[1]);\n"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_FtInputfields","_interopRequireDefault","_FtAdminMenu","obj","__esModule","default","window","addEventListener","init","./inputfields/FtInputfields","./ui/FtAdminMenu","2","Object","defineProperty","value","_FtConfig","Fluency","errors","getUiTextFor","requestHeaders","requestType","X-Requested-With","getRequest","endpoint","responseHandler","fetch","method","cache","headers","then","parseResponse","catch","handleFetchError","deleteRequest","response","status","ok","json","error","console","message","returnObject","split","deleteTranslatableLanguagesCache","getApiEndpointFor","deleteTranslationCache","getAvailableLanguages","getTranslation","sourceLanguage","targetLanguage","content","let","options","arguments","undefined","caching","data","body","JSON","stringify","getUsage","./FtConfig","3","FtConfig","config","ProcessWire","fluency","localizedStrings","localization","strings","activityOverlay","languageSelect","inputfieldTranslateButtons","standaloneTranslator","usage","endpoints","languages","apiEndpoints","translatableLanguagesCache","test","translation","translationCache","configuredLanguages","unconfiguredLanguages","getConfiguredLanguages","getUnconfiguredLanguages","getEngineInfo","engine","fieldInitializedAttr","key","getDefaultLanguage","reduce","defaultLang","lang","getEngineProvidesUsageData","providesUsageData","getLanguageCount","getLanguageForId","pwLanguageId","parseInt","match","language","id","languageIsTranslatable","languageId","includes","moduleShouldInitialize","4","getPageId","urlParams","URLSearchParams","location","search","get","tagElement","element","text","addRandomId","tagDiv","document","createElement","setAttribute","Array","map","Math","random","toString","join","innerText","appendChild","pageIdIs","5","FtIsInputfieldCKEditor","FtInputfieldCKEditor","_FtActivityOverlay","_FtInputfieldTranslateButton","_FtLanguageTab","inputfield","querySelector","initValues","changedValues","languageTabs","inputContainers","editorInstances","defaultLanguageInstanceId","this","getActivityOverlay","getSelf","getValueForDefaultLanguage","getValueForLanguage","getEditorInstanceForLanguage","getData","setValueForLanguage","instance","setData","fire","contentHasChanged","ckeditorSelector","hasOwn","createCKEditorSelector","CKEDITOR","instances","getInputContainers","querySelectorAll","forEach","el","dataset","registerInputEventListener","on","setModifiedState","allInputContainers","values","replace","inputContainer","../global/FtConfig","../ui/FtActivityOverlay","../ui/FtInputfieldTranslateButton","../ui/FtLanguageTab","./FtInputfields","6","FtIsInputfieldCKEditorInline","FtInputfieldCKEditorInline","contentElements","ckeditorInstance","getContentElementForLanguage","innerHTML","contentElement","setValue","dispatchEvent","Event","getInputContainerForLanguage","keys","registerUpdateEvent","MutationObserver","mutations","observer","mutation","target","observe","childList","7","createActivityOverlay","languageInput","languageFields","contentModifiedClass","getContentModifiedClass","activityOverlays","getFieldForLanguage","field","updateValue","name","classList","add","remove","8","FtIsInputfieldTable","contains","9","FtIsInputfieldText","FtInputfieldText","10","FtIsInputfieldTextarea","FtInputfieldTextarea","11","FtIsInputfieldTinyMCE","FtInputfieldTinyMCE","textareas","tinymceInstance","getTinymceInstanceForLanguage","getContent","getTextareaForLanguage","setContent","tinymceSelector","createTinymceSelector","tinymce","bindTinymceEvents","initTinymceInstanceOnCreation","disconnect","initAll","setTimeout","12","FtIsInputfieldTinyMCEInline","FtInputfieldTinyMCEInline","13","_FtInputfieldCKEditor","_FtInputfieldCKEditorInline","_FtInputfieldTable","_FtInputfieldText","_FtInputfieldTextarea","_FtInputfieldTinyMCE","_FtInputfieldTinyMCEInline","_FtInputfieldPageName","FtInputfields","langInputfieldClass","initInputfields","langInputfieldContainers","langInputfieldContainer","initInputfield","fieldIsInitialized","warn","setFieldIsInitialized","langTabContainer","hasAttribute","parentNode","getElementById","foundEls","subtree","pageNameInputfield","inputEl","focus","blur","../global/FtTools","./FtInputfieldCKEditor","./FtInputfieldCKEditorInline","./FtInputfieldPageName","./FtInputfieldTable","./FtInputfieldText","./FtInputfieldTextarea","./FtInputfieldTinyMCE","./FtInputfieldTinyMCEInline","14","targetContainer","_this","activityType","elClasses","parent","overlay","flash","success","activity","visible","activityContainer","activityStaticText","activityAnimationContainer","activityAnimationItem","messageContainer","showActivity","setActivityActive","setOverlayVisible","showMessage","displayTime","setMessageContent","setActivityInactive","setMessageActive","hide","flashSuccess","setSuccessActive","setFlashActive","flashError","setErrorActive","showError","delay","setOverlayInvisible","setMessageInactive","setErrorInactive","setFlashInactive","setSuccessInactive","create","buildOverlayEl","buildActivityEl","buildMessageEl","animated","string","activityText","staticText","static","targetContainerContainer","15","convertFtAdminMenuToModal","adminNavItems","hrefSegments","href","filter","Boolean","16","_Fluency","_FtUiElements","uiText","addTranslateElements","button","container","isTranslatable","isDefaultLanguage","createTranslateButton","translateButton","bindButton","createStatusElement","translationReady","languageNotAvailable","buttonElement","languageConfig","preventDefault","engineLanguage","sourceCode","targetCode","result","translations","../global/Fluency","./FtUiElements","17","languageTab","modified","setTabModified","setTabUnmodified","getLanguageTab","closest","18","FtUiElements","elementClasses","statusPlaceholder","label","icon","createIcon","poweredBy"],"mappings":"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"}