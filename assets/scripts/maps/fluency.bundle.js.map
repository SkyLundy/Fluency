{"version":3,"file":"../fluency.bundle.js","sources":["fluency.bundle.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _FtInputfields = _interopRequireDefault(require(\"./inputfields/FtInputfields\"));\nvar _FtAdminMenu = _interopRequireDefault(require(\"./ui/FtAdminMenu\"));\nvar _FtConfig = _interopRequireDefault(require(\"./global/FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n// Each module has its own checks to determine if they should initialize\nwindow.addEventListener('load', e => {\n  if (_FtConfig.default.moduleShouldInitialize()) {\n    _FtAdminMenu.default.init();\n    _FtInputfields.default.init();\n  }\n});\n\n},{\"./global/FtConfig\":3,\"./inputfields/FtInputfields\":12,\"./ui/FtAdminMenu\":14}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"./FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Core module interface\n * Handles all interaction with the ProcessWire module backend\n * @return {object} Public interfaces\n */\n\nconst Fluency = function () {\n  /**\n   * Localized error strings\n   * @type {Object}\n   */\n  const errors = _FtConfig.default.getUiTextFor('errors');\n\n  /**\n   * Data Request Methods\n   */\n\n  /**\n   * Gets a translation from the Fluency module\n   * @param  {String}       sourceLanguage ISO language code\n   * @param  {String}       targetLanguage ISO langauge code\n   * @param  {String|Array} content        Content to translate\n   * @param  {Array}        options        Additional options\n   * @param  {Bool|null}         caching        Enable/disable caching\n   * @return {Promise}\n   */\n  const getTranslation = function (sourceLanguage, targetLanguage, content) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let caching = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    return postRequest(_FtConfig.default.getApiEndpointFor('translation'), {\n      sourceLanguage: sourceLanguage,\n      targetLanguage: targetLanguage,\n      content: content,\n      options: options,\n      caching: caching\n    }, response => {\n      return response;\n    });\n  };\n\n  /**\n   * Gets the current translation service API usage\n   * @return {Promise}\n   */\n  const getUsage = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('usage'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Get all language available for translation. Provides source/target lists from the translation\n   * service API\n   * @return {Promise}\n   */\n  const getAvailableLanguages = () => {\n    return getRequest(_FtConfig.default.getApiEndpointFor('languages'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear all cached translations\n   * @return {Promise}\n   */\n  const deleteTranslationCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translationCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * Clear cached list of translatable languages\n   * @return {Promise}\n   */\n  const deleteTranslatableLanguagesCache = () => {\n    return deleteRequest(_FtConfig.default.getApiEndpointFor('translatableLanguagesCache'), response => {\n      return response;\n    });\n  };\n\n  /**\n   * HTTP Requests\n   */\n\n  /**\n   * Create headers for AJAX requests\n   * @return {Object}\n   */\n  const requestHeaders = requestType => {\n    const requestHeaders = {\n      'X-Requested-With': 'XMLHttpRequest'\n    };\n    if (requestType === 'GET') {\n      requestHeaders['Accept'] = 'application/json';\n    }\n    if (requestType === 'POST') {\n      requestHeaders['Content-Type'] = 'application/json';\n    }\n    return requestHeaders;\n  };\n\n  /**\n   * Executes a POST request to a given endpoint\n   * @param  {String}    endpoint URL for AJAX request\n   * @param  {Object}    data     Data for request\n   * @param  {Callable}  data     Function to handle response body\n   * @return {Promise}\n   */\n  const postRequest = (endpoint, data, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'POST',\n      cache: 'no-store',\n      headers: requestHeaders,\n      body: JSON.stringify(data)\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a GET request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const getRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'GET',\n      cache: 'no-store',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Executes a DELETE request to a given endpoint\n   * @param  {String}   endpoint        URL for AJAX request\n   * @param  {Callable} responseHandler Function to handle response body\n   * @return {Promise}\n   */\n  const deleteRequest = (endpoint, responseHandler) => {\n    return fetch(endpoint, {\n      method: 'DELETE',\n      headers: requestHeaders('GET')\n    }).then(parseResponse).then(responseHandler).catch(handleFetchError);\n  };\n\n  /**\n   * Parses response\n   * @param  {Object} response Fluency API response\n   * @return {Object|Void}\n   * @throws Error\n   */\n  const parseResponse = response => {\n    if (response.status === 204) {\n      return response;\n    }\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error();\n  };\n\n  /**\n   * Parses and returns results for a fetch error\n   * These are network level errors that occur between ProcessWire and the hosting server\n   * Any translation or service errors will be located within the response body itself\n   * @param  {Error} error Fetch API error object\n   * @return {Object}\n   */\n  const handleFetchError = error => {\n    console.error('[Fluency module API failure]', error.message);\n    const returnObject = {\n      error: null,\n      message: null\n    };\n    switch (error.message.split(' ')[0]) {\n      case 'NetworkError':\n        returnObject.error = 'FLUENCY_CLIENT_DISCONNECTED';\n        returnObject.message = errors['FLUENCY_CLIENT_DISCONNECTED'];\n        break;\n      default:\n        returnObject.error = 'UNKNOWN_ERROR';\n        returnObject.message = errors['UNKNOWN_ERROR'];\n        break;\n    }\n    return returnObject;\n  };\n  return {\n    deleteTranslatableLanguagesCache,\n    deleteTranslationCache,\n    getAvailableLanguages,\n    getTranslation,\n    getUsage\n  };\n}();\nvar _default = Fluency;\nexports.default = _default;\n\n},{\"./FtConfig\":3}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * This provides access methods to get module configuration values\n * @return {Object}  Public methods\n */\nconst FtConfig = function () {\n  // Public properties\n\n  const fieldInitializedAttr = 'data-ft-initialized';\n  const translationActionTypes = {\n    each: 'translate_each_language',\n    all: 'translate_to_all_languages',\n    both: 'both'\n  };\n\n  // Private properties\n\n  /**\n   * Holds the data passed from the Fluency module\n   * @access Private\n   * @type {Object}\n   */\n  const config = ProcessWire.config.fluency;\n\n  /**\n   * All UI strings\n   * @type {Object}\n   */\n  const localizedStrings = config.localization;\n\n  /**\n   * Classes for elements created in UI\n   * @type {Object}\n   */\n  const elementClasses = {\n    translateButton: {\n      container: 'ft-translate-button-container',\n      button: 'ft-translate-button'\n    },\n    languageTranslator: {\n      container: 'Inputfield InputfieldHeaderHidden',\n      content: 'InputfieldContent ft-language-translator-button-content',\n      translateButton: 'ft-translate-all-button',\n      sourceLanguageSelect: 'uk-select ft-source-language-select',\n      sourceLanguageSelectLabel: 'ft-source-language-select-label'\n    },\n    statusPlaceholder: {\n      container: 'ft-translation-status-container',\n      label: 'ft-translation-status'\n    },\n    icon: 'ft-icon'\n  };\n\n  /**\n   * Objects interface with the Fluency config object so that changes to the object\n   * structure from the back end do not break the UI. Use the public methods below\n   * to access ProcessWire.config.fluency properties and data\n   */\n\n  /**\n   * Localized strings keyed sets\n   * @type {Object}\n   */\n  const strings = {\n    activityOverlay: localizedStrings.activityOverlay,\n    languageSelect: localizedStrings.languageSelect,\n    inputfieldTranslateButtons: localizedStrings.inputfieldTranslateButtons,\n    standaloneTranslator: localizedStrings.standaloneTranslator,\n    usage: localizedStrings.usage,\n    errors: localizedStrings.errors,\n    languageTranslator: localizedStrings.languageTranslator\n  };\n\n  /**\n   * Fluency API keyed URLs\n   * @type {Object}\n   */\n  const endpoints = {\n    languages: config.apiEndpoints.languages,\n    translatableLanguagesCache: config.apiEndpoints.translatableLanguagesCache,\n    test: config.apiEndpoints.test,\n    translation: config.apiEndpoints.translation,\n    translationCache: config.apiEndpoints.translationCache,\n    usage: config.apiEndpoints.usage\n  };\n\n  /**\n   * Contains all of the Fluency configured langauges from the module\n   * @type {Array}\n   */\n  const configuredLanguages = config.configuredLanguages;\n\n  /**\n   * Contains an array of ProcessWire language IDs not configured in Fluency\n   * @type {Array}\n   */\n  const unconfiguredLanguages = config.unconfiguredLanguages;\n\n  // Public methods\n\n  /**\n   * Fluency REST API\n   */\n  const getApiEndpointFor = key => endpoints[key];\n\n  /**\n   * Languages\n   */\n\n  /**\n   * Get all configured languages\n   * @return {object}\n   */\n  const getConfiguredLanguages = () => configuredLanguages;\n\n  /**\n   * Returns ProcessWire's default language\n   * @return {object}\n   */\n  const getDefaultLanguage = () => getConfiguredLanguages().reduce((defaultLang, lang) => lang.default ? lang : defaultLang, null);\n\n  /**\n   * Determines if the language with a given ProcessWire ID can be translated\n   * @param  {int|string} languageId ProcessWire language ID\n   * @return {bool}\n   */\n  const languageIsTranslatable = languageId => !getUnconfiguredLanguages().includes(parseInt(languageId, 10));\n\n  /**\n   * Get all languages not configured in Fluency\n   * @return {object}\n   */\n  const getUnconfiguredLanguages = () => unconfiguredLanguages;\n\n  /**\n   * Gets total count of configured and unconfigured languages\n   * @return {int}\n   */\n  const getLanguageCount = () => getConfiguredLanguages().length + getUnconfiguredLanguages().length;\n\n  /**\n   * Get a configured language by it's ProcessWire ID\n   * @param  {string|int} pwLanguageId ProcessWire language ID\n   * @return {object}\n   */\n  const getLanguageForId = pwLanguageId => {\n    pwLanguageId = parseInt(pwLanguageId, 10);\n    return getConfiguredLanguages().reduce((match, language) => language.id === pwLanguageId ? language : match, null);\n  };\n\n  /**\n   * Localization\n   */\n\n  /**\n   * Accessor method for localized UI strings\n   * @param  {string} key Object key\n   * @return {string}\n   */\n  const getUiTextFor = key => strings[key];\n\n  /**\n   * Module Configuration/State\n   */\n\n  /**\n   * Determines if Fluency JS should initialize based on whether languages have\n   * been configured\n   * @return {bool}\n   */\n  const moduleShouldInitialize = () => getConfiguredLanguages().length > 1;\n\n  /**\n   * Returns the translation engine config object for the engine configured in Fluency\n   * @return {object|null}\n   */\n  const getEngineInfo = () => config.engine;\n\n  /**\n   * Does this engine provide usage data?\n   * @return {bool}\n   */\n  const getEngineProvidesUsageData = () => getEngineInfo().providesUsageData;\n\n  /**\n   * Gets the type of translation action chosen in the Flunecy module config\n   * @return {string}\n   */\n  const getTranslationAction = () => config.interface.inputfieldTranslationAction;\n\n  /**\n   * The attribute added to individual field elements where translation has been disabled\n   * @return {string}\n   */\n  const getTranslationDisabledFieldAttribute = () => `[${config.interface.translationDisabledFieldAttr}]`;\n\n  /**\n   * Class names added to UI components\n   * @param  {string} element The type of component\n   * @return {string}\n   */\n  const getElementClassesFor = element => elementClasses[element];\n  return {\n    fieldInitializedAttr,\n    getApiEndpointFor,\n    getConfiguredLanguages,\n    getDefaultLanguage,\n    getElementClassesFor,\n    getEngineInfo,\n    getEngineProvidesUsageData,\n    getLanguageCount,\n    getLanguageForId,\n    getTranslationAction,\n    getTranslationDisabledFieldAttribute,\n    getUiTextFor,\n    getUnconfiguredLanguages,\n    languageIsTranslatable,\n    moduleShouldInitialize,\n    translationActionTypes\n  };\n}();\nvar _default = FtConfig;\nexports.default = _default;\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldCKEditor = exports.FtInputfieldCKEditor = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if a given inputfield contains a regular CKEditor instance\n * @param  {Element} inputfield Inputfield (.langTabs) element\n * @return {Bool}\n */\nconst FtIsInputfieldCKEditor = inputfield => !!inputfield.querySelector('.InputfieldCKEditorNormal');\n\n/**\n * Handles translations for CKEditor Inputfields\n * @return {object}  Public methods\n */\nexports.FtIsInputfieldCKEditor = FtIsInputfieldCKEditor;\nconst FtInputfieldCKEditor = function (inputfield) {\n  /**\n   * Contains values for all fields/languages keyed by ProcessWire language ID.\n   * Populated on object instantiation\n   *\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when they change keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {String} Inputfield content\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * Will contain FtLanguageTab object for each language keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type     {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all language input containers keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type {Object}\n   */\n  const inputContainers = {};\n\n  /**\n   * Will contain all CKEditor instances\n   * @property {String} ProcessWire Language ID\n   * @value    {CKEditor|null}\n   * @type     {Object}\n   */\n  const editorInstances = {};\n\n  /**\n   * Will contain the base CKEditor instance ID that can be used to get the default CKEditor instance\n   * using the CKEditor API, or another instance by modifying this one.\n   * Set on FtInputfieldCKEditor instantiation\n   * @type {?String}\n   */\n  let defaultLanguageInstanceId = null;\n\n  /**\n   * Activity overlay object, set on instantiation\n   *\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /**\n   * Gets existing or instantiates a new activity overlay\n   *\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @access public\n   * @param  {Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => this.getEditorInstanceForLanguage(languageId).getData();\n\n  /**\n   * @access public\n   * @param  {Int}    languageId ProcessWire language ID\n   * @param  {Mixed}  value      Value to insert into field\n   * @return {Bool}              Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const instance = this.getEditorInstanceForLanguage(languageId);\n    instance.setData(value);\n    instance.fire('change');\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * Attempts to get the CKEditor instance for a given language ID. This method should\n   * be used exclusively to get instances as it also sets event listeners for content\n   * changes if they have been instantiated after FtInputfieldCKEditor has loaded\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {?CKEditor}\n   */\n  this.getEditorInstanceForLanguage = languageId => {\n    if (Object.hasOwn(editorInstances, languageId) && !!editorInstances[languageId]) {\n      return editorInstances[languageId];\n    }\n    const ckeditorSelector = this.createCKEditorSelector(languageId);\n    editorInstances[languageId] = CKEDITOR.instances[ckeditorSelector];\n    return editorInstances[languageId];\n  };\n\n  /**\n   * Creates a CKEditor ID used to get instances by language\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {String}\n   */\n  this.createCKEditorSelector = languageId => {\n    if (languageId == _FtConfig.default.getDefaultLanguage().id) {\n      return defaultLanguageInstanceId;\n    }\n    return `${defaultLanguageInstanceId}__${languageId}`;\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    this.getSelf().querySelectorAll('[data-language]').forEach(el => {\n      inputContainers[el.dataset.language] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * @access private\n   * @param  {Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Registers the event listener that watches for content changes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getEditorInstanceForLanguage(languageId).on('change', e => {\n      changedValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Initialized the uninitialized\n   * @access private\n   * @return {void}\n   */\n  this.initContainers = () => {\n    const allInputContainers = this.getInputContainers();\n    defaultLanguageInstanceId = Object.values(allInputContainers)[0].id.replace('langTab_', '');\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      editorInstances[languageId] = this.getEditorInstanceForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      this.registerInputEventListener(languageId);\n    }\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  };\n\n  /**\n   * Init on object instantiation\n   * @access private\n   * @return {Void}\n   */\n  (() => {\n    if (CKEDITOR === undefined) {\n      console.error('CKEditor was not found by Fluency, translation unavailable');\n      return;\n    }\n\n    // CKEditor experiences a delay between being added to the DOM and a ready state in some\n    // situations, notably after AJAX insertion. This was a lot easier than attempting to use the\n    // CKEditor events API which fired off more events than editors\n    setTimeout(this.initContainers, 50);\n  })();\n};\nexports.FtInputfieldCKEditor = FtInputfieldCKEditor;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":13,\"../ui/FtInputfieldTranslateButton\":15,\"../ui/FtLanguageTab\":16,\"./FtInputfields\":12}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldCKEditorInline = exports.FtInputfieldCKEditorInline = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if a given inputfield contains an inline CKEditor instance\n * @param  {Element} inputfield Inputfield (.langTabs) element\n * @return {Bool}\n */\nconst FtIsInputfieldCKEditorInline = inputfield => !!inputfield.querySelector('.InputfieldCKEditorInline');\n\n/**\n * Handles translations for CKEditor Inputfields\n * @return {object}  Public methods\n */\nexports.FtIsInputfieldCKEditorInline = FtIsInputfieldCKEditorInline;\nconst FtInputfieldCKEditorInline = function (inputfield) {\n  /**\n   * Contains values for all fields/languages\n   * Populated on FtInputfieldCKEditorInline instantiation\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when they change keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {String} Inputfield content\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * Will contain FtLanguageTab object for each language keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type     {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all language input containers keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type {Object}\n   */\n  const inputContainers = {};\n\n  /**\n   * Will contain all CKEditor instances\n   * @property {String} ProcessWire Language ID\n   * @value    {CKEditor|null}\n   * @type     {Object}\n   */\n  const editorInstances = {};\n\n  /**\n   * Will contain all elements that the inline editor uses for content\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const contentElements = {};\n\n  /**\n   * Will contain the base CKEditor instance ID that can be used to get the default CKEditor instance\n   * using the CKEditor API, or another instance by modifying this one.\n   * Set on FtInputfieldCKEditor instantiation\n   * @type {?String}\n   */\n  let defaultLanguageInstanceId = null;\n\n  /**\n   * Activity overlay object, set on instantiation\n   *\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /**\n   * Gets existing or instantiates a new activity overlay\n   *\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * Attempts to get the value for a language via the CKEditor API, falls back to directly getting\n   * the content of the content element\n   * @access public\n   * @param  {Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => {\n    const ckeditorInstance = this.getEditorInstanceForLanguage(languageId);\n    if (ckeditorInstance) {\n      return ckeditorInstance.getData();\n    }\n    return this.getContentElementForLanguage(languageId).innerHTML;\n  };\n\n  /**\n   * @access public\n   * @param  {Int}    languageId ProcessWire language ID\n   * @param  {Mixed}  value      Value to insert into field\n   * @return {Bool}              Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const instance = this.getEditorInstanceForLanguage(languageId);\n    const contentElement = this.getContentElementForLanguage(languageId);\n    instance ? instance.setValue(value) : contentElement.innerHTML = value;\n    contentElement.dispatchEvent(new Event('input'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * Attempts to get the CKEditor instance for a given language ID. This method should\n   * be used exclusively to get instances as it also sets event listeners for content\n   * changes if they have been instantiated after FtInputfieldCKEditor has loaded\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {?CKEditor}\n   */\n  this.getEditorInstanceForLanguage = languageId => {\n    if (Object.hasOwn(editorInstances, languageId) && !!editorInstances[languageId]) {\n      return editorInstances[languageId];\n    }\n    editorInstances[languageId] = CKEDITOR.instances[this.createCKEditorSelector(languageId)];\n    return editorInstances[languageId];\n  };\n\n  /**\n   * Gets the content element that CKEditor uses to store the field content\n   * Ensures memoization\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getContentElementForLanguage = languageId => {\n    if (Object.hasOwn(contentElements, languageId)) {\n      return contentElements[languageId];\n    }\n    contentElements[languageId] = this.getInputContainerForLanguage(languageId).querySelector('.InputfieldCKEditorInlineEditor');\n    return contentElements[languageId];\n  };\n\n  /**\n   * Creates a CKEditor ID used to get instances by language\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {String}\n   */\n  this.createCKEditorSelector = languageId => {\n    if (languageId == _FtConfig.default.getDefaultLanguage().id) {\n      return defaultLanguageInstanceId;\n    }\n    return `${defaultLanguageInstanceId}__${languageId}`;\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    if (Object.keys(inputContainers).length === _FtConfig.default.getLanguageCount()) {\n      return inputContainers;\n    }\n    this.getSelf().querySelectorAll('[data-language]').forEach(el => {\n      inputContainers[el.dataset.language] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * Gets a specific input container\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getInputContainerForLanguage = languageId => {\n    if (Object.hasOwn(inputContainers, languageId)) {\n      return inputContainers[languageId];\n    }\n    inputContainers[languageId] = inputfield.querySelector(`[data-language=\"${languageId}\"]`);\n    return inputContainers[languageId];\n  };\n\n  /**\n   * @access private\n   * @param  {Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Creates a MutationObserver that will detect when the content has changed for a given content\n   * element. When content is changed, is will mock an 'input' even that an eventListener will\n   * respond to\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerUpdateEvent = languageId => {\n    const contentElement = this.getContentElementForLanguage(languageId);\n    new MutationObserver((mutations, observer) => {\n      for (let mutation of mutations) {\n        mutation.target.dispatchEvent(new Event('input'));\n      }\n    }).observe(contentElement, {\n      childList: true\n    });\n  };\n\n  /**\n   * Registers an event listener that will respond to any 'input' changes in a\n   * content element\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getContentElementForLanguage(languageId).addEventListener('input', e => {\n      changedValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Init on object instantiation\n   * @access private\n   * @return {Void}\n   */\n  (() => {\n    if (CKEDITOR === undefined) {\n      console.error('CKEditor was not found by Fluency, translation unavailable');\n      return null;\n    }\n    const allInputContainers = this.getInputContainers();\n    defaultLanguageInstanceId = Object.values(allInputContainers)[0].id.replace('langTab_', '');\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      editorInstances[languageId] = this.getEditorInstanceForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      this.registerInputEventListener(languageId);\n    }\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldCKEditorInline = FtInputfieldCKEditorInline;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":13,\"../ui/FtInputfieldTranslateButton\":15,\"../ui/FtLanguageTab\":16,\"./FtInputfields\":12}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Handles IO operations for a multilanguage InputfieldPageName element\n * The InputfieldPageName element has special considerations compared to other fields as they do not\n * have the same markup structure.\n * Some actions are internalized here, such as\n * @param {Element} inputfield The Inputfield .InputfieldPageName container\n */\nconst FtInputfieldPageName = function (inputfield) {\n  /**\n   * Page-load values for all fields/languages\n   * Populated on object instantiation\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when content is modified\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * FtLanguageTab objects for each language\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all elements containing language inputs\n   * @property {String} ProcessWire Language ID\n   * @type {NodeList}\n   */\n  const inputContainers = {};\n\n  /**\n   * Text input fields\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const languageFields = {};\n  let contentModifiedClass = new _FtLanguageTab.default().getContentModifiedClass();\n\n  /**\n   * Activity overlays by language IDs\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlays = {};\n\n  /*\n   * Return null to signal that the overlay should be by language ID\n   *\n   * @access public\n   * @return {Object|Null}\n   */\n  this.getActivityOverlay = languageId => {\n    if (!languageId) {\n      return null;\n    }\n    return activityOverlays[languageId].getActivityOverlay();\n  };\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @access public\n   * @param  {String|Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => this.getFieldForLanguage(languageId).value;\n\n  /**\n   * @access public\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @param  {Mixed}      value      Value to insert into field\n   * @return {Bool}                  Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const field = this.getFieldForLanguage(languageId);\n    _FtInputfields.default.updateValue(field, value);\n\n    // Required to programmatically trigger the event listener for this field\n    field.dispatchEvent(new Event('keyup'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int}  languageId ProcessWire language ID\n   * @return {Element}                Text field\n   */\n  this.getFieldForLanguage = languageId => {\n    if (Object.hasOwn(languageFields, languageId) && !!languageFields[languageId]) {\n      return languageFields[languageId];\n    }\n    languageFields[languageId] = this.getInputContainerForLanguage(languageId).querySelector('input');\n    return languageFields[languageId];\n  };\n\n  /**\n   * Gets a specific input container\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getInputContainerForLanguage = languageId => {\n    if (!Object.hasOwn(inputContainers, languageId) && !inputContainers[languageId]) {\n      this.getInputContainers();\n    }\n    return inputContainers[languageId];\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    // Page name fields require querying the child input and determining the language by analyzing\n    // the name attribute of the text input itself\n    this.getSelf().querySelectorAll('.LanguageSupport').forEach(el => {\n      // The default language input has no language ID, it's the default language, so fallback\n      const languageId = el.querySelector('input[type=text]').name.replace('_pw_page_name', '') || _FtConfig.default.getDefaultLanguage().id;\n      inputContainers[languageId] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n  this.setModifiedState = (languageId, contentHasChanged) => {\n    const inputContainer = this.getInputContainerForLanguage(languageId);\n    if (contentHasChanged) {\n      inputContainer.classList.add(contentModifiedClass);\n    }\n    if (!contentHasChanged) {\n      inputContainer.classList.remove(contentModifiedClass);\n    }\n  };\n\n  /**\n   * Registers the event listener that watches for changes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getFieldForLanguage(languageId).addEventListener('keyup', e => {\n      changedValues[languageId] = e.target.value;\n      this.setModifiedState(languageId, this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * - Stores initial field values for each langauge\n   * - Creates/stores an FtLanguageTab object for each language\n   * - Binds an event that detects changes on input\n   * @return {Void}\n   */\n  (() => {\n    const allInputContainers = this.getInputContainers();\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      initValues[languageId] = this.getValueForLanguage(languageId);\n      activityOverlays[languageId] = new createActivityOverlay(inputContainer);\n      this.registerInputEventListener(languageId);\n    }\n    new _FtInputfieldTranslateButton.default(this, allInputContainers, true);\n  })();\n};\nconst createActivityOverlay = function (languageInput) {\n  let activityOverlay;\n  this.getSelf = () => languageInput;\n  this.getActivityOverlay = () => activityOverlay;\n  (() => {\n    activityOverlay = new _FtActivityOverlay.default(this);\n  })();\n};\nvar _default = FtInputfieldPageName;\nexports.default = _default;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":13,\"../ui/FtInputfieldTranslateButton\":15,\"../ui/FtLanguageTab\":16,\"./FtInputfields\":12}],7:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldTable = void 0;\n/**\n * Determines if a given inputfield contains a Table instance\n * @param  {Element} inputfield Inputfield (.langTabs) element\n * @return {Bool}\n */\nconst FtIsInputfieldTable = inputfield => isInputfieldTable(inputfield) || isInputfieldTableRow(inputfield);\n\n/**\n * Handles table inputfields on load\n * @param  {Element} inputfield\n * @return {Bool}\n */\nexports.FtIsInputfieldTable = FtIsInputfieldTable;\nconst isInputfieldTable = inputfield => !!inputfield.classList.contains('InputfieldTable');\nconst isInputfieldTableRow = inputfield => !!inputfield.tagName === 'TBODY' && inputfield.querySelectorAll('.InputfieldTable_hasLangTabs').length;\n\n},{}],8:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldText = exports.FtInputfieldText = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if the current inputfield is an InputfieldText\n * @param  {Element} inputfield Element containing the multilanguage fields\n * @return {Bool}\n */\nconst FtIsInputfieldText = inputfield => !!inputfield.querySelector(\"input[type='text']\");\n\n/**\n * Handles IO operations for a multilanguage InputfieldText element\n * Language IDs are always converted to int to accept values from all sources since some may be\n * retrieved from various sources as a string\n * @param {Element} inputfield The Inputfield .hasLangTabs container\n */\nexports.FtIsInputfieldText = FtIsInputfieldText;\nconst FtInputfieldText = function (inputfield) {\n  /**\n   * Page-load values for all fields/languages\n   * Populated on object instantiation\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when content is modified\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * FtLanguageTab objects for each language\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all elements containing language inputs\n   * @property {String} ProcessWire Language ID\n   * @type {NodeList}\n   */\n  const inputContainers = {};\n\n  /**\n   * Text input fields\n   * @property {String} ProcessWire Language ID\n   * @type {Object}\n   */\n  const languageFields = {};\n\n  /**\n   * Activity overlay object, set on instantiation\n   *\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /*\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @access public\n   * @param  {String|Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => this.getFieldForLanguage(languageId).value;\n\n  /**\n   * @access public\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @param  {Mixed}      value      Value to insert into field\n   * @return {Bool}                  Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const field = this.getFieldForLanguage(languageId);\n    _FtInputfields.default.updateValue(field, value);\n\n    // Required to programmatically trigger the event listener for this field\n    field.dispatchEvent(new Event('keyup'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int}  languageId ProcessWire language ID\n   * @return {Element}                Text field\n   */\n  this.getFieldForLanguage = languageId => {\n    if (Object.hasOwn(languageFields, languageId) && !!languageFields[languageId]) {\n      return languageFields[languageId];\n    }\n    languageFields[languageId] = this.getInputContainerForLanguage(languageId).querySelector('input');\n    return languageFields[languageId];\n  };\n\n  /**\n   * Gets a specific input container\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getInputContainerForLanguage = languageId => {\n    if (Object.hasOwn(inputContainers, languageId) && !!inputContainers[languageId]) {\n      return inputContainers[languageId];\n    }\n    inputContainers[languageId] = inputfield.querySelector(`[data-language=\"${languageId}\"]`);\n    return inputContainers[languageId];\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    inputfield.querySelectorAll('[data-language]').forEach(el => inputContainers[el.dataset.language] = el);\n    return inputContainers;\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Registers the event listener that watches for changes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getFieldForLanguage(languageId).addEventListener('keyup', e => {\n      changedValues[languageId] = e.target.value;\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * - Stores initial field values for each langauge\n   * - Creates/stores an FtLanguageTab object for each language\n   * - Binds an event that detects changes on input\n   * @return {Void}\n   */\n  (() => {\n    const allInputContainers = this.getInputContainers();\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      initValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      this.registerInputEventListener(languageId);\n    }\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldText = FtInputfieldText;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":13,\"../ui/FtInputfieldTranslateButton\":15,\"../ui/FtLanguageTab\":16,\"./FtInputfields\":12}],9:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldTextarea = exports.FtInputfieldTextarea = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if the current inputfield is an InputfieldText\n * @param  {Element} inputfield Element containing the multilanguage fields\n * @return {Bool}\n */\nconst FtIsInputfieldTextarea = inputfield => !!inputfield.querySelector('textarea:not(.InputfieldCKEditorNormal,.InputfieldTinyMCEEditor)');\n\n/**\n * Handles IO operations for a multilanguage InputfieldText element\n * Language IDs are always converted to int to accept values from all sources since some may be\n * retrieved from various sources as a string\n * @param {Element} inputfield The Inputfield .hasLangTabs container\n */\nexports.FtIsInputfieldTextarea = FtIsInputfieldTextarea;\nconst FtInputfieldTextarea = function (inputfield) {\n  /**\n   * Contains values for all fields/languages keyed by ProcessWire language ID.\n   * Populated on object instantiation\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when they change keyed by language ID\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * Will contain FtLanguageTab object for each language keyed by language ID\n   * Language ID keys are integers\n   * @type {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all language input containers keyed by language ID\n   * Language ID keys are integers\n   * @type {NodeList}\n   */\n  const inputContainers = {};\n\n  /**\n   * Will contain all language input text fields keyed by language ID\n   * @type {Object}\n   */\n  const languageFields = {};\n\n  /**\n   * Activity overlay object, set on instantiation\n   *\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /*\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @param  {Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => this.getFieldForLanguage(languageId).value;\n\n  /**\n   * @param  {Int}    languageId ProcessWire language ID\n   * @param  {Mixed}  value      Value to insert into field\n   * @return {Bool}              Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const field = this.getFieldForLanguage(languageId);\n    _FtInputfields.default.updateValue(field, value);\n\n    // Required to programmatically trigger the event listener for this field\n    field.dispatchEvent(new Event('keyup'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * @param  {Int}    languageId ProcessWire language ID\n   * @return {Element}           Text field\n   */\n  this.getFieldForLanguage = languageId => {\n    if (Object.hasOwn(languageFields, languageId)) {\n      return languageFields[languageId];\n    }\n    languageFields[languageId] = inputfield.querySelector(`[data-language=\"${languageId}\"] textarea`);\n    return languageFields[languageId];\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    inputfield.querySelectorAll('[data-language]').forEach(el => {\n      inputContainers[el.dataset.language] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * @param  {Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Registers the event listener that watches for changes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getFieldForLanguage(languageId).addEventListener('keyup', e => {\n      changedValues[languageId] = e.target.value;\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * - Stores initial field values for each langauge\n   * - Creates/stores an FtLanguageTab object for each language\n   * - Binds an event that detects changes on input\n   * @return {Void}\n   */\n  (() => {\n    const allInputContainers = this.getInputContainers();\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      initValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      this.registerInputEventListener(languageId);\n    }\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldTextarea = FtInputfieldTextarea;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":13,\"../ui/FtInputfieldTranslateButton\":15,\"../ui/FtLanguageTab\":16,\"./FtInputfields\":12}],10:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldTinyMCE = exports.FtInputfieldTinyMCE = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if a given inputfield contains a regular TinyMCE instance\n * @param  {Element} inputfield Inputfield (.langTabs) element\n * @return {Bool}\n */\nconst FtIsInputfieldTinyMCE = inputfield => !!inputfield.querySelector('.InputfieldTinyMCENormal');\n\n/**\n * Handles IO operations for a multilanguage InputfieldTinyMCE elements\n * @param {Element} inputfield The Inputfield .hasLangTabs container\n */\nexports.FtIsInputfieldTinyMCE = FtIsInputfieldTinyMCE;\nconst FtInputfieldTinyMCE = function (inputfield) {\n  /**\n   * Contains values for all fields/languages keyed by ProcessWire language ID.\n   * Populated on object instantiation\n   *\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when they change keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {String} Inputfield content\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * Will contain FtLanguageTab object for each language keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type     {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all language input containers keyed by language ID\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type {Object}\n   */\n  const inputContainers = {};\n\n  /**\n   * Will contain all language input textarea fields that hold Inputfield data before TinyMCE\n   * instances are initialized.\n   * @property {String} ProcessWire Language ID\n   * @value    {Element}\n   * @type     {Object}\n   */\n  const textareas = {};\n\n  /**\n   * Will contain all TinyMCE instances as they become available (are initialized). Most TinyMCE\n   * instances are lazy loaded or loaded on demand. Keyed by language ID\n   * This is populated on FtInputfieldTinyMCE on instantiation and language ID properties will either\n   * have a TinyMCE object or null\n   * @property {String} ProcessWire Language ID\n   * @value    {TinyMCE|null}\n   * @type     {Object}\n   */\n  const editorInstances = {};\n\n  /**\n   * Will contain the base TinyMCE instance ID that can be used to get the default TinyMCE instance\n   * using the TinyMCE API, or another instance by modifying this one.\n   * Set on FtInputfieldTinyMCE instantiation\n   * @type {?String}\n   */\n  let defaultLanguageInstanceId = null;\n\n  /**\n   * Activity overlay object, set on instantiation\n   *\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /*\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @param  {Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => {\n    const tinymceInstance = this.getTinymceInstanceForLanguage(languageId);\n    if (tinymceInstance) {\n      return tinymceInstance.getContent();\n    }\n    return this.getTextareaForLanguage(languageId).value;\n  };\n\n  /**\n   * Sets content for a language, will set the value for TinyMCE if it exists, and always set the\n   * value for the textarea\n   * @access public\n   * @param  {Int}    languageId ProcessWire language ID\n   * @param  {Mixed}  value      Value to insert into field\n   * @return {Bool}              Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const tinymceInstance = this.getTinymceInstanceForLanguage(languageId);\n    if (tinymceInstance) {\n      tinymceInstance.setContent(value);\n      tinymceInstance.fire('input');\n    }\n    const field = this.getTextareaForLanguage(languageId);\n    _FtInputfields.default.updateValue(field, value);\n    field.dispatchEvent(new Event('input'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * Attempts to get the TinyMCE instance for a given language ID if it exists\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {?TinyMCE}\n   */\n  this.getTinymceInstanceForLanguage = languageId => {\n    if (Object.hasOwn(editorInstances, languageId) && editorInstances[languageId]) {\n      return editorInstances[languageId];\n    }\n    const tinymceSelector = this.createTinymceSelector(languageId);\n    editorInstances[languageId] = tinymce.get(tinymceSelector);\n    return editorInstances[languageId];\n  };\n\n  /**\n   * @access private\n   * @param  {Int}    languageId ProcessWire language ID\n   * @return {Element}           Text field\n   */\n  this.getTextareaForLanguage = languageId => {\n    if (Object.hasOwn(textareas, languageId) && !!textareas[languageId]) {\n      return textareas[languageId];\n    }\n    textareas[languageId] = this.getSelf().querySelector(`[data-language=\"${languageId}\"] textarea`);\n    return textareas[languageId];\n  };\n\n  /**\n   * Get all input containers holding TinyMCE instances, memoizes. Keyed by ID\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    this.getSelf().querySelectorAll('[data-language]').forEach(el => {\n      inputContainers[el.dataset.language] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Creates a TinyMCE ID used to get instances by language\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {String}\n   */\n  this.createTinymceSelector = languageId => {\n    if (languageId == _FtConfig.default.getDefaultLanguage().id) {\n      return defaultLanguageInstanceId;\n    }\n    return `${defaultLanguageInstanceId}__${languageId}`;\n  };\n\n  /**\n   * Bind Inputfield required events to a TinyMCE instance\n   * @access private\n   * @param  {String|Int} languageId      ProcessWire language ID\n   * @param  {Object}     tinymceInstance TinyMCE object\n   * @return {Void}\n   */\n  this.bindTinymceEvents = (languageId, tinymceInstance) => {\n    tinymceInstance.on('keyup', e => this.getTextareaForLanguage(languageId).dispatchEvent(new Event('input')));\n  };\n\n  /**\n   * Creates an observer that looks for new TinyMCE instances within this Inputfield\n   * @access private\n   * @return {void}\n   */\n  this.initTinymceInstanceOnCreation = (languageId, inputContainer) => {\n    new MutationObserver((mutations, observer) => {\n      for (let mutation of mutations) {\n        let targetEl = mutation.target;\n        if (targetEl.dataset.language == languageId) {\n          editorInstances[languageId] = this.getTinymceInstanceForLanguage(languageId);\n          this.bindTinymceEvents(languageId, editorInstances[languageId]);\n          if (editorInstances[languageId]) {\n            observer.disconnect();\n          }\n        }\n      }\n    }).observe(inputContainer, {\n      childList: true\n    });\n  };\n\n  /**\n   * Registers the event listener that watches for content changes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {void}\n   */\n  this.registerInputEventListener = languageId => {\n    textareas[languageId].addEventListener('input', e => {\n      changedValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Initializes FtInputfieldTinyMCE Inputfield\n   * @access private\n   * @param  {Array<Element>} allInputContainers All elements containing TinyMCE fields\n   * @return {Void}\n   */\n  this.initAll = allInputContainers => {\n    // TinyMCE instances are initialzied using a field ID. The default language element contains\n    // an ID substring that can be modified to create a TinyMCE ID string that can be used to get\n    // TinyMCE instances\n    defaultLanguageInstanceId = Object.values(allInputContainers)[0].id.replace('langTab_', '');\n\n    // At runtime/initialization only the TinyMCE instance will load for the default language, others\n    // will be loaded when switched to the tab. Still attempt to get all TinyMCE instances for all\n    // tabs in case they are available\n    for (let languageId in allInputContainers) {\n      const inputContainer = allInputContainers[languageId];\n\n      // Get initial content on page load\n      // Call this first to ensure getValueForLanguage() pulls from the textarea element rather than\n      // attempting to use the TinyMCE API on object instantiation\n      initValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      editorInstances[languageId] = this.getTinymceInstanceForLanguage(languageId);\n      textareas[languageId] = this.getTextareaForLanguage(languageId);\n      this.registerInputEventListener(languageId);\n\n      // If there was no editor found at initialization, register when created\n      if (!editorInstances[languageId]) {\n        this.initTinymceInstanceOnCreation(languageId, inputContainer);\n      }\n    }\n\n    // Bind TinyMCE event listeners to any TinyMCE input fields found on initialization\n    for (let languageId in editorInstances) {\n      if (Object.hasOwn(editorInstances, languageId) && !!editorInstances[languageId]) {\n        this.bindTinymceEvents(languageId, editorInstances[languageId]);\n      }\n    }\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * - Stores initial field values for each langauge\n   * - Creates/stores an FtLanguageTab object for each language\n   * - Binds an event that detects changes on input\n   * @return {Void}\n   */\n  (() => {\n    const allInputContainers = this.getInputContainers();\n\n    // Set a micro timeout to allow TinyMCE instances to instantiate.\n    // This is especially important when new fields are dynamically added after page load\n    setTimeout(() => {\n      this.initAll(allInputContainers);\n    }, 50);\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldTinyMCE = FtInputfieldTinyMCE;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":13,\"../ui/FtInputfieldTranslateButton\":15,\"../ui/FtLanguageTab\":16,\"./FtInputfields\":12}],11:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtIsInputfieldTinyMCEInline = exports.FtInputfieldTinyMCEInline = void 0;\nvar _FtActivityOverlay = _interopRequireDefault(require(\"../ui/FtActivityOverlay\"));\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfields = _interopRequireDefault(require(\"./FtInputfields\"));\nvar _FtInputfieldTranslateButton = _interopRequireDefault(require(\"../ui/FtInputfieldTranslateButton\"));\nvar _FtLanguageTab = _interopRequireDefault(require(\"../ui/FtLanguageTab\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Determines if a given inputfield contains an inline TinyMCE instance\n * @param  {Element} inputfield Inputfield (.langTabs) element\n * @return {Bool}\n */\nconst FtIsInputfieldTinyMCEInline = inputfield => !!inputfield.querySelector('.InputfieldTinyMCEInline');\n\n/**\n * Handles translations for TinyMCE Inputfields\n * @return {object}  Public methods\n */\nexports.FtIsInputfieldTinyMCEInline = FtIsInputfieldTinyMCEInline;\nconst FtInputfieldTinyMCEInline = function (inputfield) {\n  /**\n   * Contains values for all fields/languages keyed by ProcessWire language ID.\n   * Populated on object instantiation\n   * @type {Object}\n   */\n  const initValues = {};\n\n  /**\n   * Will contain new values for fields/languages when they change keyed by language ID\n   * @type {Object}\n   */\n  const changedValues = {};\n\n  /**\n   * Will contain FtLanguageTab object for each language keyed by language ID\n   * Language ID keys are integers\n   * @type {Object}\n   */\n  const languageTabs = {};\n\n  /**\n   * Will contain all language input containers keyed by language ID\n   * Language ID keys are integers\n   * @type {NodeList}\n   */\n  const inputContainers = {};\n\n  /**\n   * Will contain all the HTML elements that the inline TinyMCE editor stores/modifies content\n   * keyed by language ID\n   * @type {Object}\n   */\n  const contentElements = {};\n\n  /**\n   * Will contain all TinyMCE instances as they become available\n   * @type {Object}\n   */\n  const editorInstances = {};\n\n  /**\n   * Will contain the TinyMCE instance name for the default language.\n   * Used to get the TinyMCE instance\n   * @type {?String}\n   */\n  let defaultLanguageInstanceId = null;\n\n  /**\n   * @access public\n   * @type {Object}\n   */\n  let activityOverlay;\n\n  /*\n   * @access public\n   * @return {Object}\n   */\n  this.getActivityOverlay = () => activityOverlay;\n\n  /**\n   * @access public\n   * @return {Element} Inputfield element passed to this object on creation\n   */\n  this.getSelf = () => inputfield;\n\n  /**\n   * @access public\n   * @return {Mixed}\n   */\n  this.getValueForDefaultLanguage = () => this.getValueForLanguage(_FtConfig.default.getDefaultLanguage().id);\n\n  /**\n   * @access public\n   * @param  {Int}   languageId ProcessWire language ID\n   * @return {Mixed}\n   */\n  this.getValueForLanguage = languageId => {\n    const tinymceInstance = this.getEditorInstanceForLanguage(languageId);\n    if (tinymceInstance) {\n      return tinymceInstance.getContent();\n    }\n    return this.getContentElementForLanguage(languageId).innerHTML;\n  };\n\n  /**\n   * @access public\n   * @param  {Int}    languageId ProcessWire language ID\n   * @param  {Mixed}  value      Value to insert into field\n   * @return {Bool}              Content is different from page load value\n   */\n  this.setValueForLanguage = (languageId, value) => {\n    const contentElement = this.getContentElementForLanguage(languageId);\n    contentElement.innerHTML = value;\n\n    // Required to programmatically trigger the event listener for this field\n    contentElement.dispatchEvent(new Event('input'));\n    return this.contentHasChanged(languageId);\n  };\n\n  /**\n   * Attempts to get the TinyMCE instance for a given language ID if it exists\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {?TinyMCE}\n   */\n  this.getEditorInstanceForLanguage = languageId => {\n    if (Object.hasOwn(editorInstances, languageId) && !!editorInstances[languageId]) {\n      return editorInstances[languageId];\n    }\n    const tinymceSelector = this.createTinymceSelector(languageId);\n    editorInstances[languageId] = tinymce.get(tinymceSelector);\n    return editorInstances[languageId];\n  };\n\n  /**\n   * Gets the content element that TinyMCE uses to store the field content\n   * Ensures memoization\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getContentElementForLanguage = languageId => {\n    if (Object.hasOwn(contentElements, languageId)) {\n      return contentElements[languageId];\n    }\n    contentElements[languageId] = this.getInputContainerForLanguage(languageId).querySelector('.mce-content-body');\n    return contentElements[languageId];\n  };\n\n  /**\n   * Gets a specific input container. Memoizes\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Element}\n   */\n  this.getInputContainerForLanguage = languageId => {\n    if (Object.hasOwn(inputContainers, languageId) && !!inputContainers[languageId]) {\n      return inputContainers[languageId];\n    }\n    inputContainers[languageId] = this.getSelf().querySelector(`[data-language=\"${languageId}\"]`);\n    return inputContainers[languageId];\n  };\n\n  /**\n   * Get all input containers where content is entered, memoizes\n   * @access private\n   * @return {Object} All languages keyed by (int) language ID\n   */\n  this.getInputContainers = () => {\n    this.getSelf().querySelectorAll('[data-language]').forEach(el => {\n      inputContainers[el.dataset.language] = el;\n    });\n    return inputContainers;\n  };\n\n  /**\n   * This determines if the content for a given langauge has changed. In some instancesTinyMCE\n   * inserts unwanted elements into empty fields that will always register content as having been\n   * changed. This includes adding elements to fields that may be returned to their original content\n   * matching content at page load. These \"phantom elements\" must me checked for.\n   * @access private\n   * @param  {Int} languageId ProcessWire language ID\n   * @return {Bool}\n   */\n  this.contentHasChanged = languageId => Object.hasOwn(changedValues, languageId) && changedValues[languageId] !== initValues[languageId];\n\n  /**\n   * Creates a TinyMCE ID used to get instances by language\n   * @access private\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {String}\n   */\n  this.createTinymceSelector = languageId => {\n    if (languageId == _FtConfig.default.getDefaultLanguage().id) {\n      return defaultLanguageInstanceId;\n    }\n    return `${defaultLanguageInstanceId}__${languageId}`;\n  };\n\n  /**\n   * Creates a MutationObserver that will detect when the innerHTML content has changed for a given\n   * content element. When content is changed, it will mock an 'input' event that an eventListener\n   * can respond to\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerUpdateEvent = languageId => {\n    const contentElement = this.getContentElementForLanguage(languageId);\n    new MutationObserver((mutations, observer) => {\n      for (let mutation of mutations) {\n        mutation.target.dispatchEvent(new Event('input'));\n      }\n    }).observe(contentElement, {\n      childList: true\n    });\n  };\n\n  /**\n   * Register an input observer\n   * @param  {String|Int} languageId ProcessWire language ID\n   * @return {Void}\n   */\n  this.registerInputEventListener = languageId => {\n    this.getContentElementForLanguage(languageId).addEventListener('input', e => {\n      changedValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId].setModifiedState(this.contentHasChanged(languageId));\n    });\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * - Stores initial field values for each langauge\n   * - Creates/stores an FtLanguageTab object for each language\n   * - Binds an event that detects changes on input\n   * @return {Void}\n   */\n  (() => {\n    if (tinymce === undefined) {\n      console.error('TinyMCE was not found by Fluency, translation unavailable');\n      return null;\n    }\n    const allInputContainers = this.getInputContainers();\n\n    // TinyMCE instances are initialzied using a field ID. The default language element contains\n    // an ID substring that can be modified to create a TinyMCE ID string that can be used to get\n    // TinyMCE instances\n    defaultLanguageInstanceId = Object.values(allInputContainers)[0].id.replace('langTab_', '');\n    for (let languageId in allInputContainers) {\n      let inputContainer = allInputContainers[languageId];\n      initValues[languageId] = this.getValueForLanguage(languageId);\n      languageTabs[languageId] = new _FtLanguageTab.default(inputContainer);\n      this.registerUpdateEvent(languageId);\n      this.registerInputEventListener(languageId);\n    }\n    activityOverlay = new _FtActivityOverlay.default(this);\n    new _FtInputfieldTranslateButton.default(this, allInputContainers);\n  })();\n};\nexports.FtInputfieldTinyMCEInline = FtInputfieldTinyMCEInline;\n\n},{\"../global/FtConfig\":3,\"../ui/FtActivityOverlay\":13,\"../ui/FtInputfieldTranslateButton\":15,\"../ui/FtLanguageTab\":16,\"./FtInputfields\":12}],12:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _FtInputfieldCKEditor = require(\"./FtInputfieldCKEditor\");\nvar _FtInputfieldCKEditorInline = require(\"./FtInputfieldCKEditorInline\");\nvar _FtInputfieldTable = require(\"./FtInputfieldTable\");\nvar _FtInputfieldText = require(\"./FtInputfieldText\");\nvar _FtInputfieldTextarea = require(\"./FtInputfieldTextarea\");\nvar _FtInputfieldTinyMCE = require(\"./FtInputfieldTinyMCE\");\nvar _FtInputfieldTinyMCEInline = require(\"./FtInputfieldTinyMCEInline\");\nvar _FtInputfieldPageName = _interopRequireDefault(require(\"./FtInputfieldPageName\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Orchestration for initializing all multilanguage inputfields on a page\n * @return {Object}   Public interface methods\n */\nconst FtInputfields = function () {\n  /**\n   * Selector used to find translatable Inputfields\n   * All inputfield containers on the page that are multilanguage have this class\n   * @type {String}\n   */\n  const langInputfieldClass = \"[class*='hasLangTabs']\";\n\n  /**\n   * Attribute present where per-field translation is disabled\n   * @type {String}\n   */\n  const disableTranslationAttr = _FtConfig.default.getTranslationDisabledFieldAttribute();\n\n  /**\n   * Initializes multilanguage fields if present on page\n   * @return {void}\n   */\n  const init = function () {\n    const langInputfieldContainers = document.querySelectorAll(langInputfieldClass);\n\n    // Only init if there are multi-language Inputfields on the page\n    if (langInputfieldContainers.length) {\n      initInputfields(langInputfieldContainers);\n      initInputfieldsOnInsertion();\n      initPageNameInputfields();\n    }\n  };\n\n  /**\n   * Initializes multiple multilanguage fields in a collection of elelents\n   * @param  {NodeList} langInputfieldContainers\n   * @return {Void}\n   */\n  const initInputfields = langInputfieldContainers => {\n    for (let langInputfieldContainer of langInputfieldContainers) {\n      if (translationIsDisabled(langInputfieldContainer)) {\n        continue;\n      }\n      initInputfield(langInputfieldContainer);\n    }\n  };\n\n  /**\n   * Determines if a provided language inputfield has had Fluency translation disabled\n   * @param  {HTMLElement} langInputfieldContainer\n   * @return {Bool}\n   */\n  const translationIsDisabled = langInputfieldContainer => !!langInputfieldContainer.querySelectorAll(disableTranslationAttr).length;\n\n  /**\n   * Initializes the field within a container\n   * @param  {Element} langInputfieldContainer Element containing inputfield\n   * @return {void}\n   */\n  const initInputfield = langInputfieldContainer => {\n    // Do not initialize fields that have already been initialized\n    // Do not initialized fields that are a list element and not an Inputfield themselves\n    if (!fieldIsInitialized(langInputfieldContainer) && !langInputfieldContainer.classList.contains('InputfieldItemList') && !isInputfieldTemplate(langInputfieldContainer)) {\n      let inputfield = getFtInputfieldObject(langInputfieldContainer);\n      setFieldIsInitialized(langInputfieldContainer);\n      if (!inputfield) {\n        return;\n      }\n    }\n  };\n\n  /**\n   * Detect if Inputfield container is a hidden template element used to dynamically create new\n   * Inputfields on demand\n   * @param  {Element} langInputfieldContainer\n   * @return {Bool}\n   */\n  const isInputfieldTemplate = langInputfieldContainer => !!langInputfieldContainer.closest(\"[class*='Template']\");\n\n  /**\n   * Initializes a FtInputfield object instance by type\n   * Order of checks is important Complex fields should be cased higher\n   * Fields with lower complexity should be cased last to prevent catching simple elements in\n   * complex fields that use simple inputs\n   * @param  {Element} langInputfieldContainers\n   * @return {?Object}\n   */\n  const getFtInputfieldObject = langInputfieldContainer => {\n    switch (true) {\n      case (0, _FtInputfieldTable.FtIsInputfieldTable)(langInputfieldContainer):\n        // Initialize all new fields which have a different class than top-level fields\n        initInputfields(langInputfieldContainer.querySelectorAll('.langTabs'));\n        break;\n      case (0, _FtInputfieldCKEditor.FtIsInputfieldCKEditor)(langInputfieldContainer):\n        return new _FtInputfieldCKEditor.FtInputfieldCKEditor(langInputfieldContainer);\n      case (0, _FtInputfieldCKEditorInline.FtIsInputfieldCKEditorInline)(langInputfieldContainer):\n        return new _FtInputfieldCKEditorInline.FtInputfieldCKEditorInline(langInputfieldContainer);\n      case (0, _FtInputfieldTinyMCE.FtIsInputfieldTinyMCE)(langInputfieldContainer):\n        return new _FtInputfieldTinyMCE.FtInputfieldTinyMCE(langInputfieldContainer);\n      case (0, _FtInputfieldTinyMCEInline.FtIsInputfieldTinyMCEInline)(langInputfieldContainer):\n        return new _FtInputfieldTinyMCEInline.FtInputfieldTinyMCEInline(langInputfieldContainer);\n      case (0, _FtInputfieldTextarea.FtIsInputfieldTextarea)(langInputfieldContainer):\n        return new _FtInputfieldTextarea.FtInputfieldTextarea(langInputfieldContainer);\n      case (0, _FtInputfieldText.FtIsInputfieldText)(langInputfieldContainer):\n        return new _FtInputfieldText.FtInputfieldText(langInputfieldContainer);\n      default:\n        console.warn('Fluency does not recognize this inputfield, translation is not available', langInputfieldContainer);\n        return null;\n    }\n  };\n\n  /**\n   * This sets a mutation observer on the main content area of the edit page that will initialize\n   * new fields that may be added on focus or triggered by AJAX actions\n   *\n   * @return {void}\n   */\n  const initInputfieldsOnInsertion = () => {\n    const parentNode = document.getElementById('pw-content-body');\n    new MutationObserver((mutations, observer) => {\n      for (let mutation of mutations) {\n        let targetEl = mutation.target;\n        const foundEls = targetEl.querySelectorAll(langInputfieldClass);\n        if (foundEls.length) {\n          initInputfields(foundEls);\n        }\n      }\n    }).observe(parentNode, {\n      childList: true,\n      subtree: true\n    });\n  };\n\n  /**\n   * Initializes page name fields. Must be initialized separately since they do not\n   * follow the structure of other inputfields\n   * @return {void}\n   */\n  const initPageNameInputfields = () => {\n    const pageNameInputfields = document.querySelectorAll('.InputfieldPageName');\n    [...pageNameInputfields].forEach(pageNameInputfield => {\n      if (pageNameInputfield && !fieldIsInitialized(pageNameInputfield)) {\n        let inputfield = new _FtInputfieldPageName.default(pageNameInputfield);\n        setFieldIsInitialized(pageNameInputfield);\n        if (!inputfield) {\n          return;\n        }\n      }\n    });\n  };\n\n  /**\n   * Checks if a given field has been initialized\n   * @param  {DOMNode} langInputfieldContainer Container element for multi-language field\n   * @return {bool}\n   */\n  const fieldIsInitialized = langTabContainer => langTabContainer.hasAttribute(_FtConfig.default.fieldInitializedAttr) || !!langTabContainer.querySelector('.ft-translate-button');\n\n  /**\n   * Marks a field as initialized by adding a data attribute to the container\n   * @param  {DOMNode} langTabContainer Container element for multi-language field\n   * @return {void}\n   */\n  const setFieldIsInitialized = langTabContainer => langTabContainer.setAttribute(_FtConfig.default.fieldInitializedAttr, '');\n\n  /**\n   * This updates the value of an input element such as text or textarea\n   * When a field is updated it must be blurred so that it is recognized as having been changed and\n   * the \"unsaved changes\" alert will be shown if navigating away from a page without saving\n   * @param  {HTMLElement} inputEl Element\n   * @param  {string}      value\n   * @return {void}\n   */\n  const updateValue = (inputEl, value) => {\n    inputEl.focus();\n    inputEl.value = value;\n    inputEl.blur();\n  };\n  return {\n    init,\n    updateValue,\n    fieldIsInitialized\n  };\n}();\nvar _default = FtInputfields;\nexports.default = _default;\n\n},{\"../global/FtConfig\":3,\"./FtInputfieldCKEditor\":4,\"./FtInputfieldCKEditorInline\":5,\"./FtInputfieldPageName\":6,\"./FtInputfieldTable\":7,\"./FtInputfieldText\":8,\"./FtInputfieldTextarea\":9,\"./FtInputfieldTinyMCE\":10,\"./FtInputfieldTinyMCEInline\":11}],13:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Creates, inserts, and controls the actions the activity overlay for the provided\n * targetContainer\n * @param {object} targetContainer An instantiated object for an inputfield or fieldset\n * @param {string} type       The type of activity for this overlay. 'translate' or 'update'\n */\nconst FtActivityOverlay = function (targetContainer) {\n  var _this = this;\n  let activityType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'translating';\n  const elClasses = {\n    parent: 'ft-activity-overlay-container',\n    overlay: 'ft-activity-overlay',\n    error: 'error',\n    message: 'message',\n    flash: 'flash',\n    success: 'success',\n    activity: 'activity',\n    visible: 'visible',\n    activityContainer: 'ft-activity',\n    activityStaticText: 'ft-activity-text',\n    activityAnimationContainer: 'ft-activity-animation-container',\n    activityAnimationItem: 'ft-activity-animation-item',\n    messageContainer: 'ft-activity-message'\n  };\n\n  /**\n   * Will contain the activityOverlay Element for this targetContainer\n   * @type {Element}\n   */\n  let activityOverlay;\n\n  /**\n   * Will contain the message Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let messageContainer;\n\n  /**\n   * Will contain the animation container Element for this targetContainer's activityOverlay\n   * @type {Element}\n   */\n  let activityContainer;\n\n  /**\n   * Control Methods\n   */\n\n  /**\n   * This shows the overlay's activity animation that was created at instantiation\n   * Must be manually hidden with the hide() method\n   *\n   * @return {void}\n   */\n  this.showActivity = () => {\n    this.setActivityActive();\n    this.setOverlayVisible();\n  };\n\n  /**\n   * Shows a message in the overlay (neutral background)\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showMessage = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;\n    _this.setMessageContent(message);\n    _this.setActivityInactive();\n    _this.setMessageActive();\n    _this.setOverlayVisible();\n    _this.hide(displayTime);\n  };\n\n  /**\n   * Shows a success message (success color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashSuccess = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n    _this.setSuccessActive();\n    _this.setFlashActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows a success message (error color background)\n   *\n   * @param  {String} message     Text to display\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {[type]}             [description]\n   */\n  this.flashError = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n    _this.setFlashActive();\n    _this.setErrorActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Shows an error message in a visible overlay (error background)\n   *\n   * @param  {String} message     Message to show in overlay error\n   * @param  {Number} displayTime Length of time in ms before hiding overlay after shown\n   * @return {void}\n   */\n  this.showError = function (message) {\n    let displayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 7000;\n    _this.setErrorActive();\n    _this.showMessage(message, displayTime);\n  };\n\n  /**\n   * Hide an overlay immediately or after a preset amount of time\n   *\n   * @param {Number} delay Length of time in ms before hiding overlay\n   */\n  this.hide = function () {\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    setTimeout(() => {\n      _this.setOverlayInvisible();\n    }, delay);\n\n    // Ensures the animation is finished before modifying content\n    setTimeout(() => {\n      _this.setActivityInactive();\n      _this.setMessageInactive();\n      _this.setErrorInactive();\n      _this.setFlashInactive();\n      _this.setMessageContent('');\n    }, delay + 500);\n  };\n\n  /**\n   * Private Methods\n   */\n\n  /**\n   * Shows the activity element\n   *\n   * @access Private\n   */\n  this.setActivityActive = () => {\n    activityOverlay.classList.add(elClasses.activity);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setActivityInactive = () => {\n    activityOverlay.classList.remove(elClasses.activity);\n  };\n\n  /**\n   * Shows the message element\n   *\n   * @access Private\n   */\n  this.setMessageActive = () => {\n    activityOverlay.classList.add(elClasses.message);\n  };\n\n  /**\n   * Hides the activity element\n   *\n   * @access Private\n   */\n  this.setMessageInactive = () => {\n    activityOverlay.classList.remove(elClasses.message);\n  };\n\n  /**\n   * Sets the content of the overlay message\n   *\n   * @access Private\n   */\n  this.setMessageContent = content => {\n    messageContainer.innerText = content;\n  };\n\n  /**\n   * Adds flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashActive = content => {\n    activityOverlay.classList.add(elClasses.flash);\n  };\n\n  /**\n   * removes flashing overlay behavior\n   *\n   * @access Private\n   */\n  this.setFlashInactive = content => {\n    activityOverlay.classList.remove(elClasses.flash);\n  };\n\n  /**\n   * Sets message to success\n   *\n   * @access Private\n   */\n  this.setSuccessActive = () => {\n    activityOverlay.classList.add(elClasses.success);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setSuccessInactive = () => {\n    activityOverlay.classList.remove(elClasses.success);\n  };\n\n  /**\n   * Sets message to error\n   *\n   * @access Private\n   */\n  this.setErrorActive = () => {\n    activityOverlay.classList.add(elClasses.error);\n  };\n\n  /**\n   * Unsets message error\n   *\n   * @access Private\n   */\n  this.setErrorInactive = () => {\n    activityOverlay.classList.remove(elClasses.error);\n  };\n\n  /**\n   * Shows this activity overlay\n   *\n   * @access Private\n   */\n  this.setOverlayVisible = () => {\n    activityOverlay.classList.add(elClasses.visible);\n  };\n  this.setOverlayInvisible = () => {\n    activityOverlay.classList.remove(elClasses.visible);\n  };\n\n  /**\n   * Creates and returns an activity overlay element\n   *\n   * @return {HTMLElement}\n   */\n  this.create = () => {\n    activityOverlay = this.buildOverlayEl();\n    activityContainer = this.buildActivityEl();\n    messageContainer = this.buildMessageEl();\n    activityOverlay.appendChild(activityContainer);\n    activityOverlay.appendChild(messageContainer);\n    return activityOverlay;\n  };\n\n  /**\n   * Creates the parent overlay element\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildOverlayEl = () => {\n    const overlay = document.createElement('div');\n\n    // overlay.setAttribute('data-gradient-1', 'rgba(62, 185, 152, .85)');\n    overlay.setAttribute('class', elClasses.overlay);\n    return overlay;\n  };\n\n  /**\n   * Creates container for animation and contents of animation\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildActivityEl = () => {\n    let text = this.getActivityTexts();\n    let activityAnimationContainer = document.createElement('div');\n    activityAnimationContainer.setAttribute('class', elClasses.activityAnimationContainer);\n\n    // Add all animation items to the animation container\n    activityAnimationContainer = text.animated.reduce((el, string) => {\n      let activityText = document.createElement('span');\n\n      // Add text items\n      activityText.setAttribute('class', elClasses.activityAnimationItem);\n      activityText.innerHTML = string;\n      el.appendChild(activityText);\n      return el;\n    }, activityAnimationContainer);\n\n    // Create static text element\n    let staticText = document.createElement('div');\n    staticText.setAttribute('class', elClasses.activityStaticText);\n    staticText.innerText = text.static;\n\n    // Create activity container and append children\n    activityContainer = document.createElement('div');\n    activityContainer.setAttribute('class', elClasses.activityContainer);\n    activityContainer.appendChild(staticText);\n    activityContainer.appendChild(activityAnimationContainer);\n    return activityContainer;\n  };\n\n  /**\n   * Gets activity overlay texts and shuffles the animated array\n   * No purpose really other than to add some uniqueness to overlay animations and prevent looking\n   * like one language was preferred by me over another.\n   *\n   * Fisher-Yates algorithm, for the curious\n   *\n   * @return {Array} Randomized array of the activity animation texts for this instance\n   * @access Private\n   */\n  this.getActivityTexts = () => {\n    let uiTexts = _FtConfig.default.getUiTextFor('activityOverlay')[activityType];\n    let animationTexts = uiTexts.animated;\n    for (let i = animationTexts.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = animationTexts[i];\n      animationTexts[i] = animationTexts[j];\n      animationTexts[j] = temp;\n    }\n    uiTexts.animated = animationTexts;\n    return uiTexts;\n  };\n\n  /**\n   * Builds the element that will hold messages in the overlay\n   *\n   * @return {Element}\n   * @access Private\n   */\n  this.buildMessageEl = () => {\n    messageContainer = document.createElement('div');\n    messageContainer.setAttribute('class', elClasses.messageContainer);\n    return messageContainer;\n  };\n  (() => {\n    const targetContainerContainer = targetContainer.getSelf();\n    activityOverlay = this.create();\n    targetContainerContainer.classList.add(elClasses.parent);\n    targetContainerContainer.appendChild(activityOverlay);\n  })();\n};\nvar _default = FtActivityOverlay;\nexports.default = _default;\n\n},{\"../global/FtConfig\":3}],14:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * Handles modifying the Fluency menu item\n * @return {object} Public methods\n */\nconst FtAdminMenu = function () {\n  /**\n   * Initializes module\n   * @return {void}\n   */\n  const init = () => {\n    convertFtAdminMenuToModal();\n  };\n\n  /**\n   * Finds and converts the Translation admin menu item to open in a modal\n   * rather than navigating to the page.\n   * @return {void}\n   */\n  const convertFtAdminMenuToModal = () => {\n    const adminNavItems = document.querySelectorAll('.pw-masthead .pw-primary-nav > li > a'),\n      urlParams = new URLSearchParams(window.location.search);\n\n    // We don't want to modify this menu item if we are on the Fluency config page\n    // because the modal behavior is not available\n    if (urlParams.get('name') === 'Fluency') {\n      return false;\n    }\n    adminNavItems.forEach((el, i) => {\n      let hrefSegments = el.href.split('/').filter(Boolean);\n      if (hrefSegments[hrefSegments.length - 1].includes('fluency')) {\n        el.href = el.href + '?modal=1';\n        el.classList.add('pw-modal-large');\n        el.classList.add('pw-modal');\n      }\n    });\n  };\n  return {\n    init: init\n  };\n}();\nvar _default = FtAdminMenu;\nexports.default = _default;\n\n},{}],15:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _Fluency = _interopRequireDefault(require(\"../global/Fluency\"));\nvar _FtUiElements = _interopRequireDefault(require(\"./FtUiElements\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * The translate button establishes the UI element used to trigger translations\n * by the user. It manages the translation process by displaying/hiding the\n * activity overlay, showing messages and errors, getting translations from\n * the Fluency API, and modifying content. This is done by manipulating the\n * inputfield and activityOverlay objects passed.\n */\n/**\n * @param {Element}  inputfield\n * @param {NodeList}  inputContainers\n * @param {Boolean} forceEachTranslationAction Force a single field translation trigger\n */\nconst FtInputfieldTranslateButton = function (inputfield, inputContainers) {\n  let forceEachTranslationAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  /**\n   * Gets all localized strings from the FluencyConfig object\n   * @type {object}\n   */\n  const uiText = _FtConfig.default.getUiTextFor('inputfieldTranslateButtons');\n\n  /**\n   * Adds translate elements to inputfield containers\n   * @param  {string|int} languageId     ProcessWire language ID\n   * @param  {Element}    inputContainer Inputcontainer for this language\n   * @return {void}\n   */\n  this.addTranslateFromDefaultButton = (languageId, inputContainer) => {\n    const isTranslatable = _FtConfig.default.languageIsTranslatable(languageId);\n    const isDefaultLanguage = languageId == _FtConfig.default.getDefaultLanguage().id;\n    if (!isTranslatable) {\n      inputContainer.appendChild(_FtUiElements.default.createStatusElement(uiText.languageNotAvailable));\n      return;\n    }\n    if (isDefaultLanguage) {\n      inputContainer.appendChild(_FtUiElements.default.createStatusElement(uiText.translationAvailable));\n      return;\n    }\n    const {\n      button,\n      container\n    } = _FtUiElements.default.createTranslateButton(uiText.translateButton);\n    this.bindButton(button, _FtConfig.default.getLanguageForId(languageId));\n    inputContainer.appendChild(container);\n  };\n\n  /**\n   * Binds a button for translation\n   * @param  {Element} buttonElement Element to bind translation action to\n   * @param  {Object} languageConfig Fluency language configuration object\n   * @return {Void}\n   */\n  this.bindButton = (buttonElement, languageConfig) => {\n    buttonElement.addEventListener('click', e => {\n      e.preventDefault();\n      const translationSourceContent = inputfield.getValueForDefaultLanguage();\n      if (!translationSourceContent) {\n        return;\n      }\n\n      // Try to get the inputfield activity overlay, fall back to retrieving by language ID where\n      // the inputfield element can delegate to a specific activity overlay located within it\n      const activityOverlay = inputfield.getActivityOverlay() ?? inputfield.getActivityOverlay(languageConfig.id);\n      activityOverlay.showActivity();\n      _Fluency.default.getTranslation(_FtConfig.default.getDefaultLanguage().engineLanguage.sourceCode, languageConfig.engineLanguage.targetCode, translationSourceContent).then(result => {\n        if (result.error) {\n          inputfield.getActivityOverlay().showError(result.message);\n          return;\n        }\n        inputfield.setValueForLanguage(languageConfig.id, result.translations[0]);\n        activityOverlay.hide();\n      });\n    });\n  };\n\n  /**\n   * Creates the \"Translate to all\" button and adds it to the inputfield\n   *\n   * @param  {int}          sourceLanguageId     ProcessWire language ID\n   * @param  {HTMLElements} inputContainers      All language input containers for this inputfield\n   * @return {void}\n   */\n  this.addTranslateToAllButton = (sourceLanguageId, inputContainers) => {\n    const isTranslatable = _FtConfig.default.languageIsTranslatable(sourceLanguageId);\n    const sourceInputContainer = inputContainers[sourceLanguageId];\n    if (!isTranslatable) {\n      sourceInputContainer.appendChild(_FtUiElements.default.createStatusElement(uiText.languageNotAvailable));\n      return;\n    }\n    const {\n      button,\n      container\n    } = _FtUiElements.default.createTranslateButton(uiText.translateToAllButton);\n    this.bindTranslateToAllButton(button, _FtConfig.default.getLanguageForId(sourceLanguageId), inputContainers);\n    sourceInputContainer.appendChild(container);\n  };\n\n  /**\n   * Binds translation action to button that translates to all other languages\n   *\n   * @param  {Element}  buttonElement        [description]\n   * @param  {object}   sourceLanguageConfig The FtConfig object for the source language\n   * @param  {HTMLElements} inputContainers      All language input containers for this inputfield\n   * @return {void}\n   */\n  this.bindTranslateToAllButton = (buttonElement, sourceLanguageConfig, inputContainers) => {\n    buttonElement.addEventListener('click', e => {\n      e.preventDefault();\n      const translationSourceContent = inputfield.getValueForLanguage(sourceLanguageConfig.id);\n\n      // Do not translate if there's no source content or risk content in other languages to\n      // be removed\n      if (!translationSourceContent) {\n        return;\n      }\n\n      // Used to count the number of languages left when translating to all\n      let translationLanguageCount = Object.keys(inputContainers).length;\n      let errorOccurred = false;\n      let activityOverlay = inputfield.getActivityOverlay();\n      activityOverlay.showActivity();\n      for (let targetLanguageId in inputContainers) {\n        targetLanguageId = parseInt(targetLanguageId, 10);\n        let targetLanguageConfig = _FtConfig.default.getLanguageForId(targetLanguageId);\n\n        // No need to translate source if present\n        // Skip if source or target languages are not configured in Fluency\n        if (targetLanguageId === sourceLanguageConfig.id || !sourceLanguageConfig || !targetLanguageConfig) {\n          translationLanguageCount--;\n          continue;\n        }\n        _Fluency.default.getTranslation(sourceLanguageConfig.engineLanguage.sourceCode, targetLanguageConfig.engineLanguage.targetCode, translationSourceContent).then(result => {\n          if (result.error) {\n            // Only show the error overlay if an error has not already occurred\n            if (!errorOccurred) {\n              inputfield.getActivityOverlay().showError(result.message);\n            }\n            errorOccurred = true;\n            return;\n          }\n          inputfield.setValueForLanguage(targetLanguageConfig.id, result.translations[0]);\n        }).then(result => {\n          translationLanguageCount--;\n\n          // If an error occurred, messaging/overlay will be handled by the error process\n          if (translationLanguageCount === 0 && !errorOccurred) {\n            activityOverlay.hide();\n          }\n        });\n      }\n    });\n  };\n  this.addBothTranslationButtonTypes = (languageId, inputContainers) => {\n    this.addTranslateToAllButton(languageId, inputContainers);\n    this.addTranslateFromDefaultButton(languageId, inputContainers[languageId]);\n  };\n\n  /**\n   * Init on object instantiation\n   */\n  (() => {\n    const actionTypes = _FtConfig.default.translationActionTypes;\n    const translationAction = _FtConfig.default.getTranslationAction();\n    for (let languageId in inputContainers) {\n      if (translationAction === actionTypes.all && !forceEachTranslationAction) {\n        this.addTranslateToAllButton(languageId, inputContainers);\n      }\n      if (translationAction === actionTypes.each || forceEachTranslationAction) {\n        this.addTranslateFromDefaultButton(languageId, inputContainers[languageId]);\n      }\n      if (translationAction === actionTypes.both && !forceEachTranslationAction) {\n        this.addTranslateToAllButton(languageId, inputContainers);\n        this.addTranslateFromDefaultButton(languageId, inputContainers[languageId]);\n      }\n    }\n  })();\n};\nvar _default = FtInputfieldTranslateButton;\nexports.default = _default;\n\n},{\"../global/Fluency\":2,\"../global/FtConfig\":3,\"./FtUiElements\":17}],16:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * A stateful function handling  behaviors for a language tab associated with a input container\n * contained within an Inputfield. An \"input container\" is the div that contains the label and\n * input/textarea/element (depending on Inputfield type) for a language\n * @param {Element} inputContainer Language\n */\nconst FtLanguageTab = function (inputContainer) {\n  /**\n   * Note\n   * @type {String}\n   */\n  const contentModifiedClass = 'ft-content-changed';\n\n  /**\n   * Cached associated tab for this input container\n   * @type {Element}\n   */\n  let languageTab = null;\n  this.getContentModifiedClass = () => contentModifiedClass;\n\n  /**\n   * Sets state of tab\n   * @param  {bool} modified Determines state of tab display\n   * @return {void}\n   */\n  this.setModifiedState = modified => modified ? this.setTabModified() : this.setTabUnmodified();\n  this.setTabModified = () => this.getLanguageTab().classList.add(contentModifiedClass);\n  this.setTabUnmodified = () => this.getLanguageTab().classList.remove(contentModifiedClass);\n  this.getLanguageTab = () => {\n    return languageTab ?? inputContainer.closest('.langTabs').querySelector(`.langTabLink[data-lang=\"${inputContainer.dataset.language}\"`);\n  };\n\n  /**\n   * Init method executed on object instantiation\n   * @return {void}\n   */\n  (() => {\n    if (!inputContainer) {\n      return false;\n    }\n    languageTab = this.getLanguageTab();\n  })();\n};\nvar _default = FtLanguageTab;\nexports.default = _default;\n\n},{}],17:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _FtConfig = _interopRequireDefault(require(\"../global/FtConfig\"));\nvar _Fluency = _interopRequireDefault(require(\"../global/Fluency\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Creates common HTML elements\n *\n * @return {Object} Public methods\n */\nconst FtUiElements = function () {\n  /**\n   * @type {Object}\n   */\n  const elementClasses = _FtConfig.default.elementClasses;\n\n  /**\n   * Gets all localized strings from the FluencyConfig object\n   * These do nothing on their own and must be bound with any behavior after creation\n   *\n   * @type {object}\n   */\n  const uiText = _FtConfig.default.getUiTextFor('inputfieldTranslateButtons');\n\n  /**\n   * Creates a language fontawesome icon element\n   *\n   * @return {Element}\n   */\n  const createIcon = () => {\n    const iconLink = document.createElement('a');\n    iconLink.setAttribute('href', `${ProcessWire.config.urls.admin}fluency/?modal=1`);\n    iconLink.setAttribute('class', 'pw-modal pw-modal-large');\n    const icon = document.createElement('i');\n    icon.setAttribute('class', `${_FtConfig.default.getElementClassesFor('icon')} fa fa-language`);\n    icon.setAttribute('uk-tooltip', uiText.showTranslator);\n    iconLink.appendChild(icon);\n    return iconLink;\n  };\n\n  /**\n   * Creates a status placeholder\n   *\n   * @param  {string} text Button text\n   * @return {Element}\n   */\n  const createStatusElement = text => {\n    const elClasses = _FtConfig.default.getElementClassesFor('statusPlaceholder');\n    const label = document.createElement('span');\n    label.setAttribute('class', elClasses.label);\n    label.innerText = text;\n    const container = document.createElement('div');\n    container.setAttribute('class', elClasses.container);\n    container.appendChild(createIcon());\n    container.appendChild(label);\n    return container;\n  };\n\n  /**\n   * Creates a translate button element\n   *\n   * @return {Object} Container element and Button element\n   */\n  const createTranslateButton = text => {\n    const elClasses = _FtConfig.default.getElementClassesFor('translateButton');\n    const button = document.createElement('a');\n    button.innerText = text;\n    button.setAttribute('class', elClasses.button);\n    button.setAttribute('href', '');\n    const container = document.createElement('div');\n    container.setAttribute('class', elClasses.container);\n    container.appendChild(createIcon());\n    container.appendChild(button);\n    return {\n      button,\n      container\n    };\n  };\n\n  /**\n   * Creates the translate to all for the language translator pages\n   *\n   * @param  {string} text Button label\n   * @return {Element}\n   */\n  const createLanguageTranslatorInputs = () => {\n    const elClasses = _FtConfig.default.getElementClassesFor('languageTranslator');\n    const texts = _FtConfig.default.getUiTextFor('languageTranslator');\n\n    // Translate All button\n    const translateAllButton = document.createElement('a');\n    translateAllButton.innerText = texts.translateAllButton;\n    translateAllButton.setAttribute('class', elClasses.translateButton);\n    translateAllButton.setAttribute('href', '');\n\n    // Source language select\n    const sourceLanguageSelect = document.createElement('select');\n    sourceLanguageSelect.setAttribute('class', elClasses.sourceLanguageSelect);\n\n    // Source language select options\n    _FtConfig.default.getConfiguredLanguages().forEach(function (language) {\n      const option = document.createElement('option');\n      option.textContent = language.title;\n      option.value = language.engineLanguage.sourceCode;\n      if (language.default) {\n        option.selected = 'selected';\n        sourceLanguageSelect.prepend(option);\n        return;\n      }\n      sourceLanguageSelect.appendChild(option);\n    });\n\n    // Source language select label text\n    const selectLabelText = document.createElement('span');\n    selectLabelText.innerText = texts.sourceLanguageSelectLabel;\n\n    // Source language select label\n    const sourceLanguageSelectLabel = document.createElement('label');\n    sourceLanguageSelectLabel.setAttribute('class', elClasses.sourceLanguageSelectLabel);\n    sourceLanguageSelectLabel.appendChild(selectLabelText);\n    sourceLanguageSelectLabel.appendChild(sourceLanguageSelect);\n\n    // Container that holds all UI elements\n    const content = document.createElement('div');\n    content.setAttribute('class', elClasses.content);\n    content.appendChild(translateAllButton);\n    content.appendChild(sourceLanguageSelectLabel);\n\n    // ProcessWire UI fields container\n    const container = document.createElement('li');\n    container.setAttribute('class', elClasses.container);\n    container.appendChild(content);\n    return {\n      translateAllButton,\n      sourceLanguageSelect,\n      container\n    };\n  };\n  return {\n    createStatusElement,\n    createTranslateButton,\n    createLanguageTranslatorInputs,\n    createIcon,\n    elementClasses\n  };\n}();\nvar _default = FtUiElements;\nexports.default = _default;\n\n},{\"../global/Fluency\":2,\"../global/FtConfig\":3}]},{},[1]);\n"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_FtInputfields","_interopRequireDefault","_FtAdminMenu","_FtConfig","obj","__esModule","default","window","addEventListener","moduleShouldInitialize","init","./global/FtConfig","./inputfields/FtInputfields","./ui/FtAdminMenu","2","Object","defineProperty","value","Fluency","errors","getUiTextFor","requestHeaders","requestType","X-Requested-With","getRequest","endpoint","responseHandler","fetch","method","cache","headers","then","parseResponse","catch","handleFetchError","deleteRequest","response","status","ok","json","error","console","message","returnObject","split","deleteTranslatableLanguagesCache","getApiEndpointFor","deleteTranslationCache","getAvailableLanguages","getTranslation","sourceLanguage","targetLanguage","content","let","options","arguments","undefined","caching","data","body","JSON","stringify","getUsage","./FtConfig","3","FtConfig","config","ProcessWire","fluency","localizedStrings","localization","elementClasses","translateButton","container","button","languageTranslator","sourceLanguageSelect","sourceLanguageSelectLabel","statusPlaceholder","label","icon","strings","activityOverlay","languageSelect","inputfieldTranslateButtons","standaloneTranslator","usage","endpoints","languages","apiEndpoints","translatableLanguagesCache","test","translation","translationCache","configuredLanguages","unconfiguredLanguages","getConfiguredLanguages","getUnconfiguredLanguages","getEngineInfo","engine","fieldInitializedAttr","key","getDefaultLanguage","reduce","defaultLang","lang","getElementClassesFor","element","getEngineProvidesUsageData","providesUsageData","getLanguageCount","getLanguageForId","pwLanguageId","parseInt","match","language","id","getTranslationAction","interface","inputfieldTranslationAction","getTranslationDisabledFieldAttribute","translationDisabledFieldAttr","languageIsTranslatable","languageId","includes","translationActionTypes","each","all","both","4","FtIsInputfieldCKEditor","FtInputfieldCKEditor","_FtActivityOverlay","_FtInputfieldTranslateButton","_FtLanguageTab","inputfield","querySelector","initValues","changedValues","languageTabs","inputContainers","editorInstances","defaultLanguageInstanceId","this","getActivityOverlay","getSelf","getValueForDefaultLanguage","getValueForLanguage","getEditorInstanceForLanguage","getData","setValueForLanguage","instance","setData","fire","contentHasChanged","ckeditorSelector","hasOwn","createCKEditorSelector","CKEDITOR","instances","getInputContainers","querySelectorAll","forEach","el","dataset","registerInputEventListener","on","setModifiedState","initContainers","allInputContainers","values","replace","inputContainer","setTimeout","../global/FtConfig","../ui/FtActivityOverlay","../ui/FtInputfieldTranslateButton","../ui/FtLanguageTab","./FtInputfields","5","FtIsInputfieldCKEditorInline","FtInputfieldCKEditorInline","contentElements","ckeditorInstance","getContentElementForLanguage","innerHTML","contentElement","setValue","dispatchEvent","Event","getInputContainerForLanguage","keys","registerUpdateEvent","MutationObserver","mutations","observer","mutation","target","observe","childList","6","createActivityOverlay","languageInput","languageFields","contentModifiedClass","getContentModifiedClass","activityOverlays","getFieldForLanguage","field","updateValue","name","classList","add","remove","7","FtIsInputfieldTable","isInputfieldTable","isInputfieldTableRow","contains","tagName","8","FtIsInputfieldText","FtInputfieldText","9","FtIsInputfieldTextarea","FtInputfieldTextarea","10","FtIsInputfieldTinyMCE","FtInputfieldTinyMCE","textareas","tinymceInstance","getTinymceInstanceForLanguage","getContent","getTextareaForLanguage","setContent","tinymceSelector","createTinymceSelector","tinymce","get","bindTinymceEvents","initTinymceInstanceOnCreation","disconnect","initAll","11","FtIsInputfieldTinyMCEInline","FtInputfieldTinyMCEInline","12","_FtInputfieldCKEditor","_FtInputfieldCKEditorInline","_FtInputfieldTable","_FtInputfieldText","_FtInputfieldTextarea","_FtInputfieldTinyMCE","_FtInputfieldTinyMCEInline","_FtInputfieldPageName","FtInputfields","langInputfieldClass","disableTranslationAttr","initInputfields","langInputfieldContainers","langInputfieldContainer","translationIsDisabled","initInputfield","fieldIsInitialized","closest","warn","setFieldIsInitialized","langTabContainer","hasAttribute","setAttribute","document","parentNode","getElementById","foundEls","subtree","pageNameInputfield","inputEl","focus","blur","./FtInputfieldCKEditor","./FtInputfieldCKEditorInline","./FtInputfieldPageName","./FtInputfieldTable","./FtInputfieldText","./FtInputfieldTextarea","./FtInputfieldTinyMCE","./FtInputfieldTinyMCEInline","13","targetContainer","_this","activityType","elClasses","parent","overlay","flash","success","activity","visible","activityContainer","activityStaticText","activityAnimationContainer","activityAnimationItem","messageContainer","showActivity","setActivityActive","setOverlayVisible","showMessage","displayTime","setMessageContent","setActivityInactive","setMessageActive","hide","flashSuccess","setSuccessActive","setFlashActive","flashError","setErrorActive","showError","delay","setOverlayInvisible","setMessageInactive","setErrorInactive","setFlashInactive","innerText","setSuccessInactive","create","buildOverlayEl","buildActivityEl","buildMessageEl","appendChild","createElement","text","getActivityTexts","animated","string","activityText","staticText","static","uiTexts","animationTexts","j","Math","floor","random","temp","targetContainerContainer","14","convertFtAdminMenuToModal","adminNavItems","urlParams","URLSearchParams","location","search","hrefSegments","href","filter","Boolean","15","_Fluency","_FtUiElements","forceEachTranslationAction","uiText","addTranslateFromDefaultButton","isTranslatable","isDefaultLanguage","createStatusElement","translationAvailable","createTranslateButton","bindButton","languageNotAvailable","buttonElement","languageConfig","preventDefault","translationSourceContent","engineLanguage","sourceCode","targetCode","result","translations","addTranslateToAllButton","sourceLanguageId","sourceInputContainer","translateToAllButton","bindTranslateToAllButton","sourceLanguageConfig","translationLanguageCount","errorOccurred","targetLanguageId","targetLanguageConfig","addBothTranslationButtonTypes","actionTypes","translationAction","../global/Fluency","./FtUiElements","16","languageTab","modified","setTabModified","setTabUnmodified","getLanguageTab","17","FtUiElements","createIcon","iconLink","urls","admin","showTranslator","createLanguageTranslatorInputs","texts","translateAllButton","option","textContent","title","selected","prepend","selectLabelText"],"mappings":"AAAA,CAAY,SAASA,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEC,GAAG,GAAG,CAACJ,EAAEG,GAAG,CAAC,GAAG,CAACJ,EAAEI,GAAG,CAAC,IAAIE,EAAE,YAAY,OAAOC,SAASA,QAAQ,GAAG,CAACF,GAAGC,EAAE,OAAOA,EAAEF,EAAE,CAAA,CAAE,EAAE,GAAGI,EAAE,OAAOA,EAAEJ,EAAE,CAAA,CAAE,EAAgD,MAA1CK,EAAE,IAAIC,MAAM,uBAAuBN,EAAE,GAAG,GAAUO,KAAK,mBAAmBF,CAAC,CAAKG,EAAEX,EAAEG,GAAG,CAACS,QAAQ,EAAE,EAAEb,EAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAoB,OAAOI,EAAlBH,EAAEI,GAAG,GAAGL,IAAeA,CAAC,CAAC,EAAEa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,CAAC,CAAC,CAAC,OAAOD,EAAEG,GAAGS,OAAO,CAAC,IAAI,IAAIL,EAAE,YAAY,OAAOD,SAASA,QAAQH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,CAAC,GAAGD,EAAED,EAAEE,EAAE,EAAE,OAAOD,CAAC,EAAc,CAACa,EAAE,CAAC,SAAST,EAAQU,EAAOJ,GACxe,aAEA,IAAIK,EAAiBC,EAAuBZ,EAAQ,6BAA6B,CAAC,EAC9Ea,EAAeD,EAAuBZ,EAAQ,kBAAkB,CAAC,EACjEc,EAAYF,EAAuBZ,EAAQ,mBAAmB,CAAC,EACnE,SAASY,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,CAAG,CAE9FG,OAAOC,iBAAiB,OAAQ1B,IAC1BqB,EAAUG,QAAQG,uBAAuB,IAC3CP,EAAaI,QAAQI,KAAK,EAC1BV,EAAeM,QAAQI,KAAK,EAEhC,CAAC,CAED,EAAE,CAACC,oBAAoB,EAAEC,8BAA8B,GAAGC,mBAAmB,EAAE,GAAGC,EAAE,CAAC,SAASzB,EAAQU,EAAOJ,GAC7G,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQW,QAAU,KAAA,EAClB,IAAIH,GAC4BC,EADOf,EAAQ,YAAY,IACNe,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,EAOrFc,EAAU,WAKd,MAAMC,EAAShB,EAAUG,QAAQc,aAAa,QAAQ,EA8EtD,MAAMC,EAAiBC,IACrB,IAAMD,EAAiB,CACrBE,mBAAoB,gBACtB,EAOA,MANoB,QAAhBD,IACFD,EAAuB,OAAI,oBAET,SAAhBC,IACFD,EAAe,gBAAkB,oBAE5BA,CACT,EAwBMG,EAAa,CAACC,EAAUC,IACrBC,MAAMF,EAAU,CACrBG,OAAQ,MACRC,MAAO,WACPC,QAAST,EAAe,KAAK,CAC/B,CAAC,EAAEU,KAAKC,CAAa,EAAED,KAAKL,CAAe,EAAEO,MAAMC,CAAgB,EAS/DC,EAAgB,CAACV,EAAUC,IACxBC,MAAMF,EAAU,CACrBG,OAAQ,SACRE,QAAST,EAAe,KAAK,CAC/B,CAAC,EAAEU,KAAKC,CAAa,EAAED,KAAKL,CAAe,EAAEO,MAAMC,CAAgB,EAS/DF,EAAgBI,IACpB,GAAwB,MAApBA,EAASC,OACX,OAAOD,EAET,GAAIA,EAASE,GACX,OAAOF,EAASG,KAAK,EAEvB,MAAM,IAAI/C,KACZ,EASM0C,EAAmBM,IACvBC,QAAQD,MAAM,+BAAgCA,EAAME,OAAO,EAC3D,IAAMC,EAAe,CACnBH,MAAO,KACPE,QAAS,IACX,EAWA,MATO,iBADCF,EAAME,QAAQE,MAAM,GAAG,EAAE,IAE7BD,EAAaH,MAAQ,8BACrBG,EAAaD,QAAUvB,EAAoC,8BAG3DwB,EAAaH,MAAQ,gBACrBG,EAAaD,QAAUvB,EAAsB,eAG1CwB,CACT,EACA,MAAO,CACLE,iCAhHuC,IAChCV,EAAchC,EAAUG,QAAQwC,kBAAkB,4BAA4B,EAAGV,GAC/EA,CACR,EA8GDW,uBA3H6B,IACtBZ,EAAchC,EAAUG,QAAQwC,kBAAkB,kBAAkB,EAAGV,GACrEA,CACR,EAyHDY,sBAtI4B,IACrBxB,EAAWrB,EAAUG,QAAQwC,kBAAkB,WAAW,EAAGV,GAC3DA,CACR,EAoIDa,eApKqB,SAAUC,EAAgBC,EAAgBC,GAC/DC,IAkFmB5B,EAlFf6B,EAA6B,EAAnBC,UAAU1D,QAA+B2D,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,GAC9EE,EAA6B,EAAnBF,UAAU1D,QAA+B2D,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,KAClF,OAgFmB9B,EAhFAtB,EAAUG,QAAQwC,kBAAkB,aAAa,EAgFvCY,EAhF0C,CACrER,eAAgBA,EAChBC,eAAgBA,EAChBC,QAASA,EACTE,QAASA,EACTG,QAASA,CACX,EA0EmC/B,EA1EhCU,GACMA,EA0EFT,MAAMF,EAAU,CACrBG,OAAQ,OACRC,MAAO,WACPC,QAAST,EACTsC,KAAMC,KAAKC,UAAUH,CAAI,CAC3B,CAAC,EAAE3B,KAAKC,CAAa,EAAED,KAAKL,CAAe,EAAEO,MAAMC,CAAgB,CA7ErE,EAyJE4B,SAnJe,IACRtC,EAAWrB,EAAUG,QAAQwC,kBAAkB,OAAO,EAAGV,GACvDA,CACR,CAiJH,CACF,EAAE,EAEFzC,EAAQW,QADOY,CAGf,EAAE,CAAC6C,aAAa,CAAC,GAAGC,EAAE,CAAC,SAAS3E,EAAQU,EAAOJ,GAC/C,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQW,QAAU,KAAA,EAKlB,IAAM2D,EAAW,WAiBf,MAAMC,EAASC,YAAYD,OAAOE,QAMlC,IAAMC,EAAmBH,EAAOI,aAMhC,MAAMC,EAAiB,CACrBC,gBAAiB,CACfC,UAAW,gCACXC,OAAQ,qBACV,EACAC,mBAAoB,CAClBF,UAAW,oCACXrB,QAAS,0DACToB,gBAAiB,0BACjBI,qBAAsB,sCACtBC,0BAA2B,iCAC7B,EACAC,kBAAmB,CACjBL,UAAW,kCACXM,MAAO,uBACT,EACAC,KAAM,SACR,EAYMC,EAAU,CACdC,gBAAiBb,EAAiBa,gBAClCC,eAAgBd,EAAiBc,eACjCC,2BAA4Bf,EAAiBe,2BAC7CC,qBAAsBhB,EAAiBgB,qBACvCC,MAAOjB,EAAiBiB,MACxBnE,OAAQkD,EAAiBlD,OACzBwD,mBAAoBN,EAAiBM,kBACvC,EAMMY,EAAY,CAChBC,UAAWtB,EAAOuB,aAAaD,UAC/BE,2BAA4BxB,EAAOuB,aAAaC,2BAChDC,KAAMzB,EAAOuB,aAAaE,KAC1BC,YAAa1B,EAAOuB,aAAaG,YACjCC,iBAAkB3B,EAAOuB,aAAaI,iBACtCP,MAAOpB,EAAOuB,aAAaH,KAC7B,EAMMQ,EAAsB5B,EAAO4B,oBAM7BC,EAAwB7B,EAAO6B,sBAiBrC,MAAMC,EAAyB,IAAMF,EAmBrC,MAAMG,EAA2B,IAAMF,EA4CvC,MAAMG,EAAgB,IAAMhC,EAAOiC,OA0BnC,MAAO,CACLC,qBAnM2B,sBAoM3BtD,kBArGwBuD,GAAOd,EAAUc,GAsGzCL,uBAAAA,EACAM,mBAvFyB,IANUR,EAMqBS,OAAO,CAACC,EAAaC,IAASA,EAAKnG,QAAUmG,EAAOD,EAAa,IAAI,EAwF7HE,qBAN2BC,GAAWpC,EAAeoC,GAOrDT,cAAAA,EACAU,2BA3BiC,IAAMV,EAAc,EAAEW,kBA4BvDC,iBAxEuB,IAzBYhB,EAyBmBjG,OANjBkG,EAMqDlG,OAyE1FkH,iBAlEuBC,IACvBA,EAAeC,SAASD,EAAc,EAAE,EAjCLlB,EAkCHS,OAAO,CAACW,EAAOC,IAAaA,EAASC,KAAOJ,EAAeG,EAAWD,EAAO,IAAI,GAiEjHG,qBAxB2B,IAAMnD,EAAOoD,UAAUC,4BAyBlDC,qCAnB2C,QAAUtD,EAAOoD,UAAUG,gCAoBtErG,aAvDmBiF,GAAOpB,EAAQoB,GAwDlCJ,yBAAAA,EACAyB,uBA1F6BC,GAAc,CAMN5B,EANkC6B,SAASX,SAASU,EAAY,EAAE,CAAC,EA2FxGlH,uBA/C6B,IAAwC,EAzDlCqF,EAyDyBjG,OAgD5DgI,uBAjN6B,CAC7BC,KAAM,0BACNC,IAAK,6BACLC,KAAM,MACR,CA8MA,CACF,EAAE,EAEFrI,EAAQW,QADO2D,CAGf,EAAE,IAAIgE,EAAE,CAAC,SAAS5I,EAAQU,EAAOJ,GACjC,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQuI,uBAAyBvI,EAAQwI,qBAAuB,KAAA,EAChE,IAAIC,EAAqBnI,EAAuBZ,EAAQ,yBAAyB,CAAC,EAC9Ec,EAAYF,EAAuBZ,EAAQ,oBAAoB,CAAC,EAEhEgJ,GADiBpI,EAAuBZ,EAAQ,iBAAiB,CAAC,EACnCY,EAAuBZ,EAAQ,mCAAmC,CAAC,GAClGiJ,EAAiBrI,EAAuBZ,EAAQ,qBAAqB,CAAC,EAC1E,SAASY,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,CAAG,CAY9FT,EAAQuI,uBANuBK,GAAc,CAAC,CAACA,EAAWC,cAAc,2BAA2B,EAyMnG7I,EAAQwI,qBAlMqB,SAAUI,GAOrC,MAAME,EAAa,GAQbC,EAAgB,GAQhBC,EAAe,GAQfC,EAAkB,GAQlBC,EAAkB,GAQxBxF,IAAIyF,EAA4B,KAQ5B5D,EAQJ6D,KAAKC,mBAAqB,IAAM9D,EAMhC6D,KAAKE,QAAU,IAAMV,EAMrBQ,KAAKG,2BAA6B,IAAMH,KAAKI,oBAAoBhJ,EAAUG,QAAQgG,mBAAmB,EAAEc,EAAE,EAO1G2B,KAAKI,oBAAsBxB,GAAcoB,KAAKK,6BAA6BzB,CAAU,EAAE0B,QAAQ,EAQ/FN,KAAKO,oBAAsB,CAAC3B,EAAY1G,KACtC,IAAMsI,EAAWR,KAAKK,6BAA6BzB,CAAU,EAG7D,OAFA4B,EAASC,QAAQvI,CAAK,EACtBsI,EAASE,KAAK,QAAQ,EACfV,KAAKW,kBAAkB/B,CAAU,CAC1C,EAUAoB,KAAKK,6BAA+BzB,IAClC,IAGMgC,EAEN,OALI5I,OAAO6I,OAAOf,EAAiBlB,CAAU,GAAOkB,EAAgBlB,KAG9DgC,EAAmBZ,KAAKc,uBAAuBlC,CAAU,EAC/DkB,EAAgBlB,GAAcmC,SAASC,UAAUJ,IAC1Cd,EAAgBlB,EACzB,EAQAoB,KAAKc,uBAAyBlC,GACxBA,GAAcxH,EAAUG,QAAQgG,mBAAmB,EAAEc,GAChD0B,EAECA,EAAH,KAAiCnB,EAQ1CoB,KAAKiB,mBAAqB,KACxBjB,KAAKE,QAAQ,EAAEgB,iBAAiB,iBAAiB,EAAEC,QAAQC,IACzDvB,EAAgBuB,EAAGC,QAAQjD,UAAYgD,CACzC,CAAC,EACMvB,GAQTG,KAAKW,kBAAoB/B,GAAc5G,OAAO6I,OAAOlB,EAAef,CAAU,GAAKe,EAAcf,KAAgBc,EAAWd,GAQ5HoB,KAAKsB,2BAA6B1C,IAChCoB,KAAKK,6BAA6BzB,CAAU,EAAE2C,GAAG,SAAUxL,IACzD4J,EAAcf,GAAcoB,KAAKI,oBAAoBxB,CAAU,EAC/DgB,EAAahB,GAAY4C,iBAAiBxB,KAAKW,kBAAkB/B,CAAU,CAAC,CAC9E,CAAC,CACH,EAOAoB,KAAKyB,eAAiB,KACpB,IAES7C,EAFH8C,EAAqB1B,KAAKiB,mBAAmB,EAEnD,IAASrC,KADTmB,EAA4B/H,OAAO2J,OAAOD,CAAkB,EAAE,GAAGrD,GAAGuD,QAAQ,WAAY,EAAE,EACnEF,EAAoB,CACzCpH,IAAIuH,EAAiBH,EAAmB9C,GACxCkB,EAAgBlB,GAAcoB,KAAKK,6BAA6BzB,CAAU,EAC1EgB,EAAahB,GAAc,IAAIW,EAAehI,QAAQsK,CAAc,EACpE7B,KAAKsB,2BAA2B1C,CAAU,CAC5C,CACAzC,EAAkB,IAAIkD,EAAmB9H,QAAQyI,IAAI,EACrD,IAAIV,EAA6B/H,QAAQyI,KAAM0B,CAAkB,CACnE,EAQmBjH,KAAAA,IAAbsG,SACFrH,QAAQD,MAAM,4DAA4D,EAO5EqI,WAAW9B,KAAKyB,eAAgB,EAAE,CAEtC,CAGA,EAAE,CAACM,qBAAqB,EAAEC,0BAA0B,GAAGC,oCAAoC,GAAGC,sBAAsB,GAAGC,kBAAkB,EAAE,GAAGC,EAAE,CAAC,SAAS9L,EAAQU,EAAOJ,GACzK,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQyL,6BAA+BzL,EAAQ0L,2BAA6B,KAAA,EAC5E,IAAIjD,EAAqBnI,EAAuBZ,EAAQ,yBAAyB,CAAC,EAC9Ec,EAAYF,EAAuBZ,EAAQ,oBAAoB,CAAC,EAEhEgJ,GADiBpI,EAAuBZ,EAAQ,iBAAiB,CAAC,EACnCY,EAAuBZ,EAAQ,mCAAmC,CAAC,GAClGiJ,EAAiBrI,EAAuBZ,EAAQ,qBAAqB,CAAC,EAC1E,SAASY,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,CAAG,CAY9FT,EAAQyL,6BAN6B7C,GAAc,CAAC,CAACA,EAAWC,cAAc,2BAA2B,EA6PzG7I,EAAQ0L,2BAtP2B,SAAU9C,GAO3C,MAAME,EAAa,GAQbC,EAAgB,GAQhBC,EAAe,GAQfC,EAAkB,GAQlBC,EAAkB,GAOlByC,EAAkB,GAQxBjI,IAAIyF,EAA4B,KAQ5B5D,EAwKF,GAhKF6D,KAAKC,mBAAqB,IAAM9D,EAMhC6D,KAAKE,QAAU,IAAMV,EAMrBQ,KAAKG,2BAA6B,IAAMH,KAAKI,oBAAoBhJ,EAAUG,QAAQgG,mBAAmB,EAAEc,EAAE,EAS1G2B,KAAKI,oBAAsBxB,IACzB,IAAM4D,EAAmBxC,KAAKK,6BAA6BzB,CAAU,EACrE,OAAI4D,EACKA,EAAiBlC,QAAQ,EAE3BN,KAAKyC,6BAA6B7D,CAAU,EAAE8D,SACvD,EAQA1C,KAAKO,oBAAsB,CAAC3B,EAAY1G,KACtC,IAAMsI,EAAWR,KAAKK,6BAA6BzB,CAAU,EACvD+D,EAAiB3C,KAAKyC,6BAA6B7D,CAAU,EAGnE,OAFA4B,EAAWA,EAASoC,SAAS1K,CAAK,EAAIyK,EAAeD,UAAYxK,EACjEyK,EAAeE,cAAc,IAAIC,MAAM,OAAO,CAAC,EACxC9C,KAAKW,kBAAkB/B,CAAU,CAC1C,EAUAoB,KAAKK,6BAA+BzB,IAC9B5G,OAAO6I,OAAOf,EAAiBlB,CAAU,GAAOkB,EAAgBlB,KAGpEkB,EAAgBlB,GAAcmC,SAASC,UAAUhB,KAAKc,uBAAuBlC,CAAU,IAChFkB,EAAgBlB,IAUzBoB,KAAKyC,6BAA+B7D,IAC9B5G,OAAO6I,OAAO0B,EAAiB3D,CAAU,IAG7C2D,EAAgB3D,GAAcoB,KAAK+C,6BAA6BnE,CAAU,EAAEa,cAAc,iCAAiC,GACpH8C,EAAgB3D,IASzBoB,KAAKc,uBAAyBlC,GACxBA,GAAcxH,EAAUG,QAAQgG,mBAAmB,EAAEc,GAChD0B,EAECA,EAAH,KAAiCnB,EAQ1CoB,KAAKiB,mBAAqB,KACpBjJ,OAAOgL,KAAKnD,CAAe,EAAE/I,SAAWM,EAAUG,QAAQwG,iBAAiB,GAG/EiC,KAAKE,QAAQ,EAAEgB,iBAAiB,iBAAiB,EAAEC,QAAQC,IACzDvB,EAAgBuB,EAAGC,QAAQjD,UAAYgD,CACzC,CAAC,EACMvB,GASTG,KAAK+C,6BAA+BnE,IAC9B5G,OAAO6I,OAAOhB,EAAiBjB,CAAU,IAG7CiB,EAAgBjB,GAAcY,EAAWC,iCAAiCb,KAAc,GACjFiB,EAAgBjB,IAQzBoB,KAAKW,kBAAoB/B,GAAc5G,OAAO6I,OAAOlB,EAAef,CAAU,GAAKe,EAAcf,KAAgBc,EAAWd,GAS5HoB,KAAKiD,oBAAsBrE,IACnB+D,EAAiB3C,KAAKyC,6BAA6B7D,CAAU,EACnE,IAAIsE,iBAAiB,CAACC,EAAWC,KAC/B,IAAK9I,IAAI+I,KAAYF,EACnBE,EAASC,OAAOT,cAAc,IAAIC,MAAM,OAAO,CAAC,CAEpD,CAAC,EAAES,QAAQZ,EAAgB,CACzBa,UAAW,CAAA,CACb,CAAC,CACH,EAQAxD,KAAKsB,2BAA6B1C,IAChCoB,KAAKyC,6BAA6B7D,CAAU,EAAEnH,iBAAiB,QAAS1B,IACtE4J,EAAcf,GAAcoB,KAAKI,oBAAoBxB,CAAU,EAC/DgB,EAAahB,GAAY4C,iBAAiBxB,KAAKW,kBAAkB/B,CAAU,CAAC,CAC9E,CAAC,CACH,EAQmBnE,KAAAA,IAAbsG,SACFrH,QAAQD,MAAM,4DAA4D,MAD5E,CAIA,IAESmF,EAFH8C,EAAqB1B,KAAKiB,mBAAmB,EAEnD,IAASrC,KADTmB,EAA4B/H,OAAO2J,OAAOD,CAAkB,EAAE,GAAGrD,GAAGuD,QAAQ,WAAY,EAAE,EACnEF,EAAoB,CACzCpH,IAAIuH,EAAiBH,EAAmB9C,GACxCkB,EAAgBlB,GAAcoB,KAAKK,6BAA6BzB,CAAU,EAC1EgB,EAAahB,GAAc,IAAIW,EAAehI,QAAQsK,CAAc,EACpE7B,KAAKsB,2BAA2B1C,CAAU,CAC5C,CACAzC,EAAkB,IAAIkD,EAAmB9H,QAAQyI,IAAI,EACrD,IAAIV,EAA6B/H,QAAQyI,KAAM0B,CAAkB,CAVjE,CAYJ,CAGA,EAAE,CAACK,qBAAqB,EAAEC,0BAA0B,GAAGC,oCAAoC,GAAGC,sBAAsB,GAAGC,kBAAkB,EAAE,GAAGsB,EAAE,CAAC,SAASnN,EAAQU,EAAOJ,GACzK,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQW,QAAU,KAAA,EAClB,IAAI8H,EAAqBnI,EAAuBZ,EAAQ,yBAAyB,CAAC,EAC9Ec,EAAYF,EAAuBZ,EAAQ,oBAAoB,CAAC,EAChEW,EAAiBC,EAAuBZ,EAAQ,iBAAiB,CAAC,EAClEgJ,EAA+BpI,EAAuBZ,EAAQ,mCAAmC,CAAC,EAClGiJ,EAAiBrI,EAAuBZ,EAAQ,qBAAqB,CAAC,EAC1E,SAASY,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,CAAG,CA6LhE,SAAxBqM,EAAkCC,GACtCrJ,IAAI6B,EACJ6D,KAAKE,QAAU,IAAMyD,EACrB3D,KAAKC,mBAAqB,IAAM9D,EAE9BA,EAAkB,IAAIkD,EAAmB9H,QAAQyI,IAAI,CAEzD,CAEApJ,EAAQW,QA9LqB,SAAUiI,GAOrC,MAAME,EAAa,GAObC,EAAgB,GActB,MAAME,EAAkB,GAOlB+D,EAAiB,GACvBtJ,IAAIuJ,GAAuB,IAAItE,EAAehI,SAAUuM,wBAAwB,EAO5EC,EAAmB,GAQvB/D,KAAKC,mBAAqBrB,GACnBA,EAGEmF,EAAiBnF,GAAYqB,mBAAmB,EAF9C,KASXD,KAAKE,QAAU,IAAMV,EAMrBQ,KAAKG,2BAA6B,IAAMH,KAAKI,oBAAoBhJ,EAAUG,QAAQgG,mBAAmB,EAAEc,EAAE,EAO1G2B,KAAKI,oBAAsBxB,GAAcoB,KAAKgE,oBAAoBpF,CAAU,EAAE1G,MAQ9E8H,KAAKO,oBAAsB,CAAC3B,EAAY1G,KACtC,IAAM+L,EAAQjE,KAAKgE,oBAAoBpF,CAAU,EAKjD,OAJA3H,EAAeM,QAAQ2M,YAAYD,EAAO/L,CAAK,EAG/C+L,EAAMpB,cAAc,IAAIC,MAAM,OAAO,CAAC,EAC/B9C,KAAKW,kBAAkB/B,CAAU,CAC1C,EAOAoB,KAAKgE,oBAAsBpF,IACrB5G,OAAO6I,OAAO+C,EAAgBhF,CAAU,GAAOgF,EAAehF,KAGlEgF,EAAehF,GAAcoB,KAAK+C,6BAA6BnE,CAAU,EAAEa,cAAc,OAAO,GACzFmE,EAAehF,IASxBoB,KAAK+C,6BAA+BnE,IAC7B5G,OAAO6I,OAAOhB,EAAiBjB,CAAU,GAAMiB,EAAgBjB,IAClEoB,KAAKiB,mBAAmB,EAEnBpB,EAAgBjB,IAQzBoB,KAAKiB,mBAAqB,KAGxBjB,KAAKE,QAAQ,EAAEgB,iBAAiB,kBAAkB,EAAEC,QAAQC,IAE1D,IAAMxC,EAAawC,EAAG3B,cAAc,kBAAkB,EAAE0E,KAAKvC,QAAQ,gBAAiB,EAAE,GAAKxK,EAAUG,QAAQgG,mBAAmB,EAAEc,GACpIwB,EAAgBjB,GAAcwC,CAChC,CAAC,EACMvB,GAQTG,KAAKW,kBAAoB/B,GAAc5G,OAAO6I,OAAOlB,EAAef,CAAU,GAAKe,EAAcf,KAAgBc,EAAWd,GAC5HoB,KAAKwB,iBAAmB,CAAC5C,EAAY+B,KAC7BkB,EAAiB7B,KAAK+C,6BAA6BnE,CAAU,EAC/D+B,GACFkB,EAAeuC,UAAUC,IAAIR,CAAoB,EAE9ClD,GACHkB,EAAeuC,UAAUE,OAAOT,CAAoB,CAExD,EAQA7D,KAAKsB,2BAA6B1C,IAChCoB,KAAKgE,oBAAoBpF,CAAU,EAAEnH,iBAAiB,QAAS1B,IAC7D4J,EAAcf,GAAc7I,EAAEuN,OAAOpL,MACrC8H,KAAKwB,iBAAiB5C,EAAYoB,KAAKW,kBAAkB/B,CAAU,CAAC,CACtE,CAAC,CACH,EAUE,IACSA,EADH8C,EAAqB1B,KAAKiB,mBAAmB,EACnD,IAASrC,KAAc8C,EAAoB,CACzCpH,IAAIuH,EAAiBH,EAAmB9C,GACxCc,EAAWd,GAAcoB,KAAKI,oBAAoBxB,CAAU,EAC5DmF,EAAiBnF,GAAc,IAAI8E,EAAsB7B,CAAc,EACvE7B,KAAKsB,2BAA2B1C,CAAU,CAC5C,CACA,IAAIU,EAA6B/H,QAAQyI,KAAM0B,EAAoB,CAAA,CAAI,CAE3E,CAYA,EAAE,CAACK,qBAAqB,EAAEC,0BAA0B,GAAGC,oCAAoC,GAAGC,sBAAsB,GAAGC,kBAAkB,EAAE,GAAGoC,EAAE,CAAC,SAASjO,EAAQU,EAAOJ,GACzK,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQ4N,oBAAsB,KAAA,EAa9B5N,EAAQ4N,oBAPoBhF,GAAciF,EAAkBjF,CAAU,GAAKkF,EAAqBlF,CAAU,EAQ1G,MAAMiF,EAAoBjF,GAAc,CAAC,CAACA,EAAW4E,UAAUO,SAAS,iBAAiB,EACnFD,EAAuBlF,GAAuC,UAAzB,CAAC,CAACA,EAAWoF,SAAuBpF,EAAW0B,iBAAiB,8BAA8B,EAAEpK,MAE3I,EAAE,IAAI+N,EAAE,CAAC,SAASvO,EAAQU,EAAOJ,GACjC,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQkO,mBAAqBlO,EAAQmO,iBAAmB,KAAA,EACxD,IAAI1F,EAAqBnI,EAAuBZ,EAAQ,yBAAyB,CAAC,EAC9Ec,EAAYF,EAAuBZ,EAAQ,oBAAoB,CAAC,EAChEW,EAAiBC,EAAuBZ,EAAQ,iBAAiB,CAAC,EAClEgJ,EAA+BpI,EAAuBZ,EAAQ,mCAAmC,CAAC,EAClGiJ,EAAiBrI,EAAuBZ,EAAQ,qBAAqB,CAAC,EAC1E,SAASY,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,CAAG,CAc9FT,EAAQkO,mBARmBtF,GAAc,CAAC,CAACA,EAAWC,cAAc,oBAAoB,EA0KxF7I,EAAQmO,iBAjKiB,SAAUvF,GAOjC,MAAME,EAAa,GAObC,EAAgB,GAOhBC,EAAe,GAOfC,EAAkB,GAOlB+D,EAAiB,GAQvBtJ,IAAI6B,EAMJ6D,KAAKC,mBAAqB,IAAM9D,EAMhC6D,KAAKE,QAAU,IAAMV,EAMrBQ,KAAKG,2BAA6B,IAAMH,KAAKI,oBAAoBhJ,EAAUG,QAAQgG,mBAAmB,EAAEc,EAAE,EAO1G2B,KAAKI,oBAAsBxB,GAAcoB,KAAKgE,oBAAoBpF,CAAU,EAAE1G,MAQ9E8H,KAAKO,oBAAsB,CAAC3B,EAAY1G,KACtC,IAAM+L,EAAQjE,KAAKgE,oBAAoBpF,CAAU,EAKjD,OAJA3H,EAAeM,QAAQ2M,YAAYD,EAAO/L,CAAK,EAG/C+L,EAAMpB,cAAc,IAAIC,MAAM,OAAO,CAAC,EAC/B9C,KAAKW,kBAAkB/B,CAAU,CAC1C,EAOAoB,KAAKgE,oBAAsBpF,IACrB5G,OAAO6I,OAAO+C,EAAgBhF,CAAU,GAAOgF,EAAehF,KAGlEgF,EAAehF,GAAcoB,KAAK+C,6BAA6BnE,CAAU,EAAEa,cAAc,OAAO,GACzFmE,EAAehF,IASxBoB,KAAK+C,6BAA+BnE,IAC9B5G,OAAO6I,OAAOhB,EAAiBjB,CAAU,GAAOiB,EAAgBjB,KAGpEiB,EAAgBjB,GAAcY,EAAWC,iCAAiCb,KAAc,GACjFiB,EAAgBjB,IAQzBoB,KAAKiB,mBAAqB,KACxBzB,EAAW0B,iBAAiB,iBAAiB,EAAEC,QAAQC,GAAMvB,EAAgBuB,EAAGC,QAAQjD,UAAYgD,CAAE,EAC/FvB,GAQTG,KAAKW,kBAAoB/B,GAAc5G,OAAO6I,OAAOlB,EAAef,CAAU,GAAKe,EAAcf,KAAgBc,EAAWd,GAQ5HoB,KAAKsB,2BAA6B1C,IAChCoB,KAAKgE,oBAAoBpF,CAAU,EAAEnH,iBAAiB,QAAS1B,IAC7D4J,EAAcf,GAAc7I,EAAEuN,OAAOpL,MACrC0H,EAAahB,GAAY4C,iBAAiBxB,KAAKW,kBAAkB/B,CAAU,CAAC,CAC9E,CAAC,CACH,EAUE,IACSA,EADH8C,EAAqB1B,KAAKiB,mBAAmB,EACnD,IAASrC,KAAc8C,EAAoB,CACzCpH,IAAIuH,EAAiBH,EAAmB9C,GACxCc,EAAWd,GAAcoB,KAAKI,oBAAoBxB,CAAU,EAC5DgB,EAAahB,GAAc,IAAIW,EAAehI,QAAQsK,CAAc,EACpE7B,KAAKsB,2BAA2B1C,CAAU,CAC5C,CACAzC,EAAkB,IAAIkD,EAAmB9H,QAAQyI,IAAI,EACrD,IAAIV,EAA6B/H,QAAQyI,KAAM0B,CAAkB,CAErE,CAGA,EAAE,CAACK,qBAAqB,EAAEC,0BAA0B,GAAGC,oCAAoC,GAAGC,sBAAsB,GAAGC,kBAAkB,EAAE,GAAG6C,EAAE,CAAC,SAAS1O,EAAQU,EAAOJ,GACzK,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQqO,uBAAyBrO,EAAQsO,qBAAuB,KAAA,EAChE,IAAI7F,EAAqBnI,EAAuBZ,EAAQ,yBAAyB,CAAC,EAC9Ec,EAAYF,EAAuBZ,EAAQ,oBAAoB,CAAC,EAChEW,EAAiBC,EAAuBZ,EAAQ,iBAAiB,CAAC,EAClEgJ,EAA+BpI,EAAuBZ,EAAQ,mCAAmC,CAAC,EAClGiJ,EAAiBrI,EAAuBZ,EAAQ,qBAAqB,CAAC,EAC1E,SAASY,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,CAAG,CAc9FT,EAAQqO,uBARuBzF,GAAc,CAAC,CAACA,EAAWC,cAAc,kEAAkE,EAoJ1I7I,EAAQsO,qBA3IqB,SAAU1F,GAMrC,MAAME,EAAa,GAMbC,EAAgB,GAOhBC,EAAe,GAOfC,EAAkB,GAMlB+D,EAAiB,GAQvBtJ,IAAI6B,EAMJ6D,KAAKC,mBAAqB,IAAM9D,EAKhC6D,KAAKE,QAAU,IAAMV,EAKrBQ,KAAKG,2BAA6B,IAAMH,KAAKI,oBAAoBhJ,EAAUG,QAAQgG,mBAAmB,EAAEc,EAAE,EAM1G2B,KAAKI,oBAAsBxB,GAAcoB,KAAKgE,oBAAoBpF,CAAU,EAAE1G,MAO9E8H,KAAKO,oBAAsB,CAAC3B,EAAY1G,KACtC,IAAM+L,EAAQjE,KAAKgE,oBAAoBpF,CAAU,EAKjD,OAJA3H,EAAeM,QAAQ2M,YAAYD,EAAO/L,CAAK,EAG/C+L,EAAMpB,cAAc,IAAIC,MAAM,OAAO,CAAC,EAC/B9C,KAAKW,kBAAkB/B,CAAU,CAC1C,EAMAoB,KAAKgE,oBAAsBpF,IACrB5G,OAAO6I,OAAO+C,EAAgBhF,CAAU,IAG5CgF,EAAehF,GAAcY,EAAWC,iCAAiCb,cAAuB,GACzFgF,EAAehF,IAOxBoB,KAAKiB,mBAAqB,KACxBzB,EAAW0B,iBAAiB,iBAAiB,EAAEC,QAAQC,IACrDvB,EAAgBuB,EAAGC,QAAQjD,UAAYgD,CACzC,CAAC,EACMvB,GAOTG,KAAKW,kBAAoB/B,GAAc5G,OAAO6I,OAAOlB,EAAef,CAAU,GAAKe,EAAcf,KAAgBc,EAAWd,GAQ5HoB,KAAKsB,2BAA6B1C,IAChCoB,KAAKgE,oBAAoBpF,CAAU,EAAEnH,iBAAiB,QAAS1B,IAC7D4J,EAAcf,GAAc7I,EAAEuN,OAAOpL,MACrC0H,EAAahB,GAAY4C,iBAAiBxB,KAAKW,kBAAkB/B,CAAU,CAAC,CAC9E,CAAC,CACH,EAUE,IACSA,EADH8C,EAAqB1B,KAAKiB,mBAAmB,EACnD,IAASrC,KAAc8C,EAAoB,CACzCpH,IAAIuH,EAAiBH,EAAmB9C,GACxCc,EAAWd,GAAcoB,KAAKI,oBAAoBxB,CAAU,EAC5DgB,EAAahB,GAAc,IAAIW,EAAehI,QAAQsK,CAAc,EACpE7B,KAAKsB,2BAA2B1C,CAAU,CAC5C,CACAzC,EAAkB,IAAIkD,EAAmB9H,QAAQyI,IAAI,EACrD,IAAIV,EAA6B/H,QAAQyI,KAAM0B,CAAkB,CAErE,CAGA,EAAE,CAACK,qBAAqB,EAAEC,0BAA0B,GAAGC,oCAAoC,GAAGC,sBAAsB,GAAGC,kBAAkB,EAAE,GAAGgD,GAAG,CAAC,SAAS7O,EAAQU,EAAOJ,GAC1K,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQwO,sBAAwBxO,EAAQyO,oBAAsB,KAAA,EAC9D,IAAIhG,EAAqBnI,EAAuBZ,EAAQ,yBAAyB,CAAC,EAC9Ec,EAAYF,EAAuBZ,EAAQ,oBAAoB,CAAC,EAChEW,EAAiBC,EAAuBZ,EAAQ,iBAAiB,CAAC,EAClEgJ,EAA+BpI,EAAuBZ,EAAQ,mCAAmC,CAAC,EAClGiJ,EAAiBrI,EAAuBZ,EAAQ,qBAAqB,CAAC,EAC1E,SAASY,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,CAAG,CAY9FT,EAAQwO,sBANsB5F,GAAc,CAAC,CAACA,EAAWC,cAAc,0BAA0B,EAoSjG7I,EAAQyO,oBA7RoB,SAAU7F,GAOpC,MAAME,EAAa,GAQbC,EAAgB,GAQhBC,EAAe,GAQfC,EAAkB,GASlByF,EAAY,GAWZxF,EAAkB,GAQxBxF,IAAIyF,EAA4B,KAQ5B5D,EAMJ6D,KAAKC,mBAAqB,IAAM9D,EAMhC6D,KAAKE,QAAU,IAAMV,EAMrBQ,KAAKG,2BAA6B,IAAMH,KAAKI,oBAAoBhJ,EAAUG,QAAQgG,mBAAmB,EAAEc,EAAE,EAM1G2B,KAAKI,oBAAsBxB,IACzB,IAAM2G,EAAkBvF,KAAKwF,8BAA8B5G,CAAU,EACrE,OAAI2G,EACKA,EAAgBE,WAAW,EAE7BzF,KAAK0F,uBAAuB9G,CAAU,EAAE1G,KACjD,EAUA8H,KAAKO,oBAAsB,CAAC3B,EAAY1G,KACtC,IAAMqN,EAAkBvF,KAAKwF,8BAA8B5G,CAAU,EAK/DqF,GAJFsB,IACFA,EAAgBI,WAAWzN,CAAK,EAChCqN,EAAgB7E,KAAK,OAAO,GAEhBV,KAAK0F,uBAAuB9G,CAAU,GAGpD,OAFA3H,EAAeM,QAAQ2M,YAAYD,EAAO/L,CAAK,EAC/C+L,EAAMpB,cAAc,IAAIC,MAAM,OAAO,CAAC,EAC/B9C,KAAKW,kBAAkB/B,CAAU,CAC1C,EAQAoB,KAAKwF,8BAAgC5G,IACnC,IAGMgH,EAEN,OALI5N,OAAO6I,OAAOf,EAAiBlB,CAAU,GAAKkB,EAAgBlB,KAG5DgH,EAAkB5F,KAAK6F,sBAAsBjH,CAAU,EAC7DkB,EAAgBlB,GAAckH,QAAQC,IAAIH,CAAe,GAClD9F,EAAgBlB,EACzB,EAOAoB,KAAK0F,uBAAyB9G,IACxB5G,OAAO6I,OAAOyE,EAAW1G,CAAU,GAAO0G,EAAU1G,KAGxD0G,EAAU1G,GAAcoB,KAAKE,QAAQ,EAAET,iCAAiCb,cAAuB,GACxF0G,EAAU1G,IAQnBoB,KAAKiB,mBAAqB,KACxBjB,KAAKE,QAAQ,EAAEgB,iBAAiB,iBAAiB,EAAEC,QAAQC,IACzDvB,EAAgBuB,EAAGC,QAAQjD,UAAYgD,CACzC,CAAC,EACMvB,GAQTG,KAAKW,kBAAoB/B,GAAc5G,OAAO6I,OAAOlB,EAAef,CAAU,GAAKe,EAAcf,KAAgBc,EAAWd,GAQ5HoB,KAAK6F,sBAAwBjH,GACvBA,GAAcxH,EAAUG,QAAQgG,mBAAmB,EAAEc,GAChD0B,EAECA,EAAH,KAAiCnB,EAU1CoB,KAAKgG,kBAAoB,CAACpH,EAAY2G,KACpCA,EAAgBhE,GAAG,QAASxL,GAAKiK,KAAK0F,uBAAuB9G,CAAU,EAAEiE,cAAc,IAAIC,MAAM,OAAO,CAAC,CAAC,CAC5G,EAOA9C,KAAKiG,8BAAgC,CAACrH,EAAYiD,KAChD,IAAIqB,iBAAiB,CAACC,EAAWC,KAC/B,IAAK9I,IAAI+I,KAAYF,EACJE,EAASC,OACXjC,QAAQjD,UAAYQ,IAC/BkB,EAAgBlB,GAAcoB,KAAKwF,8BAA8B5G,CAAU,EAC3EoB,KAAKgG,kBAAkBpH,EAAYkB,EAAgBlB,EAAW,EAC1DkB,EAAgBlB,KAClBwE,EAAS8C,WAAW,CAI5B,CAAC,EAAE3C,QAAQ1B,EAAgB,CACzB2B,UAAW,CAAA,CACb,CAAC,CACH,EAQAxD,KAAKsB,2BAA6B1C,IAChC0G,EAAU1G,GAAYnH,iBAAiB,QAAS1B,IAC9C4J,EAAcf,GAAcoB,KAAKI,oBAAoBxB,CAAU,EAC/DgB,EAAahB,GAAY4C,iBAAiBxB,KAAKW,kBAAkB/B,CAAU,CAAC,CAC9E,CAAC,CACH,EAQAoB,KAAKmG,QAAUzE,IASb,IAAKpH,IAAIsE,KALTmB,EAA4B/H,OAAO2J,OAAOD,CAAkB,EAAE,GAAGrD,GAAGuD,QAAQ,WAAY,EAAE,EAKnEF,EAAoB,CACzC,IAAMG,EAAiBH,EAAmB9C,GAK1Cc,EAAWd,GAAcoB,KAAKI,oBAAoBxB,CAAU,EAC5DgB,EAAahB,GAAc,IAAIW,EAAehI,QAAQsK,CAAc,EACpE/B,EAAgBlB,GAAcoB,KAAKwF,8BAA8B5G,CAAU,EAC3E0G,EAAU1G,GAAcoB,KAAK0F,uBAAuB9G,CAAU,EAC9DoB,KAAKsB,2BAA2B1C,CAAU,EAGrCkB,EAAgBlB,IACnBoB,KAAKiG,8BAA8BrH,EAAYiD,CAAc,CAEjE,CAGA,IAAKvH,IAAIsE,KAAckB,EACjB9H,OAAO6I,OAAOf,EAAiBlB,CAAU,GAAOkB,EAAgBlB,IAClEoB,KAAKgG,kBAAkBpH,EAAYkB,EAAgBlB,EAAW,CAGpE,EASA,CACE,MAAM8C,EAAqB1B,KAAKiB,mBAAmB,EAInDa,WAAW,KACT9B,KAAKmG,QAAQzE,CAAkB,CACjC,EAAG,EAAE,EACLvF,EAAkB,IAAIkD,EAAmB9H,QAAQyI,IAAI,EACrD,IAAIV,EAA6B/H,QAAQyI,KAAM0B,CAAkB,CAChE,CACL,CAGA,EAAE,CAACK,qBAAqB,EAAEC,0BAA0B,GAAGC,oCAAoC,GAAGC,sBAAsB,GAAGC,kBAAkB,EAAE,GAAGiE,GAAG,CAAC,SAAS9P,EAAQU,EAAOJ,GAC1K,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQyP,4BAA8BzP,EAAQ0P,0BAA4B,KAAA,EAC1E,IAAIjH,EAAqBnI,EAAuBZ,EAAQ,yBAAyB,CAAC,EAC9Ec,EAAYF,EAAuBZ,EAAQ,oBAAoB,CAAC,EAEhEgJ,GADiBpI,EAAuBZ,EAAQ,iBAAiB,CAAC,EACnCY,EAAuBZ,EAAQ,mCAAmC,CAAC,GAClGiJ,EAAiBrI,EAAuBZ,EAAQ,qBAAqB,CAAC,EAC1E,SAASY,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,CAAG,CAY9FT,EAAQyP,4BAN4B7G,GAAc,CAAC,CAACA,EAAWC,cAAc,0BAA0B,EAsPvG7I,EAAQ0P,0BA/O0B,SAAU9G,GAM1C,MAAME,EAAa,GAMbC,EAAgB,GAOhBC,EAAe,GAOfC,EAAkB,GAOlB0C,EAAkB,GAMlBzC,EAAkB,GAOxBxF,IAAIyF,EAA4B,KAM5B5D,EAsKF,GAhKF6D,KAAKC,mBAAqB,IAAM9D,EAMhC6D,KAAKE,QAAU,IAAMV,EAMrBQ,KAAKG,2BAA6B,IAAMH,KAAKI,oBAAoBhJ,EAAUG,QAAQgG,mBAAmB,EAAEc,EAAE,EAO1G2B,KAAKI,oBAAsBxB,IACzB,IAAM2G,EAAkBvF,KAAKK,6BAA6BzB,CAAU,EACpE,OAAI2G,EACKA,EAAgBE,WAAW,EAE7BzF,KAAKyC,6BAA6B7D,CAAU,EAAE8D,SACvD,EAQA1C,KAAKO,oBAAsB,CAAC3B,EAAY1G,KACtC,IAAMyK,EAAiB3C,KAAKyC,6BAA6B7D,CAAU,EAKnE,OAJA+D,EAAeD,UAAYxK,EAG3ByK,EAAeE,cAAc,IAAIC,MAAM,OAAO,CAAC,EACxC9C,KAAKW,kBAAkB/B,CAAU,CAC1C,EAQAoB,KAAKK,6BAA+BzB,IAClC,IAGMgH,EAEN,OALI5N,OAAO6I,OAAOf,EAAiBlB,CAAU,GAAOkB,EAAgBlB,KAG9DgH,EAAkB5F,KAAK6F,sBAAsBjH,CAAU,EAC7DkB,EAAgBlB,GAAckH,QAAQC,IAAIH,CAAe,GAClD9F,EAAgBlB,EACzB,EASAoB,KAAKyC,6BAA+B7D,IAC9B5G,OAAO6I,OAAO0B,EAAiB3D,CAAU,IAG7C2D,EAAgB3D,GAAcoB,KAAK+C,6BAA6BnE,CAAU,EAAEa,cAAc,mBAAmB,GACtG8C,EAAgB3D,IASzBoB,KAAK+C,6BAA+BnE,IAC9B5G,OAAO6I,OAAOhB,EAAiBjB,CAAU,GAAOiB,EAAgBjB,KAGpEiB,EAAgBjB,GAAcoB,KAAKE,QAAQ,EAAET,iCAAiCb,KAAc,GACrFiB,EAAgBjB,IAQzBoB,KAAKiB,mBAAqB,KACxBjB,KAAKE,QAAQ,EAAEgB,iBAAiB,iBAAiB,EAAEC,QAAQC,IACzDvB,EAAgBuB,EAAGC,QAAQjD,UAAYgD,CACzC,CAAC,EACMvB,GAYTG,KAAKW,kBAAoB/B,GAAc5G,OAAO6I,OAAOlB,EAAef,CAAU,GAAKe,EAAcf,KAAgBc,EAAWd,GAQ5HoB,KAAK6F,sBAAwBjH,GACvBA,GAAcxH,EAAUG,QAAQgG,mBAAmB,EAAEc,GAChD0B,EAECA,EAAH,KAAiCnB,EAU1CoB,KAAKiD,oBAAsBrE,IACnB+D,EAAiB3C,KAAKyC,6BAA6B7D,CAAU,EACnE,IAAIsE,iBAAiB,CAACC,EAAWC,KAC/B,IAAK9I,IAAI+I,KAAYF,EACnBE,EAASC,OAAOT,cAAc,IAAIC,MAAM,OAAO,CAAC,CAEpD,CAAC,EAAES,QAAQZ,EAAgB,CACzBa,UAAW,CAAA,CACb,CAAC,CACH,EAOAxD,KAAKsB,2BAA6B1C,IAChCoB,KAAKyC,6BAA6B7D,CAAU,EAAEnH,iBAAiB,QAAS1B,IACtE4J,EAAcf,GAAcoB,KAAKI,oBAAoBxB,CAAU,EAC/DgB,EAAahB,GAAY4C,iBAAiBxB,KAAKW,kBAAkB/B,CAAU,CAAC,CAC9E,CAAC,CACH,EAUkBnE,KAAAA,IAAZqL,QACFpM,QAAQD,MAAM,2DAA2D,MAD3E,CAIA,IAMSmF,EANH8C,EAAqB1B,KAAKiB,mBAAmB,EAMnD,IAASrC,KADTmB,EAA4B/H,OAAO2J,OAAOD,CAAkB,EAAE,GAAGrD,GAAGuD,QAAQ,WAAY,EAAE,EACnEF,EAAoB,CACzCpH,IAAIuH,EAAiBH,EAAmB9C,GACxCc,EAAWd,GAAcoB,KAAKI,oBAAoBxB,CAAU,EAC5DgB,EAAahB,GAAc,IAAIW,EAAehI,QAAQsK,CAAc,EACpE7B,KAAKiD,oBAAoBrE,CAAU,EACnCoB,KAAKsB,2BAA2B1C,CAAU,CAC5C,CACAzC,EAAkB,IAAIkD,EAAmB9H,QAAQyI,IAAI,EACrD,IAAIV,EAA6B/H,QAAQyI,KAAM0B,CAAkB,CAfjE,CAiBJ,CAGA,EAAE,CAACK,qBAAqB,EAAEC,0BAA0B,GAAGC,oCAAoC,GAAGC,sBAAsB,GAAGC,kBAAkB,EAAE,GAAGoE,GAAG,CAAC,SAASjQ,EAAQU,EAAOJ,GAC1K,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQW,QAAU,KAAA,EAClB,IAAIH,EAAYF,EAAuBZ,EAAQ,oBAAoB,CAAC,EAChEkQ,EAAwBlQ,EAAQ,wBAAwB,EACxDmQ,EAA8BnQ,EAAQ,8BAA8B,EACpEoQ,EAAqBpQ,EAAQ,qBAAqB,EAClDqQ,EAAoBrQ,EAAQ,oBAAoB,EAChDsQ,EAAwBtQ,EAAQ,wBAAwB,EACxDuQ,EAAuBvQ,EAAQ,uBAAuB,EACtDwQ,EAA6BxQ,EAAQ,6BAA6B,EAClEyQ,EAAwB7P,EAAuBZ,EAAQ,wBAAwB,CAAC,EACpF,SAASY,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,CAAG,CAKxF2P,EAAgB,WAMpB,MAAMC,EAAsB,yBAMtBC,EAAyB9P,EAAUG,QAAQkH,qCAAqC,EAsBtF,MAAM0I,EAAkBC,IACtB,IAAK9M,IAAI+M,KAA2BD,EAC9BE,EAAsBD,CAAuB,GAGjDE,EAAeF,CAAuB,CAE1C,EAOMC,EAAwBD,GAA2B,CAAC,CAACA,EAAwBnG,iBAAiBgG,CAAsB,EAAEpQ,OAOtHyQ,EAAiBF,IAGhBG,EAAmBH,CAAuB,GAAMA,EAAwBjD,UAAUO,SAAS,oBAAoB,GAA2B0C,EAe/DI,QAAQ,qBAAqB,KAUjFJ,IAC5B,OAAQ,MACN,KAAM,EAAGX,EAAmBlC,qBAAqB6C,CAAuB,EAEtEF,EAAgBE,EAAwBnG,iBAAiB,WAAW,CAAC,EACrE,MACF,KAAM,EAAGsF,EAAsBrH,wBAAwBkI,CAAuB,EAC5E,OAAO,IAAIb,EAAsBpH,qBAAqBiI,CAAuB,EAC/E,KAAM,EAAGZ,EAA4BpE,8BAA8BgF,CAAuB,EACxF,OAAO,IAAIZ,EAA4BnE,2BAA2B+E,CAAuB,EAC3F,KAAM,EAAGR,EAAqBzB,uBAAuBiC,CAAuB,EAC1E,OAAO,IAAIR,EAAqBxB,oBAAoBgC,CAAuB,EAC7E,KAAM,EAAGP,EAA2BT,6BAA6BgB,CAAuB,EACtF,OAAO,IAAIP,EAA2BR,0BAA0Be,CAAuB,EACzF,KAAM,EAAGT,EAAsB3B,wBAAwBoC,CAAuB,EAC5E,OAAO,IAAIT,EAAsB1B,qBAAqBmC,CAAuB,EAC/E,KAAM,EAAGV,EAAkB7B,oBAAoBuC,CAAuB,EACpE,OAAO,IAAIV,EAAkB5B,iBAAiBsC,CAAuB,EACvE,QACE3N,QAAQgO,KAAK,2EAA4EL,CAAuB,CAEpH,CACF,GA9C2CA,CAAuB,EAC9DM,EAAsBN,CAAuB,EAKjD,EAuFMG,EAAqBI,GAAoBA,EAAiBC,aAAazQ,EAAUG,QAAQ8F,oBAAoB,GAAK,CAAC,CAACuK,EAAiBnI,cAAc,sBAAsB,EAOzKkI,EAAwBC,GAAoBA,EAAiBE,aAAa1Q,EAAUG,QAAQ8F,qBAAsB,EAAE,EAe1H,MAAO,CACL1F,KA7JW,WACX,IAAMyP,EAA2BW,SAAS7G,iBAAiB+F,CAAmB,EAG1EG,EAAyBtQ,SAC3BqQ,EAAgBC,CAAwB,EA2FpCY,EAAaD,SAASE,eAAe,iBAAiB,EAC5D,IAAI/E,iBAAiB,CAACC,EAAWC,KAC/B,IAAK9I,IAAI+I,KAAYF,EAAW,CAExB+E,EADS7E,EAASC,OACEpC,iBAAiB+F,CAAmB,EAC1DiB,EAASpR,QACXqQ,EAAgBe,CAAQ,CAE5B,CACF,CAAC,EAAE3E,QAAQyE,EAAY,CACrBxE,UAAW,CAAA,EACX2E,QAAS,CAAA,CACX,CAAC,EAUD,CAAC,GAD2BJ,SAAS7G,iBAAiB,qBAAqB,GAClDC,QAAQiH,IAC3BA,GAAsB,CAACZ,EAAmBY,CAAkB,IAC7C,IAAIrB,EAAsBxP,QAAQ6Q,CAAkB,EACrET,EAAsBS,CAAkB,EAK5C,CAAC,EArHH,EAqJElE,YAPkB,CAACmE,EAASnQ,KAC5BmQ,EAAQC,MAAM,EACdD,EAAQnQ,MAAQA,EAChBmQ,EAAQE,KAAK,CACf,EAIEf,mBAAAA,CACF,CACF,EAAE,EAEF5Q,EAAQW,QADOyP,CAGf,EAAE,CAACjF,qBAAqB,EAAEyG,yBAAyB,EAAEC,+BAA+B,EAAEC,yBAAyB,EAAEC,sBAAsB,EAAEC,qBAAqB,EAAEC,yBAAyB,EAAEC,wBAAwB,GAAGC,8BAA8B,EAAE,GAAGC,GAAG,CAAC,SAAS1S,EAAQU,EAAOJ,GACrR,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQW,QAAU,KAAA,EAClB,IAAIH,GAC4BC,EADOf,EAAQ,oBAAoB,IACde,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,EAoW3FT,EAAQW,QA7VkB,SAAU0R,GAClC,IAAIC,EAAQlJ,KACZ1F,IAAI6O,EAAkC,EAAnB3O,UAAU1D,QAA+B2D,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,cACvF,MAAM4O,EAAY,CAChBC,OAAQ,gCACRC,QAAS,sBACT7P,MAAO,QACPE,QAAS,UACT4P,MAAO,QACPC,QAAS,UACTC,SAAU,WACVC,QAAS,UACTC,kBAAmB,cACnBC,mBAAoB,mBACpBC,2BAA4B,kCAC5BC,sBAAuB,6BACvBC,iBAAkB,qBACpB,EAMAzP,IAAI6B,EAMA4N,EAMAJ,EAYJ3J,KAAKgK,aAAe,KAClBhK,KAAKiK,kBAAkB,EACvBjK,KAAKkK,kBAAkB,CACzB,EAQAlK,KAAKmK,YAAc,SAAUxQ,GAC3BW,IAAI8P,EAAiC,EAAnB5P,UAAU1D,QAA+B2D,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,IACtF0O,EAAMmB,kBAAkB1Q,CAAO,EAC/BuP,EAAMoB,oBAAoB,EAC1BpB,EAAMqB,iBAAiB,EACvBrB,EAAMgB,kBAAkB,EACxBhB,EAAMsB,KAAKJ,CAAW,CACxB,EASApK,KAAKyK,aAAe,SAAU9Q,GAC5BW,IAAI8P,EAAiC,EAAnB5P,UAAU1D,QAA+B2D,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,IACtF0O,EAAMwB,iBAAiB,EACvBxB,EAAMyB,eAAe,EACrBzB,EAAMiB,YAAYxQ,EAASyQ,CAAW,CACxC,EASApK,KAAK4K,WAAa,SAAUjR,GAC1BW,IAAI8P,EAAiC,EAAnB5P,UAAU1D,QAA+B2D,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,IACtF0O,EAAMyB,eAAe,EACrBzB,EAAM2B,eAAe,EACrB3B,EAAMiB,YAAYxQ,EAASyQ,CAAW,CACxC,EASApK,KAAK8K,UAAY,SAAUnR,GACzBW,IAAI8P,EAAiC,EAAnB5P,UAAU1D,QAA+B2D,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,IACtF0O,EAAM2B,eAAe,EACrB3B,EAAMiB,YAAYxQ,EAASyQ,CAAW,CACxC,EAOApK,KAAKwK,KAAO,WACVlQ,IAAIyQ,EAA2B,EAAnBvQ,UAAU1D,QAA+B2D,KAAAA,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,EAChFsH,WAAW,KACToH,EAAM8B,oBAAoB,CAC5B,EAAGD,CAAK,EAGRjJ,WAAW,KACToH,EAAMoB,oBAAoB,EAC1BpB,EAAM+B,mBAAmB,EACzB/B,EAAMgC,iBAAiB,EACvBhC,EAAMiC,iBAAiB,EACvBjC,EAAMmB,kBAAkB,EAAE,CAC5B,EAAGU,EAAQ,GAAG,CAChB,EAWA/K,KAAKiK,kBAAoB,KACvB9N,EAAgBiI,UAAUC,IAAI+E,EAAUK,QAAQ,CAClD,EAOAzJ,KAAKsK,oBAAsB,KACzBnO,EAAgBiI,UAAUE,OAAO8E,EAAUK,QAAQ,CACrD,EAOAzJ,KAAKuK,iBAAmB,KACtBpO,EAAgBiI,UAAUC,IAAI+E,EAAUzP,OAAO,CACjD,EAOAqG,KAAKiL,mBAAqB,KACxB9O,EAAgBiI,UAAUE,OAAO8E,EAAUzP,OAAO,CACpD,EAOAqG,KAAKqK,kBAAoBhQ,IACvB0P,EAAiBqB,UAAY/Q,CAC/B,EAOA2F,KAAK2K,eAAiBtQ,IACpB8B,EAAgBiI,UAAUC,IAAI+E,EAAUG,KAAK,CAC/C,EAOAvJ,KAAKmL,iBAAmB9Q,IACtB8B,EAAgBiI,UAAUE,OAAO8E,EAAUG,KAAK,CAClD,EAOAvJ,KAAK0K,iBAAmB,KACtBvO,EAAgBiI,UAAUC,IAAI+E,EAAUI,OAAO,CACjD,EAOAxJ,KAAKqL,mBAAqB,KACxBlP,EAAgBiI,UAAUE,OAAO8E,EAAUI,OAAO,CACpD,EAOAxJ,KAAK6K,eAAiB,KACpB1O,EAAgBiI,UAAUC,IAAI+E,EAAU3P,KAAK,CAC/C,EAOAuG,KAAKkL,iBAAmB,KACtB/O,EAAgBiI,UAAUE,OAAO8E,EAAU3P,KAAK,CAClD,EAOAuG,KAAKkK,kBAAoB,KACvB/N,EAAgBiI,UAAUC,IAAI+E,EAAUM,OAAO,CACjD,EACA1J,KAAKgL,oBAAsB,KACzB7O,EAAgBiI,UAAUE,OAAO8E,EAAUM,OAAO,CACpD,EAOA1J,KAAKsL,OAAS,KACZnP,EAAkB6D,KAAKuL,eAAe,EACtC5B,EAAoB3J,KAAKwL,gBAAgB,EACzCzB,EAAmB/J,KAAKyL,eAAe,EACvCtP,EAAgBuP,YAAY/B,CAAiB,EAC7CxN,EAAgBuP,YAAY3B,CAAgB,EACrC5N,GAST6D,KAAKuL,eAAiB,KACpB,IAAMjC,EAAUvB,SAAS4D,cAAc,KAAK,EAI5C,OADArC,EAAQxB,aAAa,QAASsB,EAAUE,OAAO,EACxCA,CACT,EAQAtJ,KAAKwL,gBAAkB,KACrBlR,IAAIsR,EAAO5L,KAAK6L,iBAAiB,EACjCvR,IAAIuP,EAA6B9B,SAAS4D,cAAc,KAAK,EAC7D9B,EAA2B/B,aAAa,QAASsB,EAAUS,0BAA0B,EAGrFA,EAA6B+B,EAAKE,SAAStO,OAAO,CAAC4D,EAAI2K,KACrDzR,IAAI0R,EAAejE,SAAS4D,cAAc,MAAM,EAMhD,OAHAK,EAAalE,aAAa,QAASsB,EAAUU,qBAAqB,EAClEkC,EAAatJ,UAAYqJ,EACzB3K,EAAGsK,YAAYM,CAAY,EACpB5K,CACT,EAAGyI,CAA0B,EAG7BvP,IAAI2R,EAAalE,SAAS4D,cAAc,KAAK,EAS7C,OARAM,EAAWnE,aAAa,QAASsB,EAAUQ,kBAAkB,EAC7DqC,EAAWb,UAAYQ,EAAKM,QAG5BvC,EAAoB5B,SAAS4D,cAAc,KAAK,GAC9B7D,aAAa,QAASsB,EAAUO,iBAAiB,EACnEA,EAAkB+B,YAAYO,CAAU,EACxCtC,EAAkB+B,YAAY7B,CAA0B,EACjDF,CACT,EAYA3J,KAAK6L,iBAAmB,KACtBvR,IAAI6R,EAAU/U,EAAUG,QAAQc,aAAa,iBAAiB,EAAE8Q,GAC5DiD,EAAiBD,EAAQL,SAC7B,IAAKxR,IAAInE,EAAIiW,EAAetV,OAAS,EAAO,EAAJX,EAAOA,CAAC,GAAI,CAClDmE,IAAI+R,EAAIC,KAAKC,MAAMD,KAAKE,OAAO,GAAKrW,EAAI,EAAE,EACtCsW,EAAOL,EAAejW,GAC1BiW,EAAejW,GAAKiW,EAAeC,GACnCD,EAAeC,GAAKI,CACtB,CAEA,OADAN,EAAQL,SAAWM,EACZD,CACT,EAQAnM,KAAKyL,eAAiB,MACpB1B,EAAmBhC,SAAS4D,cAAc,KAAK,GAC9B7D,aAAa,QAASsB,EAAUW,gBAAgB,EAC1DA,GAGD2C,EAA2BzD,EAAgB/I,QAAQ,EACzD/D,EAAkB6D,KAAKsL,OAAO,EAC9BoB,EAAyBtI,UAAUC,IAAI+E,EAAUC,MAAM,EACvDqD,EAAyBhB,YAAYvP,CAAe,CAExD,CAIA,EAAE,CAAC4F,qBAAqB,CAAC,GAAG4K,GAAG,CAAC,SAASrW,EAAQU,EAAOJ,GACxD,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQW,QAAU,KAAA,EA0ClBX,EAAQW,QALC,CACLI,KA5BW,KACXiV,CASA,IAAMC,EAAgB9E,SAAS7G,iBAAiB,uCAAuC,EACrF4L,EAI4B,YAJhB,IAAIC,gBAAgBvV,OAAOwV,SAASC,MAAM,EAI1ClH,IAAI,MAAM,GAGxB8G,EAAc1L,QAAQ,CAACC,EAAIjL,KACzBmE,IAAI4S,EAAe9L,EAAG+L,KAAKtT,MAAM,GAAG,EAAEuT,OAAOC,OAAO,EAChDH,EAAaA,EAAapW,OAAS,GAAG+H,SAAS,SAAS,IAC1DuC,EAAG+L,KAAO/L,EAAG+L,KAAO,WACpB/L,EAAGgD,UAAUC,IAAI,gBAAgB,EACjCjD,EAAGgD,UAAUC,IAAI,UAAU,EAE/B,CAAC,CAxByB,CAC5B,CA2BA,CAKF,EAAE,IAAIiJ,GAAG,CAAC,SAAShX,EAAQU,EAAOJ,GAClC,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQW,QAAU,KAAA,EAClB,IAAIH,EAAYF,EAAuBZ,EAAQ,oBAAoB,CAAC,EAChEiX,EAAWrW,EAAuBZ,EAAQ,mBAAmB,CAAC,EAC9DkX,EAAgBtW,EAAuBZ,EAAQ,gBAAgB,CAAC,EACpE,SAASY,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,CAAG,CAkL9FT,EAAQW,QArK4B,SAAUiI,EAAYK,GACxDvF,IAAImT,EAAgD,EAAnBjT,UAAU1D,QAA+B2D,KAAAA,IAAjBD,UAAU,IAAmBA,UAAU,GAKhG,MAAMkT,EAAStW,EAAUG,QAAQc,aAAa,4BAA4B,EAQ1E2H,KAAK2N,8BAAgC,CAAC/O,EAAYiD,KAChD,IAAM+L,EAAiBxW,EAAUG,QAAQoH,uBAAuBC,CAAU,EACpEiP,EAAoBjP,GAAcxH,EAAUG,QAAQgG,mBAAmB,EAAEc,GAC1EuP,EAIDC,EACFhM,EAAe6J,YAAY8B,EAAcjW,QAAQuW,oBAAoBJ,EAAOK,oBAAoB,CAAC,GAG7F,CACJpS,OAAAA,EACAD,UAAAA,CACF,EAAI8R,EAAcjW,QAAQyW,sBAAsBN,EAAOjS,eAAe,EACtEuE,KAAKiO,WAAWtS,EAAQvE,EAAUG,QAAQyG,iBAAiBY,CAAU,CAAC,EACtEiD,EAAe6J,YAAYhQ,CAAS,GAZlCmG,EAAe6J,YAAY8B,EAAcjW,QAAQuW,oBAAoBJ,EAAOQ,oBAAoB,CAAC,CAarG,EAQAlO,KAAKiO,WAAa,CAACE,EAAeC,KAChCD,EAAc1W,iBAAiB,QAAS1B,IACtCA,EAAEsY,eAAe,EACXC,EAA2B9O,EAAWW,2BAA2B,EACvE,GAAKmO,EAAL,CAMA,MAAMnS,EAAkBqD,EAAWS,mBAAmB,GAAKT,EAAWS,mBAAmBmO,EAAe/P,EAAE,EAC1GlC,EAAgB6N,aAAa,EAC7BuD,EAAShW,QAAQ2C,eAAe9C,EAAUG,QAAQgG,mBAAmB,EAAEgR,eAAeC,WAAYJ,EAAeG,eAAeE,WAAYH,CAAwB,EAAEtV,KAAK0V,IACrKA,EAAOjV,MACT+F,EAAWS,mBAAmB,EAAE6K,UAAU4D,EAAO/U,OAAO,GAG1D6F,EAAWe,oBAAoB6N,EAAe/P,GAAIqQ,EAAOC,aAAa,EAAE,EACxExS,EAAgBqO,KAAK,EACvB,CAAC,CAbD,CAcF,CAAC,CACH,EASAxK,KAAK4O,wBAA0B,CAACC,EAAkBhP,KAChD,IAQEnE,EARIkS,EAAiBxW,EAAUG,QAAQoH,uBAAuBkQ,CAAgB,EAC1EC,EAAuBjP,EAAgBgP,GACxCjB,GAIC,CACJjS,OAAAA,EACAD,UAAAA,CACF,EAAI8R,EAAcjW,QAAQyW,sBAAsBN,EAAOqB,oBAAoB,EAC3E/O,KAAKgP,yBAAyBrT,EAAQvE,EAAUG,QAAQyG,iBAAiB6Q,CAAgB,EAAGhP,CAAe,EAC3GiP,EAAqBpD,YAAYhQ,CAAS,GARxCoT,EAAqBpD,YAAY8B,EAAcjW,QAAQuW,oBAAoBJ,EAAOQ,oBAAoB,CAAC,CAS3G,EAUAlO,KAAKgP,yBAA2B,CAACb,EAAec,EAAsBpP,KACpEsO,EAAc1W,iBAAiB,QAAS1B,IACtCA,EAAEsY,eAAe,EACjB,IAAMC,EAA2B9O,EAAWY,oBAAoB6O,EAAqB5Q,EAAE,EAIvF,GAAKiQ,EAAL,CAKAhU,IAAI4U,EAA2BlX,OAAOgL,KAAKnD,CAAe,EAAE/I,OACxDqY,EAAgB,CAAA,EAChBhT,EAAkBqD,EAAWS,mBAAmB,EAEpD,IAAK3F,IAAI8U,KADTjT,EAAgB6N,aAAa,EACAnK,EAAiB,CAC5CuP,EAAmBlR,SAASkR,EAAkB,EAAE,EAChD9U,IAAI+U,EAAuBjY,EAAUG,QAAQyG,iBAAiBoR,CAAgB,EAI1EA,IAAqBH,EAAqB5Q,IAAO4Q,GAAyBI,EAI9E9B,EAAShW,QAAQ2C,eAAe+U,EAAqBV,eAAeC,WAAYa,EAAqBd,eAAeE,WAAYH,CAAwB,EAAEtV,KAAK0V,IACzJA,EAAOjV,OAEJ0V,GACH3P,EAAWS,mBAAmB,EAAE6K,UAAU4D,EAAO/U,OAAO,EAE1DwV,EAAgB,CAAA,GAGlB3P,EAAWe,oBAAoB8O,EAAqBhR,GAAIqQ,EAAOC,aAAa,EAAE,CAChF,CAAC,EAAE3V,KAAK0V,IAI2B,IAHjCQ,EAAAA,GAGuCC,GACrChT,EAAgBqO,KAAK,CAEzB,CAAC,EApBC0E,CAAwB,EAqB5B,CAnCA,CAoCF,CAAC,CACH,EACAlP,KAAKsP,8BAAgC,CAAC1Q,EAAYiB,KAChDG,KAAK4O,wBAAwBhQ,EAAYiB,CAAe,EACxDG,KAAK2N,8BAA8B/O,EAAYiB,EAAgBjB,EAAW,CAC5E,EAME,IAESA,EAFH2Q,EAAcnY,EAAUG,QAAQuH,uBAChC0Q,EAAoBpY,EAAUG,QAAQ+G,qBAAqB,EACjE,IAASM,KAAciB,EACjB2P,IAAsBD,EAAYvQ,KAAQyO,GAC5CzN,KAAK4O,wBAAwBhQ,EAAYiB,CAAe,EAEtD2P,IAAsBD,EAAYxQ,MAAQ0O,CAAAA,GAC5CzN,KAAK2N,8BAA8B/O,EAAYiB,EAAgBjB,EAAW,EAExE4Q,IAAsBD,EAAYtQ,MAASwO,IAC7CzN,KAAK4O,wBAAwBhQ,EAAYiB,CAAe,EACxDG,KAAK2N,8BAA8B/O,EAAYiB,EAAgBjB,EAAW,EAIlF,CAIA,EAAE,CAAC6Q,oBAAoB,EAAE1N,qBAAqB,EAAE2N,iBAAiB,EAAE,GAAGC,GAAG,CAAC,SAASrZ,EAAQU,EAAOJ,GAClG,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQW,QAAU,KAAA,EA6ClBX,EAAQW,QAtCc,SAAUsK,GAK9B,MAAMgC,EAAuB,qBAM7BvJ,IAAIsV,EAAc,KAClB5P,KAAK8D,wBAA0B,IAAMD,EAOrC7D,KAAKwB,iBAAmBqO,GAAYA,EAAW7P,KAAK8P,eAAe,EAAI9P,KAAK+P,iBAAiB,EAC7F/P,KAAK8P,eAAiB,IAAM9P,KAAKgQ,eAAe,EAAE5L,UAAUC,IAAIR,CAAoB,EACpF7D,KAAK+P,iBAAmB,IAAM/P,KAAKgQ,eAAe,EAAE5L,UAAUE,OAAOT,CAAoB,EACzF7D,KAAKgQ,eAAiB,IACbJ,GAAe/N,EAAe4F,QAAQ,WAAW,EAAEhI,yCAAyCoC,EAAeR,QAAQjD,WAAW,EAQhIyD,IAGL+N,EAAc5P,KAAKgQ,eAAe,EAEtC,CAIA,EAAE,IAAIC,GAAG,CAAC,SAAS3Z,EAAQU,EAAOJ,GAClC,aAEAoB,OAAOC,eAAerB,EAAS,aAAc,CAC3CsB,MAAO,CAAA,CACT,CAAC,EACDtB,EAAQW,QAAU,KAAA,EAClB,IAAIH,EAAYF,EAAuBZ,EAAQ,oBAAoB,CAAC,EACrDY,EAAuBZ,EAAQ,mBAAmB,CAAC,EAClE,SAASY,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,CAAI,CAAG,CAMxF6Y,EAAe,WAInB,IAAM1U,EAAiBpE,EAAUG,QAAQiE,eAQzC,MAAMkS,EAAStW,EAAUG,QAAQc,aAAa,4BAA4B,EAOpE8X,EAAa,KACjB,IAAMC,EAAWrI,SAAS4D,cAAc,GAAG,EAGrC1P,GAFNmU,EAAStI,aAAa,OAAW1M,YAAYD,OAAOkV,KAAKC,MAA3B,kBAAkD,EAChFF,EAAStI,aAAa,QAAS,yBAAyB,EAC3CC,SAAS4D,cAAc,GAAG,GAIvC,OAHA1P,EAAK6L,aAAa,QAAY1Q,EAAUG,QAAQoG,qBAAqB,MAAM,EAAhD,iBAAkE,EAC7F1B,EAAK6L,aAAa,aAAc4F,EAAO6C,cAAc,EACrDH,EAAS1E,YAAYzP,CAAI,EAClBmU,CACT,EAoGA,MAAO,CACLtC,oBA7F0BlC,IAC1B,IAAMxC,EAAYhS,EAAUG,QAAQoG,qBAAqB,mBAAmB,EACtE3B,EAAQ+L,SAAS4D,cAAc,MAAM,EAGrCjQ,GAFNM,EAAM8L,aAAa,QAASsB,EAAUpN,KAAK,EAC3CA,EAAMoP,UAAYQ,EACA7D,SAAS4D,cAAc,KAAK,GAI9C,OAHAjQ,EAAUoM,aAAa,QAASsB,EAAU1N,SAAS,EACnDA,EAAUgQ,YAAYyE,EAAW,CAAC,EAClCzU,EAAUgQ,YAAY1P,CAAK,EACpBN,CACT,EAoFEsS,sBA7E4BpC,IAC5B,IAAMxC,EAAYhS,EAAUG,QAAQoG,qBAAqB,iBAAiB,EACpEhC,EAASoM,SAAS4D,cAAc,GAAG,EAInCjQ,GAHNC,EAAOyP,UAAYQ,EACnBjQ,EAAOmM,aAAa,QAASsB,EAAUzN,MAAM,EAC7CA,EAAOmM,aAAa,OAAQ,EAAE,EACZC,SAAS4D,cAAc,KAAK,GAI9C,OAHAjQ,EAAUoM,aAAa,QAASsB,EAAU1N,SAAS,EACnDA,EAAUgQ,YAAYyE,EAAW,CAAC,EAClCzU,EAAUgQ,YAAY/P,CAAM,EACrB,CACLA,OAAAA,EACAD,UAAAA,CACF,CACF,EAgEE8U,+BAxDqC,KACrC,IAAMpH,EAAYhS,EAAUG,QAAQoG,qBAAqB,oBAAoB,EACvE8S,EAAQrZ,EAAUG,QAAQc,aAAa,oBAAoB,EAG3DqY,EAAqB3I,SAAS4D,cAAc,GAAG,EACrD+E,EAAmBtF,UAAYqF,EAAMC,mBACrCA,EAAmB5I,aAAa,QAASsB,EAAU3N,eAAe,EAClEiV,EAAmB5I,aAAa,OAAQ,EAAE,EAG1C,MAAMjM,EAAuBkM,SAAS4D,cAAc,QAAQ,EAC5D9P,EAAqBiM,aAAa,QAASsB,EAAUvN,oBAAoB,EAGzEzE,EAAUG,QAAQ0F,uBAAuB,EAAEkE,QAAQ,SAAU/C,GAC3D,IAAMuS,EAAS5I,SAAS4D,cAAc,QAAQ,EAC9CgF,EAAOC,YAAcxS,EAASyS,MAC9BF,EAAOzY,MAAQkG,EAASmQ,eAAeC,WACnCpQ,EAAS7G,SACXoZ,EAAOG,SAAW,WAClBjV,EAAqBkV,QAAQJ,CAAM,GAGrC9U,EAAqB6P,YAAYiF,CAAM,CACzC,CAAC,EAGD,IAAMK,EAAkBjJ,SAAS4D,cAAc,MAAM,EAI/C7P,GAHNkV,EAAgB5F,UAAYqF,EAAM3U,0BAGAiM,SAAS4D,cAAc,OAAO,GAM1DtR,GALNyB,EAA0BgM,aAAa,QAASsB,EAAUtN,yBAAyB,EACnFA,EAA0B4P,YAAYsF,CAAe,EACrDlV,EAA0B4P,YAAY7P,CAAoB,EAG1CkM,SAAS4D,cAAc,KAAK,GAMtCjQ,GALNrB,EAAQyN,aAAa,QAASsB,EAAU/O,OAAO,EAC/CA,EAAQqR,YAAYgF,CAAkB,EACtCrW,EAAQqR,YAAY5P,CAAyB,EAG3BiM,SAAS4D,cAAc,IAAI,GAG7C,OAFAjQ,EAAUoM,aAAa,QAASsB,EAAU1N,SAAS,EACnDA,EAAUgQ,YAAYrR,CAAO,EACtB,CACLqW,mBAAAA,EACA7U,qBAAAA,EACAH,UAAAA,CACF,CACF,EAKEyU,WAAAA,EACA3U,eAAAA,CACF,CACF,EAAE,EAEF5E,EAAQW,QADO2Y,CAGf,EAAE,CAACT,oBAAoB,EAAE1N,qBAAqB,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE"}